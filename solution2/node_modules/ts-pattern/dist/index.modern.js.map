{"version":3,"file":"index.modern.js","sources":["../src/internals/symbols.ts","../src/internals/helpers.ts","../src/patterns.ts","../src/match.ts","../src/is-matching.ts"],"sourcesContent":["/**\n * Symbols used internally within ts-pattern to construct and discriminate\n * Guard, Not, and Select, and AnonymousSelect patterns\n *\n * Symbols have the advantage of not appearing in auto-complete suggestions in\n * user defined patterns, and eliminate the risk of property\n * overlap between ts-pattern internals and user defined patterns.\n *\n * These symbols have to be visible to tsc for type inference to work, but\n * users should not import them\n * @module\n * @private\n * @internal\n */\n\nexport const toExclude = Symbol('@ts-pattern/to-exclude');\nexport type toExclude = typeof toExclude;\n\nexport const matcher = Symbol('@ts-pattern/matcher');\nexport type matcher = typeof matcher;\n\nexport const unset = Symbol('@ts-pattern/unset');\nexport type unset = typeof unset;\n\nexport const anonymousSelectKey = '@ts-pattern/anonymous-select-key';\nexport type anonymousSelectKey = typeof anonymousSelectKey;\n","/**\n * @module\n * @private\n * @internal\n */\n\nimport * as symbols from './symbols';\nimport { SelectionType } from '../types/FindSelected';\nimport { Pattern, Matcher, MatcherType } from '../types/Pattern';\n\n// @internal\nexport const isObject = (value: unknown): value is Object =>\n  Boolean(value && typeof value === 'object');\n\n//   @internal\nexport const isMatcher = (\n  x: unknown\n): x is Matcher<unknown, unknown, MatcherType, SelectionType> => {\n  const pattern = x as Matcher<unknown, unknown, MatcherType, SelectionType>;\n  return pattern && !!pattern[symbols.matcher];\n};\n\n// @internal\nconst isOptionalPattern = (\n  x: unknown\n): x is Matcher<unknown, unknown, 'optional', SelectionType> => {\n  return isMatcher(x) && x[symbols.matcher]().matcherType === 'optional';\n};\n\n// tells us if the value matches a given pattern.\n// @internal\nexport const matchPattern = (\n  pattern: Pattern<any>,\n  value: any,\n  select: (key: string, value: unknown) => void\n): boolean => {\n  if (isObject(pattern)) {\n    if (isMatcher(pattern)) {\n      const matcher = pattern[symbols.matcher]();\n      const { matched, selections } = matcher.match(value);\n      if (matched && selections) {\n        Object.keys(selections).forEach((key) => select(key, selections[key]));\n      }\n      return matched;\n    }\n\n    if (!isObject(value)) return false;\n\n    if (Array.isArray(pattern)) {\n      if (!Array.isArray(value)) return false;\n      // Tuple pattern\n      return pattern.length === value.length\n        ? pattern.every((subPattern, i) =>\n            matchPattern(subPattern, value[i], select)\n          )\n        : false;\n    }\n\n    if (pattern instanceof Map) {\n      if (!(value instanceof Map)) return false;\n      return Array.from(pattern.keys()).every((key) =>\n        matchPattern(pattern.get(key), value.get(key), select)\n      );\n    }\n\n    if (pattern instanceof Set) {\n      if (!(value instanceof Set)) return false;\n\n      if (pattern.size === 0) return value.size === 0;\n\n      if (pattern.size === 1) {\n        const [subPattern] = Array.from(pattern.values());\n        return isMatcher(subPattern)\n          ? Array.from(value.values()).every((v) =>\n              matchPattern(subPattern, v, select)\n            )\n          : value.has(subPattern);\n      }\n\n      return Array.from(pattern.values()).every((subPattern) =>\n        value.has(subPattern)\n      );\n    }\n\n    return Object.keys(pattern).every((k: string): boolean => {\n      // @ts-ignore\n      const subPattern = pattern[k];\n\n      return (\n        (k in value || isOptionalPattern(subPattern)) &&\n        matchPattern(\n          subPattern,\n          // @ts-ignore\n          value[k],\n          select\n        )\n      );\n    });\n  }\n\n  return Object.is(value, pattern);\n};\n\n// @internal\nexport const getSelectionKeys = (pattern: Pattern<any>): string[] => {\n  if (isObject(pattern)) {\n    if (isMatcher(pattern)) {\n      return pattern[symbols.matcher]().getSelectionKeys?.() ?? [];\n    }\n    if (Array.isArray(pattern)) return flatMap(pattern, getSelectionKeys);\n    return flatMap(Object.values(pattern), getSelectionKeys);\n  }\n  return [];\n};\n\n// @internal\nexport const flatMap = <a, b>(xs: a[], f: (v: a) => b[]): b[] =>\n  xs.reduce<b[]>((acc, p) => acc.concat(f(p)), []);\n","import { matchPattern, getSelectionKeys, flatMap } from './internals/helpers';\nimport * as symbols from './internals/symbols';\nimport { GuardFunction } from './types/helpers';\nimport { InvertPattern } from './types/InvertPattern';\nimport {\n  Pattern,\n  UnknownPattern,\n  OptionalP,\n  ArrayP,\n  AndP,\n  OrP,\n  NotP,\n  GuardP,\n  SelectP,\n  AnonymousSelectP,\n  GuardExcludeP,\n} from './types/Pattern';\n\nexport { Pattern };\n\n/**\n * `P.infer<typeof somePattern>` will return the type of the value\n * matched by this pattern.\n *\n * [Read `P.infer` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pinfer)\n *\n * @example\n * const userPattern = { name: P.string }\n * type User = P.infer<typeof userPattern>\n */\nexport type infer<p extends Pattern<any>> = InvertPattern<p>;\n\n/**\n * `P.optional(subpattern)` takes a sub pattern and returns a pattern which matches if the\n * key is undefined or if it is defined and the sub pattern matches its value.\n *\n * [Read `P.optional` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Poptional-patterns)\n\n* @example\n *  match(value)\n *   .with({ greeting: P.optional('Hello') }, () => 'will match { greeting?: \"Hello\" }')\n */\nexport function optional<\n  input,\n  p extends unknown extends input ? UnknownPattern : Pattern<input>\n>(pattern: p): OptionalP<input, p> {\n  return {\n    [symbols.matcher]() {\n      return {\n        match: <I>(value: I | input) => {\n          let selections: Record<string, unknown[]> = {};\n          const selector = (key: string, value: any) => {\n            selections[key] = value;\n          };\n          if (value === undefined) {\n            getSelectionKeys(pattern).forEach((key) =>\n              selector(key, undefined)\n            );\n            return { matched: true, selections };\n          }\n          const matched = matchPattern(pattern, value, selector);\n          return { matched, selections };\n        },\n        getSelectionKeys: () => getSelectionKeys(pattern),\n        matcherType: 'optional',\n      };\n    },\n  };\n}\n\ntype Elem<xs> = xs extends Array<infer x> ? x : never;\n\n/**\n * `P.array(subpattern)` takes a sub pattern and returns a pattern, which matches\n * arrays if all their elements match the sub pattern.\n *\n * [Read `P.array` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Parray-patterns)\n *\n * @example\n *  match(value)\n *   .with({ users: P.array({ name: P.string }) }, () => 'will match { name: string }[]')\n */\nexport function array<\n  input,\n  p extends unknown extends input ? UnknownPattern : Pattern<Elem<input>>\n>(pattern: p): ArrayP<input, p> {\n  return {\n    [symbols.matcher]() {\n      return {\n        match: <I>(value: I | input) => {\n          if (!Array.isArray(value)) return { matched: false };\n\n          let selections: Record<string, unknown[]> = {};\n\n          if (value.length === 0) {\n            getSelectionKeys(pattern).forEach((key) => {\n              selections[key] = [];\n            });\n            return { matched: true, selections };\n          }\n\n          const selector = (key: string, value: unknown) => {\n            selections[key] = (selections[key] || []).concat([value]);\n          };\n\n          const matched = value.every((v) =>\n            matchPattern(pattern, v, selector)\n          );\n\n          return { matched, selections };\n        },\n        getSelectionKeys: () => getSelectionKeys(pattern),\n      };\n    },\n  };\n}\n\n/**\n * `P.intersection(...patterns)` returns a pattern which matches\n * only if **every** patterns provided in parameter match the input.\n *\n * [Read `P.intersection` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pintersection-patterns)\n *\n * @example\n *  match(value)\n *   .with(\n *     {\n *       user: P.intersection(\n *         { firstname: P.string },\n *         { lastname: P.string },\n *         { age: P.when(age => age > 21) }\n *       )\n *     },\n *     ({ user }) => 'will match { firstname: string, lastname: string, age: number } if age > 21'\n *   )\n */\nexport function intersection<\n  input,\n  ps extends unknown extends input\n    ? [UnknownPattern, ...UnknownPattern[]]\n    : [Pattern<input>, ...Pattern<input>[]]\n>(...patterns: ps): AndP<input, ps> {\n  return {\n    [symbols.matcher]: () => ({\n      match: (value) => {\n        let selections: Record<string, unknown[]> = {};\n        const selector = (key: string, value: any) => {\n          selections[key] = value;\n        };\n        const matched = (patterns as UnknownPattern[]).every((p) =>\n          matchPattern(p, value, selector)\n        );\n        return { matched, selections };\n      },\n      getSelectionKeys: () =>\n        flatMap(patterns as UnknownPattern[], getSelectionKeys),\n      matcherType: 'and',\n    }),\n  };\n}\n\n/**\n * `P.union(...patterns)` returns a pattern which matches\n * if **at least one** of the patterns provided in parameter match the input.\n *\n * [Read `P.union` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Punion-patterns)\n *\n * @example\n *  match(value)\n *   .with(\n *     { type: P.union('a', 'b', 'c') },\n *     ({ user }) => 'will match { type: \"a\" | \"b\" | \"c\" }'\n *   )\n */\nexport function union<\n  input,\n  ps extends unknown extends input\n    ? [UnknownPattern, ...UnknownPattern[]]\n    : [Pattern<input>, ...Pattern<input>[]]\n>(...patterns: ps): OrP<input, ps> {\n  return {\n    [symbols.matcher]: () => ({\n      match: <I>(value: I | input) => {\n        let selections: Record<string, unknown[]> = {};\n        const selector = (key: string, value: any) => {\n          selections[key] = value;\n        };\n        flatMap(patterns as UnknownPattern[], getSelectionKeys).forEach((key) =>\n          selector(key, undefined)\n        );\n        const matched = (patterns as UnknownPattern[]).some((p) =>\n          matchPattern(p, value, selector)\n        );\n        return { matched, selections };\n      },\n      getSelectionKeys: () =>\n        flatMap(patterns as UnknownPattern[], getSelectionKeys),\n      matcherType: 'or',\n    }),\n  };\n}\n\n/**\n * `P.not(pattern)` returns a pattern which matches if the sub pattern\n * doesn't match.\n *\n * [Read `P.not` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pnot-patterns)\n *\n * @example\n *  match<{ a: string | number }>(value)\n *   .with({ a: P.not(P.string) }, (x) => 'will match { a: number }'\n *   )\n */\nexport function not<\n  input,\n  p extends unknown extends input ? UnknownPattern : Pattern<input> | undefined\n>(pattern: p): NotP<input, p> {\n  return {\n    [symbols.matcher]: () => ({\n      match: <I>(value: I | input) => ({\n        matched: !matchPattern(pattern, value, () => {}),\n      }),\n      getSelectionKeys: () => [],\n      matcherType: 'not',\n    }),\n  };\n}\n\n/**\n * `P.when((value) => boolean)` returns a pattern which matches\n * if the predicate returns true for the current input.\n *\n * [Read `P.when` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pwhen-patterns)\n *\n * @example\n *  match<{ age: number }>(value)\n *   .with({ age: P.when(age => age > 21) }, (x) => 'will match if value.age > 21'\n *   )\n */\nexport function when<input, p extends (value: input) => unknown>(\n  predicate: p\n): GuardP<\n  input,\n  p extends (value: any) => value is infer narrowed ? narrowed : never\n>;\nexport function when<input, narrowed extends input, excluded>(\n  predicate: (input: input) => input is narrowed\n): GuardExcludeP<input, narrowed, excluded>;\nexport function when<input, p extends (value: input) => unknown>(\n  predicate: p\n): GuardP<\n  input,\n  p extends (value: any) => value is infer narrowed ? narrowed : never\n> {\n  return {\n    [symbols.matcher]: () => ({\n      match: <I>(value: I | input) => ({\n        matched: Boolean(predicate(value as input)),\n      }),\n    }),\n  };\n}\n\n/**\n * `P.select()` is a pattern which will always match,\n * and will inject the selected piece of input in the handler function.\n *\n * [Read `P.select` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pselect-patterns)\n *\n * @example\n *  match<{ age: number }>(value)\n *   .with({ age: P.select() }, (age) => 'age: number'\n *   )\n */\nexport function select(): AnonymousSelectP;\nexport function select<\n  input,\n  patternOrKey extends\n    | string\n    | (unknown extends input ? UnknownPattern : Pattern<input>)\n>(\n  patternOrKey: patternOrKey\n): patternOrKey extends string\n  ? SelectP<patternOrKey>\n  : SelectP<symbols.anonymousSelectKey, input, patternOrKey>;\nexport function select<\n  input,\n  p extends unknown extends input ? UnknownPattern : Pattern<input>,\n  k extends string\n>(key: k, pattern: p): SelectP<k, input, p>;\nexport function select(\n  ...args: [keyOrPattern?: unknown | string, pattern?: unknown]\n): SelectP<string> {\n  const key: string | undefined =\n    typeof args[0] === 'string' ? args[0] : undefined;\n  const pattern: unknown =\n    args.length === 2\n      ? args[1]\n      : typeof args[0] === 'string'\n      ? undefined\n      : args[0];\n  return {\n    [symbols.matcher]() {\n      return {\n        match: (value) => {\n          let selections: Record<string, unknown> = {\n            [key ?? symbols.anonymousSelectKey]: value,\n          };\n          const selector = (key: string, value: any) => {\n            selections[key] = value;\n          };\n          return {\n            matched:\n              pattern === undefined\n                ? true\n                : matchPattern(pattern, value, selector),\n            selections: selections,\n          };\n        },\n        getSelectionKeys: () =>\n          [key ?? symbols.anonymousSelectKey].concat(\n            pattern === undefined ? [] : getSelectionKeys(pattern)\n          ),\n      };\n    },\n  };\n}\n\nfunction isUnknown(x: unknown): x is unknown {\n  return true;\n}\n\nfunction isNumber<T>(x: T | number): x is number {\n  return typeof x === 'number';\n}\n\nfunction isString<T>(x: T | string): x is string {\n  return typeof x === 'string';\n}\n\nfunction isBoolean<T>(x: T | boolean): x is boolean {\n  return typeof x === 'boolean';\n}\n\nfunction isBigInt<T>(x: T | bigint): x is bigint {\n  return typeof x === 'bigint';\n}\n\nfunction isSymbol<T>(x: T | symbol): x is symbol {\n  return typeof x === 'symbol';\n}\n\nfunction isNullish<T>(x: T | null | undefined): x is null | undefined {\n  return x === null || x === undefined;\n}\n\ntype AnyConstructor = new (...args: any[]) => any;\n\nfunction isInstanceOf<T extends AnyConstructor>(classConstructor: T) {\n  return (val: unknown): val is InstanceType<T> =>\n    val instanceof classConstructor;\n}\n\n/**\n * `P.any` is a wildcard pattern, matching **any value**.\n *\n * [Read `P.any` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#P_-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P.any, () => 'will always match')\n */\nexport const any = when(isUnknown);\n\n/**\n * `P._` is a wildcard pattern, matching **any value**.\n * It's an alias to `P.any`.\n *\n * [Read `P._` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#P_-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P._, () => 'will always match')\n */\nexport const _ = any;\n\n/**\n * `P.string` is a wildcard pattern matching any **string**.\n *\n * [Read `P.string` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pstring-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P.string, () => 'will match on strings')\n */\n\nexport const string = when(isString);\n\n/**\n * `P.number` is a wildcard pattern matching any **number**.\n *\n * [Read `P.number` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pnumber-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P.number, () => 'will match on numbers')\n */\nexport const number = when(isNumber);\n\n/**\n * `P.boolean` is a wildcard pattern matching any **boolean**.\n *\n * [Read `P.boolean` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#boolean-wildcard)\n *\n * @example\n *   .with(P.boolean, () => 'will match on booleans')\n */\nexport const boolean = when(isBoolean);\n\n/**\n * `P.bigint` is a wildcard pattern matching any **bigint**.\n *\n * [Read `P.bigint` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#bigint-wildcard)\n *\n * @example\n *   .with(P.bigint, () => 'will match on bigints')\n */\nexport const bigint = when(isBigInt);\n\n/**\n * `P.symbol` is a wildcard pattern matching any **symbol**.\n *\n * [Read `P.symbol` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#symbol-wildcard)\n *\n * @example\n *   .with(P.symbol, () => 'will match on symbols')\n */\nexport const symbol = when(isSymbol);\n\n/**\n * `P.nullish` is a wildcard pattern matching **null** or **undefined**.\n *\n * [Read `P.nullish` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#nullish-wildcard)\n *\n * @example\n *   .with(P.nullish, () => 'will match on null or undefined')\n */\nexport const nullish = when(isNullish);\n\n/**\n * `P.instanceOf(SomeClass)` is a pattern matching instances of a given class.\n *\n * [Read `P.instanceOf` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Pinstanceof-patterns)\n *\n *  @example\n *   .with(P.instanceOf(SomeClass), () => 'will match on SomeClass instances')\n */\nexport function instanceOf<T extends AnyConstructor>(\n  classConstructor: T\n): GuardP<unknown, InstanceType<T>> {\n  return when(isInstanceOf(classConstructor));\n}\n\n/**\n * `P.typed<SomeType>()` is a way to set the input type this\n * pattern should match on.\n *\n * It returns all utility functions to create patterns,\n * Like `array`, `union`, `intersection`, etc.\n *\n * [Read `P.typed` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#Ptyped)\n *\n * @example\n *  .with(\n *    P.typed<string | number[]>().array(P.string),\n *    (arrayOfString) => arrayOfString.join(', ')\n *  )\n */\nexport function typed<input>(): {\n  array<p extends Pattern<Elem<input>>>(pattern: p): ArrayP<input, p>;\n\n  optional<p extends Pattern<input>>(pattern: p): OptionalP<input, p>;\n\n  intersection<ps extends [Pattern<input>, ...Pattern<input>[]]>(\n    ...patterns: ps\n  ): AndP<input, ps>;\n\n  union<ps extends [Pattern<input>, ...Pattern<input>[]]>(\n    ...patterns: ps\n  ): OrP<input, ps>;\n\n  not<p extends Pattern<input>>(pattern: p): NotP<input, p>;\n\n  when<narrowed extends input = never>(\n    predicate: GuardFunction<input, narrowed>\n  ): GuardP<input, narrowed>;\n\n  select<pattern extends Pattern<input>>(\n    pattern: pattern\n  ): SelectP<symbols.anonymousSelectKey, input, pattern>;\n  select<p extends Pattern<input>, k extends string>(\n    key: k,\n    pattern: p\n  ): SelectP<k, input, p>;\n} {\n  return {\n    array: array as any,\n    optional: optional as any,\n    intersection: intersection as any,\n    union: union as any,\n    not: not as any,\n    select: select as any,\n    when: when as any,\n  };\n}\n","import { Pattern } from './types/Pattern';\nimport { GuardValue } from './types/helpers';\nimport { Match, PickReturnValue } from './types/Match';\nimport * as symbols from './internals/symbols';\nimport { matchPattern } from './internals/helpers';\n\n/**\n * `match` creates a **pattern matching expression**.\n *\n * Use `.with(pattern, handler)` to pattern match on the input.\n *\n * Use `.exhaustive()` or `.otherwise(() => defaultValue)` to end the expression and get the result.\n *\n * [Read `match` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#match)\n *\n * @example\n *  declare let input: \"A\" | \"B\";\n *\n *  return match(input)\n *    .with(\"A\", () => \"It's a A!\")\n *    .with(\"B\", () => \"It's a B!\")\n *    .exhaustive();\n *\n */\nexport const match = <input, output = symbols.unset>(\n  value: input\n): Match<input, output> => new MatchExpression(value, []) as any;\n\n/**\n * This class represents a match expression. It follows the\n * builder pattern, we chain methods to add features to the expression\n * until we call `.exhaustive`, `.otherwise` or the unsafe `.run`\n * method to execute it.\n *\n * The types of this class aren't public, the public type definition\n * can be found in src/types/Match.ts.\n */\nclass MatchExpression<i, o> {\n  constructor(\n    private value: i,\n    private cases: {\n      match: (value: i) => { matched: boolean; value: any };\n      handler: (...args: any) => any;\n    }[]\n  ) {}\n\n  with(...args: any[]) {\n    const handler = args[args.length - 1];\n\n    const patterns: Pattern<i>[] = [args[0]];\n    const predicates: ((value: i) => unknown)[] = [];\n\n    // case with guard as second argument\n    if (args.length === 3 && typeof args[1] === 'function') {\n      patterns.push(args[0]);\n      predicates.push(args[1]);\n    } else if (args.length > 2) {\n      // case with several patterns\n      patterns.push(...args.slice(1, args.length - 1));\n    }\n\n    return new MatchExpression(\n      this.value,\n      this.cases.concat([\n        {\n          match: (value: i) => {\n            let selected: Record<string, unknown> = {};\n            const matched = Boolean(\n              patterns.some((pattern) =>\n                matchPattern(pattern, value, (key, value) => {\n                  selected[key] = value;\n                })\n              ) && predicates.every((predicate) => predicate(value as any))\n            );\n            return {\n              matched,\n              value:\n                matched && Object.keys(selected).length\n                  ? symbols.anonymousSelectKey in selected\n                    ? selected[symbols.anonymousSelectKey]\n                    : selected\n                  : value,\n            };\n          },\n          handler,\n        },\n      ])\n    );\n  }\n\n  when<p extends (value: i) => unknown, c>(\n    predicate: p,\n    handler: (value: GuardValue<p>) => PickReturnValue<o, c>\n  ) {\n    return new MatchExpression<i, PickReturnValue<o, c>>(\n      this.value,\n      this.cases.concat([\n        {\n          match: (value) => ({\n            matched: Boolean(predicate(value)),\n            value,\n          }),\n          handler,\n        },\n      ])\n    );\n  }\n\n  otherwise<c>(\n    handler: (value: i) => PickReturnValue<o, c>\n  ): PickReturnValue<o, c> {\n    return new MatchExpression<i, PickReturnValue<o, c>>(\n      this.value,\n      this.cases.concat([\n        {\n          match: (value) => ({\n            matched: true,\n            value,\n          }),\n          handler,\n        },\n      ])\n    ).run();\n  }\n\n  exhaustive() {\n    return this.run();\n  }\n\n  run() {\n    let selected = this.value;\n    let handler: undefined | ((...args: any) => any) = undefined;\n\n    for (let i = 0; i < this.cases.length; i++) {\n      const entry = this.cases[i];\n      const matchResult = entry.match(this.value);\n      if (matchResult.matched) {\n        selected = matchResult.value;\n        handler = entry.handler;\n        break;\n      }\n    }\n    if (!handler) {\n      let displayedValue;\n      try {\n        displayedValue = JSON.stringify(this.value);\n      } catch (e) {\n        displayedValue = this.value;\n      }\n      throw new Error(\n        `Pattern matching error: no pattern matches value ${displayedValue}`\n      );\n    }\n    return handler(selected, this.value);\n  }\n}\n","import { Pattern } from './types/Pattern';\nimport { MatchedValue } from './types/Match';\nimport * as P from './patterns';\nimport { matchPattern } from './internals/helpers';\n\n/**\n * `isMatching` takes pattern and returns a **type guard** function, cheching if a value matches this pattern.\n *\n * [Read `isMatching` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#ismatching)\n *\n * @example\n *  const hasName = isMatching({ name: P.string })\n *\n *  declare let input: unknown\n *\n *  if (hasName(input)) {\n *    // `input` inferred as { name: string }\n *    return input.name\n *  }\n */\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p\n): (value: any) => value is MatchedValue<any, P.infer<p>>;\n/**\n * `isMatching` takes pattern and a value and checks if the value matches this pattern.\n *\n * [Read `isMatching` documentation on GitHub](https://github.com/gvergnaud/ts-pattern#ismatching)\n *\n * @example\n *  declare let input: unknown\n *\n *  if (isMatching({ name: P.string }, input)) {\n *    // `input` inferred as { name: string }\n *    return input.name\n *  }\n */\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p,\n  value: any\n): value is MatchedValue<any, P.infer<p>>;\n\nexport function isMatching<p extends Pattern<any>>(\n  ...args: [pattern: p, value?: any]\n): boolean | ((vale: any) => boolean) {\n  if (args.length === 1) {\n    const [pattern] = args;\n    return (value: any): value is MatchedValue<any, P.infer<p>> =>\n      matchPattern(pattern, value, () => {});\n  }\n  if (args.length === 2) {\n    const [pattern, value] = args;\n    return matchPattern(pattern, value, () => {});\n  }\n\n  throw new Error(\n    `isMatching wasn't given the right number of arguments: expected 1 or 2, received ${args.length}.`\n  );\n}\n"],"names":["matcher","Symbol","anonymousSelectKey","isObject","value","Boolean","isMatcher","x","symbols","matchPattern","pattern","select","matched","selections","match","Object","keys","forEach","key","Array","isArray","length","every","subPattern","i","Map","from","get","Set","size","values","v","has","k","matcherType","is","getSelectionKeys","_pattern$symbols$matc","_pattern$symbols$matc2","_pattern$symbols$matc3","call","flatMap","xs","f","reduce","acc","p","concat","optional","selector","undefined","array","intersection","patterns","union","some","not","when","predicate","args","any","_","string","number","boolean","bigint","symbol","nullish","classConstructor","val","isInstanceOf","MatchExpression","constructor","cases","this","with","handler","predicates","push","slice","selected","otherwise","run","exhaustive","entry","matchResult","displayedValue","JSON","stringify","e","Error","isMatching"],"mappings":"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"}