"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnChainView = void 0;
const utils_1 = require("@taquito/utils");
const errors_1 = require("../errors");
const runCodeHelper = (viewArgsType, viewReturnType, contractStorageType, viewInstructions, viewArgs, contractStorageValue, balance, chain_id, source, amount = '0') => {
    return {
        script: [
            { prim: 'parameter', args: [{ prim: 'pair', args: [viewArgsType, contractStorageType] }] },
            { prim: 'storage', args: [{ prim: 'option', args: [viewReturnType] }] },
            {
                prim: 'code',
                args: [
                    [
                        { prim: 'CAR' },
                        viewInstructions,
                        { prim: 'SOME' },
                        { prim: 'NIL', args: [{ prim: 'operation' }] },
                        { prim: 'PAIR' },
                    ],
                ],
            },
        ],
        storage: { prim: 'None' },
        input: { prim: 'Pair', args: [viewArgs, contractStorageValue] },
        amount,
        balance,
        chain_id,
        source,
    };
};
class OnChainView {
    constructor(_rpc, _readProvider, _contractAddress, _smartContractViewSchema, _contractStorageType, _args = 'Unit') {
        this._rpc = _rpc;
        this._readProvider = _readProvider;
        this._contractAddress = _contractAddress;
        this._smartContractViewSchema = _smartContractViewSchema;
        this._contractStorageType = _contractStorageType;
        this._args = _args;
    }
    /**
     * @description Get the signature of the smart contract view
     */
    getSignature() {
        return {
            parameter: this._smartContractViewSchema.extractArgsSchema(),
            result: this._smartContractViewSchema.extractResultSchema(),
        };
    }
    /**
     * @description Get the result of the view simulation
     * @param executionContext.source the public key hash of the account who initialized this view execution.
     * @param executionContext.viewCaller the contract address which is the caller of view.
     */
    executeView(executionContext) {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyContextExecution(executionContext);
            const balance = (yield this._readProvider.getBalance(this._contractAddress, 'head')).toString();
            const chainId = yield this._readProvider.getChainId();
            const storage = yield this._readProvider.getStorage(this._contractAddress, 'head');
            return this.executeViewAndDecodeResult(runCodeHelper(this._smartContractViewSchema.viewArgsType, this._smartContractViewSchema.viewReturnType, this._contractStorageType, this.adaptViewCodeToContext(this._smartContractViewSchema.instructions, executionContext.viewCaller, balance), this.transformArgsToMichelson(), storage, balance, chainId, executionContext.source));
        });
    }
    verifyContextExecution(executionContext) {
        if (executionContext.source &&
            utils_1.validateAddress(executionContext.source) !== utils_1.ValidationResult.VALID) {
            throw new errors_1.InvalidViewSimulationContext(`The source account who initialized the view execution is invalid: ${executionContext.source}.`);
        }
        if (!executionContext.viewCaller ||
            utils_1.validateAddress(executionContext.viewCaller) !== utils_1.ValidationResult.VALID) {
            throw new errors_1.InvalidViewSimulationContext(`The contract which is the caller of view is invalid: ${executionContext.viewCaller}.`);
        }
    }
    transformArgsToMichelson() {
        try {
            return this._smartContractViewSchema.encodeViewArgs(this._args);
        }
        catch (error) {
            throw new errors_1.InvalidViewParameterError(this._smartContractViewSchema.viewName, this.getSignature(), this._args, error);
        }
    }
    /**
     * @description Loops through the view's instructions and replace BALANCE, SENDER, SELF_ADDRESS and AMOUNT with Michelson expressions that match the current context, if applicable.
     *
     * Certain specific instructions have different semantics in view:
     * BALANCE represents the current amount of mutez held by the contract where view is;
     * SENDER represents the contract which is the caller of view;
     * SELF_ADDRESS represents the contract where view is;
     * AMOUNT is always 0 mutez.
     *
     */
    adaptViewCodeToContext(instructions, viewCaller, contractBalance) {
        const instructionsToReplace = {
            BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],
            SENDER: [{ prim: 'PUSH', args: [{ prim: 'address' }, { string: viewCaller }] }],
            SELF_ADDRESS: [
                { prim: 'PUSH', args: [{ prim: 'address' }, { string: this._contractAddress }] },
            ],
            AMOUNT: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] }],
        };
        instructions.forEach((inst, i) => {
            if (inst.prim in instructionsToReplace) {
                instructions[i] = Object(instructionsToReplace)[inst.prim];
            }
            if (inst.args && inst.args.length !== 0) {
                this.adaptViewCodeToContext(inst.args, viewCaller, contractBalance);
            }
            else if (Array.isArray(inst)) {
                this.adaptViewCodeToContext(inst, viewCaller, contractBalance);
            }
        });
        return instructions;
    }
    executeViewAndDecodeResult(viewScript) {
        return __awaiter(this, void 0, void 0, function* () {
            let storage;
            try {
                storage = (yield this._rpc.runCode(viewScript)).storage;
            }
            catch (error) {
                const failWith = errors_1.validateAndExtractFailwith(error);
                throw failWith
                    ? new errors_1.ViewSimulationError(`The simulation of the on-chain view named ${this._smartContractViewSchema.viewName} failed with: ${JSON.stringify(failWith)}`, this._smartContractViewSchema.viewName, failWith, error)
                    : error;
            }
            if (!storage.args) {
                throw new errors_1.ViewSimulationError(`View simulation failed with an invalid result: ${storage}`, this._smartContractViewSchema.viewName);
            }
            return this._smartContractViewSchema.decodeViewResult(storage.args[0]);
        });
    }
}
exports.OnChainView = OnChainView;
//# sourceMappingURL=contract-on-chain-view.js.map