"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractMethodFactory = void 0;
const contract_method_object_param_1 = require("./contract-method-object-param");
const contract_method_flat_param_1 = require("./contract-method-flat-param");
const contract_on_chain_view_1 = require("./contract-on-chain-view");
class ContractMethodFactory {
    constructor(provider, contractAddress) {
        this.provider = provider;
        this.contractAddress = contractAddress;
    }
    createContractMethodFlatParams(smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint = true, isAnonymous = false) {
        return new contract_method_flat_param_1.ContractMethod(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);
    }
    createContractMethodObjectParam(smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint = true, isAnonymous = false) {
        return new contract_method_object_param_1.ContractMethodObject(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);
    }
    createContractViewObjectParam(rpc, readProvider, smartContractViewSchema, contractStorageType, viewArgs) {
        return new contract_on_chain_view_1.OnChainView(rpc, readProvider, this.contractAddress, smartContractViewSchema, contractStorageType, viewArgs);
    }
}
exports.ContractMethodFactory = ContractMethodFactory;
//# sourceMappingURL=contract-method-factory.js.map