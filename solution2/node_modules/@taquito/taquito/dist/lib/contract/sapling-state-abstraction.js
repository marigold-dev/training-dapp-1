"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaplingStateAbstraction = void 0;
class SaplingStateAbstraction {
    constructor(id, provider) {
        this.id = id;
        this.provider = provider;
    }
    /**
     *
     * @description Fetch the sapling state
     *
     * @param block optional block level to fetch the values from (head will be use by default)
     * @returns Return a json object of the sapling_state
     *
     */
    getSaplingDiff(block) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.getSaplingDiffByID(this.id.toString(), block);
        });
    }
    getId() {
        return this.id.toString();
    }
}
exports.SaplingStateAbstraction = SaplingStateAbstraction;
//# sourceMappingURL=sapling-state-abstraction.js.map