"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasMetadataWithInternalOperationResult = exports.hasMetadataWithResult = exports.hasMetadata = exports.isSourceOp = exports.isOpRequireReveal = exports.isOpWithFee = exports.isKind = exports.findWithKind = exports.attachKind = exports.OpKind = void 0;
var rpc_1 = require("@taquito/rpc");
Object.defineProperty(exports, "OpKind", { enumerable: true, get: function () { return rpc_1.OpKind; } });
const attachKind = (op, kind) => {
    return Object.assign(Object.assign({}, op), { kind });
};
exports.attachKind = attachKind;
const findWithKind = (arr, kind) => {
    if (Array.isArray(arr)) {
        const found = arr.find((op) => op.kind === kind);
        if (found && exports.isKind(found, kind)) {
            return found;
        }
    }
};
exports.findWithKind = findWithKind;
const isKind = (op, kind) => {
    return op.kind === kind;
};
exports.isKind = isKind;
const isOpWithFee = (op) => {
    return ([
        'transaction',
        'delegation',
        'origination',
        'reveal',
        'register_global_constant',
        'tx_rollup_origination',
        'tx_rollup_submit_batch',
    ].indexOf(op.kind) !== -1);
};
exports.isOpWithFee = isOpWithFee;
const isOpRequireReveal = (op) => {
    return ([
        'transaction',
        'delegation',
        'origination',
        'register_global_constant',
        'tx_rollup_origination',
        'tx_rollup_submit_batch',
    ].indexOf(op.kind) !== -1);
};
exports.isOpRequireReveal = isOpRequireReveal;
const isSourceOp = (op) => {
    return ['transaction', 'delegation', 'origination', 'reveal', 'ballot'].indexOf(op.kind) !== -1;
};
exports.isSourceOp = isSourceOp;
const hasMetadata = (op) => {
    return 'metadata' in op;
};
exports.hasMetadata = hasMetadata;
const hasMetadataWithResult = (op) => {
    return exports.hasMetadata(op) && 'operation_result' in op.metadata;
};
exports.hasMetadataWithResult = hasMetadataWithResult;
const hasMetadataWithInternalOperationResult = (op) => {
    return exports.hasMetadata(op) && 'internal_operation_results' in op.metadata;
};
exports.hasMetadataWithInternalOperationResult = hasMetadataWithInternalOperationResult;
//# sourceMappingURL=types.js.map