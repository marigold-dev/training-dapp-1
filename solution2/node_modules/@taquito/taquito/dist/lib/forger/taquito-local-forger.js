"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaquitoLocalForger = void 0;
const local_forging_1 = require("@taquito/local-forging");
class TaquitoLocalForger {
    constructor(context) {
        this.context = context;
    }
    getNextProto() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.context.proto) {
                const nextProto = yield this.context.readProvider.getNextProtocol('head');
                this.context.proto = nextProto;
            }
            return this.context.proto;
        });
    }
    forge({ branch, contents }) {
        return __awaiter(this, void 0, void 0, function* () {
            const forger = new local_forging_1.LocalForger(yield this.getNextProto());
            return forger.forge({ branch, contents });
        });
    }
}
exports.TaquitoLocalForger = TaquitoLocalForger;
//# sourceMappingURL=taquito-local-forger.js.map