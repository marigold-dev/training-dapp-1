import { Wallet } from '../../wallet';
import { ContractProvider } from '../../contract';
import { ContractMethodObject } from './contract-method-object-param';
import { ContractMethod } from './contract-method-flat-param';
import { ParameterSchema, ViewSchema } from '@taquito/michelson-encoder';
import { RpcClientInterface, MichelsonV1Expression } from '@taquito/rpc';
import { OnChainView } from './contract-on-chain-view';
import { TzReadProvider } from '../../read-provider/interface';
export declare class ContractMethodFactory<T extends ContractProvider | Wallet> {
    private provider;
    private contractAddress;
    constructor(provider: T, contractAddress: string);
    createContractMethodFlatParams(smartContractMethodSchema: ParameterSchema, smartContractMethodName: string, args: any[], isMultipleEntrypoint?: boolean, isAnonymous?: boolean): ContractMethod<T>;
    createContractMethodObjectParam(smartContractMethodSchema: ParameterSchema, smartContractMethodName: string, args: any[], isMultipleEntrypoint?: boolean, isAnonymous?: boolean): ContractMethodObject<T>;
    createContractViewObjectParam(rpc: RpcClientInterface, readProvider: TzReadProvider, smartContractViewSchema: ViewSchema, contractStorageType: MichelsonV1Expression, viewArgs: any): OnChainView;
}
