/**
 *  @category Error
 *  @description Error that indicates an invalid key being passed or used
 */
export declare class InvalidKeyError extends Error {
    key: string;
    errorDetail?: string | undefined;
    name: string;
    constructor(key: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error that indicates an Invalid Public Key being passed or used
 */
export declare class InvalidPublicKeyError extends Error {
    publicKey: string;
    name: string;
    constructor(publicKey: string, errorDetail?: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid signature being passed or used
 */
export declare class InvalidSignatureError extends Error {
    signature: string;
    name: string;
    constructor(signature: string, errorDetail?: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid message being passed or used
 */
export declare class InvalidMessageError extends Error {
    msg: string;
    errorDetail?: string | undefined;
    name: string;
    constructor(msg: string, errorDetail?: string | undefined);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid contract address being passed or used
 */
export declare class InvalidContractAddressError extends Error {
    contractAddress: string;
    name: string;
    constructor(contractAddress: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid address being passed or used (both contract and implicit)
 */
export declare class InvalidAddressError extends Error {
    address: string;
    name: string;
    constructor(address: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid chain id being passed or used
 */
export declare class InvalidChainIdError extends Error {
    chainId: string;
    name: string;
    constructor(chainId: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid key hash being passed or used
 */
export declare class InvalidKeyHashError extends Error {
    keyHash: string;
    name: string;
    constructor(keyHash: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid block hash being passed or used
 */ export declare class InvalidBlockHashError extends Error {
    blockHash: string;
    name: string;
    constructor(blockHash: string);
}
/**
 *  @category Error
 *  @description Error that indicates invalid protocol hash being passed or used
 */
export declare class InvalidProtocolHashError extends Error {
    protocolHash: string;
    name: string;
    constructor(protocolHash: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid operation hash being passed or used
 */ export declare class InvalidOperationHashError extends Error {
    operationHash: string;
    name: string;
    constructor(operationHash: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid operation kind being passed or used
 */
export declare class InvalidOperationKindError extends Error {
    operationKind: string;
    name: string;
    constructor(operationKind: string);
}
/**
 *  @category Error
 *  @description General error that indicates something is no longer supported and/or deprecated
 */
export declare class DeprecationError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description General error that indicates an action is prohibited or not allowed
 */
export declare class ProhibitedActionError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description General error that indicates a failure when trying to convert data from one type to another
 */
export declare class ValueConversionError extends Error {
    value: string;
    desiredType: string;
    name: string;
    constructor(value: string, desiredType: string);
}
