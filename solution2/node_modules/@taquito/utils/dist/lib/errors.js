"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueConversionError = exports.ProhibitedActionError = exports.DeprecationError = exports.InvalidOperationKindError = exports.InvalidOperationHashError = exports.InvalidProtocolHashError = exports.InvalidBlockHashError = exports.InvalidKeyHashError = exports.InvalidChainIdError = exports.InvalidAddressError = exports.InvalidContractAddressError = exports.InvalidMessageError = exports.InvalidSignatureError = exports.InvalidPublicKeyError = exports.InvalidKeyError = void 0;
/**
 *  @category Error
 *  @description Error that indicates an invalid key being passed or used
 */
class InvalidKeyError extends Error {
    constructor(key, errorDetail) {
        super(`The key ${key} is invalid. ${errorDetail}`);
        this.key = key;
        this.errorDetail = errorDetail;
        this.name = 'InvalidKeyError';
    }
}
exports.InvalidKeyError = InvalidKeyError;
/**
 *  @category Error
 *  @description Error that indicates an Invalid Public Key being passed or used
 */
class InvalidPublicKeyError extends Error {
    constructor(publicKey, errorDetail) {
        super(`The public key '${publicKey}' is invalid. ${errorDetail}`);
        this.publicKey = publicKey;
        this.name = 'InvalidPublicKeyError';
    }
}
exports.InvalidPublicKeyError = InvalidPublicKeyError;
/**
 *  @category Error
 *  @description Error that indicates an invalid signature being passed or used
 */
class InvalidSignatureError extends Error {
    constructor(signature, errorDetail) {
        super(`The signature '${signature}' is invalid (${errorDetail})`);
        this.signature = signature;
        this.name = 'InvalidSignatureError';
    }
}
exports.InvalidSignatureError = InvalidSignatureError;
/**
 *  @category Error
 *  @description Error that indicates an invalid message being passed or used
 */
class InvalidMessageError extends Error {
    constructor(msg, errorDetail) {
        super(`The message '${msg}' is invalid. ${errorDetail}`);
        this.msg = msg;
        this.errorDetail = errorDetail;
        this.name = 'InvalidMessageError';
    }
}
exports.InvalidMessageError = InvalidMessageError;
/**
 *  @category Error
 *  @description Error that indicates an invalid contract address being passed or used
 */
class InvalidContractAddressError extends Error {
    constructor(contractAddress) {
        super(`The contract address '${contractAddress}' is invalid`);
        this.contractAddress = contractAddress;
        this.name = 'InvalidContractAddressError';
    }
}
exports.InvalidContractAddressError = InvalidContractAddressError;
/**
 *  @category Error
 *  @description Error that indicates an invalid address being passed or used (both contract and implicit)
 */
class InvalidAddressError extends Error {
    constructor(address) {
        super(`The address '${address}' is invalid`);
        this.address = address;
        this.name = 'InvalidAddressError';
    }
}
exports.InvalidAddressError = InvalidAddressError;
/**
 *  @category Error
 *  @description Error that indicates an invalid chain id being passed or used
 */
class InvalidChainIdError extends Error {
    constructor(chainId) {
        super(`The chain id '${chainId}' is invalid`);
        this.chainId = chainId;
        this.name = 'InvalidChainIdError';
    }
}
exports.InvalidChainIdError = InvalidChainIdError;
/**
 *  @category Error
 *  @description Error that indicates an invalid key hash being passed or used
 */
class InvalidKeyHashError extends Error {
    constructor(keyHash) {
        super(`The public key hash '${keyHash}' is invalid`);
        this.keyHash = keyHash;
        this.name = 'InvalidKeyHashError';
    }
}
exports.InvalidKeyHashError = InvalidKeyHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid block hash being passed or used
 */ class InvalidBlockHashError extends Error {
    constructor(blockHash) {
        super(`The block hash '${blockHash}' is invalid`);
        this.blockHash = blockHash;
        this.name = 'InvalidBlockHashError';
    }
}
exports.InvalidBlockHashError = InvalidBlockHashError;
/**
 *  @category Error
 *  @description Error that indicates invalid protocol hash being passed or used
 */
class InvalidProtocolHashError extends Error {
    constructor(protocolHash) {
        super(`The protocol hash '${protocolHash}' is invalid`);
        this.protocolHash = protocolHash;
        this.name = 'InvalidProtocolHashError';
    }
}
exports.InvalidProtocolHashError = InvalidProtocolHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid operation hash being passed or used
 */ class InvalidOperationHashError extends Error {
    constructor(operationHash) {
        super(`The operation hash '${operationHash}' is invalid`);
        this.operationHash = operationHash;
        this.name = 'InvalidOperationHashError';
    }
}
exports.InvalidOperationHashError = InvalidOperationHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid operation kind being passed or used
 */
class InvalidOperationKindError extends Error {
    constructor(operationKind) {
        super(`The operation kind '${operationKind}' is unsupported`);
        this.operationKind = operationKind;
        this.name = 'InvalidOperationKindError';
    }
}
exports.InvalidOperationKindError = InvalidOperationKindError;
/**
 *  @category Error
 *  @description General error that indicates something is no longer supported and/or deprecated
 */
class DeprecationError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'DeprecationError';
    }
}
exports.DeprecationError = DeprecationError;
/**
 *  @category Error
 *  @description General error that indicates an action is prohibited or not allowed
 */
class ProhibitedActionError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'ProhibitedActionError';
    }
}
exports.ProhibitedActionError = ProhibitedActionError;
/**
 *  @category Error
 *  @description General error that indicates a failure when trying to convert data from one type to another
 */
class ValueConversionError extends Error {
    constructor(value, desiredType) {
        super(`Unable to convert ${value} to a ${desiredType}`);
        this.value = value;
        this.desiredType = desiredType;
        this.name = 'ValueConversionError';
    }
}
exports.ValueConversionError = ValueConversionError;
//# sourceMappingURL=errors.js.map