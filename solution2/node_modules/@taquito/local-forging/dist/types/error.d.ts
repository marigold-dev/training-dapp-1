/**
 *  @category Error
 *  @description Error that indicates an invalid block hash being passed or used
 */
export declare class InvalidBlockHashError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid operation schema being passed or used
 */ export declare class InvalidOperationSchemaError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates an entrypoint exceeding maximum size
 */
export declare class OversizedEntryPointError extends Error {
    entrypoint: string;
    name: string;
    constructor(entrypoint: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid ballot value
 */
export declare class InvalidBallotValueError extends Error {
    ballotValue: string;
    name: string;
    constructor(ballotValue: string);
}
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to decode ballot value
 */
export declare class DecodeBallotValueError extends Error {
    ballotValue: string;
    name: string;
    constructor(ballotValue: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid hex string have been passed or used
 */
export declare class InvalidHexStringError extends Error {
    hexString: string;
    name: string;
    constructor(hexString: string);
}
/**
 *  @category Error
 *  @description Error that indicates unexpected Michelson Value being passed or used
 */
export declare class UnexpectedMichelsonValueError extends Error {
    value: string;
    name: string;
    constructor(value: string);
}
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to decode an operation
 */
export declare class OperationDecodingError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode an operation
 */
export declare class OperationEncodingError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates an unsupported operation being passed or used
 */
export declare class UnsupportedOperationError extends Error {
    op: string;
    name: string;
    constructor(op: string);
}
