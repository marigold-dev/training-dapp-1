import { Decoder } from '../decoder';
import { Uint8ArrayConsumer } from '../uint8array-consumer';
import { CODEC } from '../constants';
export declare const ManagerOperationSchema: {
    branch: CODEC;
    contents: CODEC[];
};
export declare const ActivationSchema: {
    pkh: CODEC;
    secret: CODEC;
};
export declare const RevealSchema: {
    source: CODEC;
    fee: CODEC;
    counter: CODEC;
    gas_limit: CODEC;
    storage_limit: CODEC;
    public_key: CODEC;
};
export declare const DelegationSchema: {
    source: CODEC;
    fee: CODEC;
    counter: CODEC;
    gas_limit: CODEC;
    storage_limit: CODEC;
    delegate: CODEC;
};
export declare const TransactionSchema: {
    source: CODEC;
    fee: CODEC;
    counter: CODEC;
    gas_limit: CODEC;
    storage_limit: CODEC;
    amount: CODEC;
    destination: CODEC;
    parameters: CODEC;
};
export declare const OriginationSchema: {
    source: CODEC;
    fee: CODEC;
    counter: CODEC;
    gas_limit: CODEC;
    storage_limit: CODEC;
    balance: CODEC;
    delegate: CODEC;
    script: CODEC;
};
export declare const BallotSchema: {
    source: CODEC;
    period: CODEC;
    proposal: CODEC;
    ballot: CODEC;
};
export declare const EndorsementSchema: {
    slot: CODEC;
    level: CODEC;
    round: CODEC;
    block_payload_hash: CODEC;
};
export declare const SeedNonceRevelationSchema: {
    level: CODEC;
    nonce: CODEC;
};
export declare const ProposalsSchema: {
    source: CODEC;
    period: CODEC;
    proposals: CODEC;
};
export declare const RegisterGlobalConstantSchema: {
    source: CODEC;
    fee: CODEC;
    counter: CODEC;
    gas_limit: CODEC;
    storage_limit: CODEC;
    value: CODEC;
};
export declare const operationEncoder: (encoders: {
    [key: string]: (val: object) => string;
}) => (operation: {
    kind: string;
}) => string;
export declare const operationDecoder: (decoders: {
    [key: string]: Decoder;
}) => (value: Uint8ArrayConsumer) => {
    kind: string;
};
declare type Schema = Record<string, CODEC | CODEC[]>;
export declare type Value = Record<keyof Schema, unknown[]>;
export declare const schemaEncoder: (encoders: {
    [key: string]: (val: object) => string;
}) => (schema: Schema) => (value: Value) => string;
export declare const schemaDecoder: (decoders: {
    [key: string]: Decoder;
}) => (schema: {
    [key: string]: string | string[];
}) => (value: Uint8ArrayConsumer) => {};
export {};
