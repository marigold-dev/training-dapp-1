"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxRollupSubmitBatchSchema = exports.TxRollupOriginationSchema = exports.TransferTicketSchema = void 0;
const constants_1 = require("../../constants");
exports.TransferTicketSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    ticket_contents: constants_1.CODEC.VALUE,
    ticket_ty: constants_1.CODEC.VALUE,
    ticket_ticketer: constants_1.CODEC.ADDRESS,
    ticket_amount: constants_1.CODEC.ZARITH,
    destination: constants_1.CODEC.ADDRESS,
    entrypoint: constants_1.CODEC.ENTRYPOINT,
};
exports.TxRollupOriginationSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    tx_rollup_origination: constants_1.CODEC.TX_ROLLUP_ORIGINATION_PARAM,
};
exports.TxRollupSubmitBatchSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    rollup: constants_1.CODEC.TX_ROLLUP_ID,
    content: constants_1.CODEC.TX_ROLLUP_BATCH_CONTENT,
    burn_limit: constants_1.CODEC.BURN_LIMIT,
};
//# sourceMappingURL=operation-proto13.js.map