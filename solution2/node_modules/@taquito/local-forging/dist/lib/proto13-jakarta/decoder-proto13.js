"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodersProto13 = void 0;
const decoder_1 = require("../decoder");
const constants_1 = require("../constants");
const codec_proto13_1 = require("./codec-proto13");
const operation_1 = require("../schema/operation");
const codec_proto13_2 = require("./michelson-proto13/codec-proto13");
const operation_proto13_1 = require("./schema/operation-proto13");
exports.decodersProto13 = Object.assign(Object.assign({}, decoder_1.decoders), { [constants_1.CODEC.SCRIPT]: codec_proto13_2.scriptDecoderProto13, [constants_1.CODEC.PARAMETERS]: codec_proto13_1.parametersDecoderProto13, [constants_1.CODEC.VALUE]: codec_proto13_1.valueParameterDecoderProto13, [constants_1.CODEC.ENTRYPOINT]: codec_proto13_1.entrypointNameDecoderProto13, [constants_1.CODEC.TX_ROLLUP_ORIGINATION_PARAM]: codec_proto13_1.txRollupOriginationParamDecoderProto13, [constants_1.CODEC.TX_ROLLUP_ID]: codec_proto13_1.txRollupIdDecoderProto13, [constants_1.CODEC.TX_ROLLUP_BATCH_CONTENT]: codec_proto13_1.txRollupBatchContentDecoderProto13, [constants_1.CODEC.BURN_LIMIT]: codec_proto13_1.burnLimitDecoder });
exports.decodersProto13[constants_1.CODEC.OPERATION] = operation_1.operationDecoder(exports.decodersProto13);
exports.decodersProto13[constants_1.CODEC.OP_ACTIVATE_ACCOUNT] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.ActivationSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_DELEGATION] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.DelegationSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_TRANSACTION] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.TransactionSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_ORIGINATION] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.OriginationSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_BALLOT] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.BallotSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_ENDORSEMENT] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.EndorsementSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_SEED_NONCE_REVELATION] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.SeedNonceRevelationSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_PROPOSALS] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.ProposalsSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_REVEAL] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.RevealSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_1.RegisterGlobalConstantSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_TRANSFER_TICKET] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_proto13_1.TransferTicketSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_TX_ROLLUP_ORIGINATION] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_proto13_1.TxRollupOriginationSchema)(val);
exports.decodersProto13[constants_1.CODEC.OP_TX_ROLLUP_SUBMIT_BATCH] = (val) => operation_1.schemaDecoder(exports.decodersProto13)(operation_proto13_1.TxRollupSubmitBatchSchema)(val);
exports.decodersProto13[constants_1.CODEC.MANAGER] = operation_1.schemaDecoder(exports.decodersProto13)(operation_1.ManagerOperationSchema);
//# sourceMappingURL=decoder-proto13.js.map