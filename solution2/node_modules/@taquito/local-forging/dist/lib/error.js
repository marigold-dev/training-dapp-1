"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedOperationError = exports.OperationEncodingError = exports.OperationDecodingError = exports.UnexpectedMichelsonValueError = exports.InvalidHexStringError = exports.DecodeBallotValueError = exports.InvalidBallotValueError = exports.OversizedEntryPointError = exports.InvalidOperationSchemaError = exports.InvalidBlockHashError = void 0;
const constants_1 = require("./constants");
/**
 *  @category Error
 *  @description Error that indicates an invalid block hash being passed or used
 */
class InvalidBlockHashError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidBlockHashError';
    }
}
exports.InvalidBlockHashError = InvalidBlockHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid operation schema being passed or used
 */ class InvalidOperationSchemaError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidOperationSchemaError';
    }
}
exports.InvalidOperationSchemaError = InvalidOperationSchemaError;
/**
 *  @category Error
 *  @description Error that indicates an entrypoint exceeding maximum size
 */
class OversizedEntryPointError extends Error {
    constructor(entrypoint) {
        super(`Oversized entrypoint: ${entrypoint}. The maximum length of entrypoint is ${constants_1.ENTRYPOINT_MAX_LENGTH}`);
        this.entrypoint = entrypoint;
        this.name = 'OversizedEntryPointError';
    }
}
exports.OversizedEntryPointError = OversizedEntryPointError;
/**
 *  @category Error
 *  @description Error that indicates an invalid ballot value
 */
class InvalidBallotValueError extends Error {
    constructor(ballotValue) {
        super(`The ballot value '${ballotValue}' is invalid`);
        this.ballotValue = ballotValue;
        this.name = 'InvalidBallotValueError';
    }
}
exports.InvalidBallotValueError = InvalidBallotValueError;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to decode ballot value
 */
class DecodeBallotValueError extends Error {
    constructor(ballotValue) {
        super(`Failed to decode ballot value ${ballotValue}`);
        this.ballotValue = ballotValue;
        this.name = 'DecodeBallotValueError';
    }
}
exports.DecodeBallotValueError = DecodeBallotValueError;
/**
 *  @category Error
 *  @description Error that indicates an invalid hex string have been passed or used
 */
class InvalidHexStringError extends Error {
    constructor(hexString) {
        super(`The hex string '${hexString}' is invalid`);
        this.hexString = hexString;
        this.name = 'InvalidHexStringError';
    }
}
exports.InvalidHexStringError = InvalidHexStringError;
/**
 *  @category Error
 *  @description Error that indicates unexpected Michelson Value being passed or used
 */
class UnexpectedMichelsonValueError extends Error {
    constructor(value) {
        super(`Failed to encode michelson value '${value}'`);
        this.value = value;
        this.name = 'UnexpectedMichelsonValueError';
    }
}
exports.UnexpectedMichelsonValueError = UnexpectedMichelsonValueError;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to decode an operation
 */
class OperationDecodingError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'OperationDecodingError';
    }
}
exports.OperationDecodingError = OperationDecodingError;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode an operation
 */
class OperationEncodingError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'OperationEncodingError';
    }
}
exports.OperationEncodingError = OperationEncodingError;
/**
 *  @category Error
 *  @description Error that indicates an unsupported operation being passed or used
 */
class UnsupportedOperationError extends Error {
    constructor(op) {
        super(`The operation '${op}' is unsupported`);
        this.op = op;
        this.name = 'UnsupportedOperationError';
    }
}
exports.UnsupportedOperationError = UnsupportedOperationError;
//# sourceMappingURL=error.js.map