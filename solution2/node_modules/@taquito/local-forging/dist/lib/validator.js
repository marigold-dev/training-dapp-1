"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateMissingProperty = exports.validateOperationKind = void 0;
const operation_proto13_1 = require("./proto13-jakarta/schema/operation-proto13");
const operation_1 = require("./schema/operation");
const OperationKindMapping = {
    activate_account: operation_1.ActivationSchema,
    reveal: operation_1.RevealSchema,
    delegation: operation_1.DelegationSchema,
    transaction: operation_1.TransactionSchema,
    origination: operation_1.OriginationSchema,
    ballot: operation_1.BallotSchema,
    endorsement: operation_1.EndorsementSchema,
    seed_nonce_revelation: operation_1.SeedNonceRevelationSchema,
    proposals: operation_1.ProposalsSchema,
    register_global_constant: operation_1.RegisterGlobalConstantSchema,
    transfer_ticket: operation_proto13_1.TransferTicketSchema,
    tx_rollup_origination: operation_proto13_1.TxRollupOriginationSchema,
    tx_rollup_submit_batch: operation_proto13_1.TxRollupSubmitBatchSchema,
};
// Asymmetric difference: only account for things in arr2 that are not present in arr1, not vice versa
const getArrayDifference = (arr1, arr2) => {
    return arr2.filter((x) => !arr1.includes(x));
};
const deleteArrayElementByValue = (array, item) => {
    return array.filter((e) => e !== item);
};
/**
 * @returns A boolean value to indicate whether the operation kind is valid or not
 */
const validateOperationKind = (opKind) => {
    const opKindList = Object.keys(OperationKindMapping);
    return opKindList.includes(opKind);
};
exports.validateOperationKind = validateOperationKind;
/**
 *  returns 0 when the two array of properties are identical or the passed property
 *  does not have any missing parameters from the corresponding schema
 *
 *  @returns array element differences if there are missing required property keys
 */
const validateMissingProperty = (operationContent) => {
    const kind = operationContent.kind;
    const keys = Object.keys(operationContent);
    const cleanKeys = deleteArrayElementByValue(keys, 'kind');
    const schemaKeys = Object.keys(OperationKindMapping[kind]);
    return getArrayDifference(cleanKeys, schemaKeys);
};
exports.validateMissingProperty = validateMissingProperty;
//# sourceMappingURL=validator.js.map