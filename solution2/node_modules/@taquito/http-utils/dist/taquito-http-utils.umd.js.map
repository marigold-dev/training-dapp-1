{"version":3,"file":"taquito-http-utils.umd.js","sources":["../src/status_code.ts","../src/version.ts","../src/taquito-http-utils.ts"],"sourcesContent":["/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n */\nexport enum STATUS_CODE {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  CONTINUE = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SWITCHING_PROTOCOLS = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  PROCESSING = 102,\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  OK = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  CREATED = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  ACCEPTED = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NON_AUTHORITATIVE_INFORMATION = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NO_CONTENT = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  RESET_CONTENT = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PARTIAL_CONTENT = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MULTI_STATUS = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  ALREADY_REPORTED = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  IM_USED = 226,\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MULTIPLE_CHOICES = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MOVED_PERMANENTLY = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  FOUND = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SEE_OTHER = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NOT_MODIFIED = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  USE_PROXY = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SWITCH_PROXY = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TEMPORARY_REDIRECT = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PERMANENT_REDIRECT = 308,\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BAD_REQUEST = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  UNAUTHORIZED = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PAYMENT_REQUIRED = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  FORBIDDEN = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NOT_FOUND = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  METHOD_NOT_ALLOWED = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NOT_ACCEPTABLE = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  REQUEST_TIMEOUT = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  CONFLICT = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  GONE = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LENGTH_REQUIRED = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PRECONDITION_FAILED = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PAYLOAD_TOO_LARGE = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  URI_TOO_LONG = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UNSUPPORTED_MEDIA_TYPE = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RANGE_NOT_SATISFIABLE = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  EXPECTATION_FAILED = 417,\n\n  /**\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n   */\n  I_AM_A_TEAPOT = 418,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MISDIRECTED_REQUEST = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UNPROCESSABLE_ENTITY = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  LOCKED = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FAILED_DEPENDENCY = 424,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UPGRADE_REQUIRED = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PRECONDITION_REQUIRED = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TOO_MANY_REQUESTS = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  INTERNAL_SERVER_ERROR = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NOT_IMPLEMENTED = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BAD_GATEWAY = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  SERVICE_UNAVAILABLE = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GATEWAY_TIMEOUT = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VARIANT_ALSO_NEGOTIATES = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  INSUFFICIENT_STORAGE = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LOOP_DETECTED = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NOT_EXTENDED = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n    \"version\": \"13.0.1\"\n};\n","/**\n * @packageDocumentation\n * @module @taquito/http-utils\n */\n\nimport { STATUS_CODE } from './status_code';\nimport axios from 'axios';\n\nexport * from './status_code';\nexport { VERSION } from './version';\n\nenum ResponseType {\n  TEXT = 'text',\n  JSON = 'json',\n}\n// Z TODO change any type >.>\ntype ObjectType = Record<string, any>\n\nexport interface HttpRequestOptions {\n  url: string;\n  method?: 'GET' | 'POST';\n  timeout?: number;\n  json?: boolean;\n  query?: ObjectType;\n  headers?: { [key: string]: string };\n  mimeType?: string;\n}\n\n/**\n *  @category Error\n *  @description This error will be thrown when the endpoint returns an HTTP error to the client\n */\nexport class HttpResponseError extends Error {\n  public name = 'HttpResponse';\n\n  constructor(\n    public message: string,\n    public status: STATUS_CODE,\n    public statusText: string,\n    public body: string,\n    public url: string\n  ) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a general failure in making the HTTP request\n */\nexport class HttpRequestFailed extends Error {\n  public name = 'HttpRequestFailed';\n\n  constructor(public errorDetail: string) {\n    super(errorDetail);\n  }\n}\n\nexport class HttpBackend {\n  constructor(private timeout: number = 30000) {}\n\n  protected serialize(obj?: ObjectType) {\n    if (!obj) {\n      return '';\n    }\n\n    const str = [];\n    for (const p in obj) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (obj.hasOwnProperty(p) && typeof obj[p] !== 'undefined') {\n        const prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p];\n        // query arguments can have no value so we need some way of handling that\n        // example https://domain.com/query?all\n        if (prop === null) {\n          str.push(encodeURIComponent(p));\n          continue;\n        }\n        // another use case is multiple arguments with the same name\n        // they are passed as array\n        if (Array.isArray(prop)) {\n          prop.forEach((item) => {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\n          });\n          continue;\n        }\n        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\n      }\n    }\n    const serialized = str.join('&');\n    if (serialized) {\n      return `?${serialized}`;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   *\n   * @param options contains options to be passed for the HTTP request (url, method and timeout)\n   */\n  async createRequest<T>(\n    { url, method, timeout = this.timeout, query, headers = {}, json = true }: HttpRequestOptions,\n    data?: object | string\n  ) {\n    let resType: ResponseType;\n    let transformResponse = undefined;\n\n    if (!headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    if (!json) {\n      resType = ResponseType.TEXT;\n      transformResponse = [<Type>(v: Type) => v];\n    } else {\n      resType = ResponseType.JSON;\n    }\n\n    try {\n      const response = await axios.request<T>({\n        url: url + this.serialize(query),\n        method: method ?? 'GET',\n        headers: headers,\n        responseType: resType,\n        transformResponse,\n        timeout: timeout,\n        data: data,\n      });\n\n      return response.data;\n    } catch (err) {\n      if (axios.isAxiosError(err) && err.response) {\n        let errorData;\n\n        if (typeof err.response.data === 'object') {\n          errorData = JSON.stringify(err.response.data);\n        } else {\n          errorData = err.response.data;\n        }\n\n        throw new HttpResponseError(\n          `Http error response: (${err.response.status}) ${errorData}`,\n          err.response.status as STATUS_CODE,\n          err.response.statusText,\n          errorData,\n          url + this.serialize(query)\n        );\n      } else {\n        throw new HttpRequestFailed(err as string);\n      }\n    }\n  }\n}\n"],"names":["STATUS_CODE","axios"],"mappings":"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"}