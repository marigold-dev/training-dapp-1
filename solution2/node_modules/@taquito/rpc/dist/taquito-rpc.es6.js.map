{"version":3,"file":"taquito-rpc.es6.js","sources":["../src/rpc-client-interface.ts","../src/utils/utils.ts","../src/rpc-client-modules/rpc-cache.ts","../src/types.ts","../src/opkind.ts","../src/version.ts","../src/taquito-rpc.ts"],"sourcesContent":["import { BigNumber } from 'bignumber.js';\nimport {\n  BakingRightsQueryArguments,\n  BakingRightsResponse,\n  BalanceResponse,\n  BallotListResponse,\n  BallotsResponse,\n  BigMapGetResponse,\n  BigMapKey,\n  BigMapResponse,\n  BlockHeaderResponse,\n  BlockMetadata,\n  BlockResponse,\n  ConstantsResponse,\n  ContractResponse,\n  CurrentProposalResponse,\n  CurrentQuorumResponse,\n  DelegateResponse,\n  DelegatesResponse,\n  EndorsingRightsQueryArguments,\n  EndorsingRightsResponse,\n  EntrypointsResponse,\n  ForgeOperationsParams,\n  ManagerKeyResponse,\n  OperationHash,\n  PackDataParams,\n  PreapplyParams,\n  PreapplyResponse,\n  ProposalsResponse,\n  ProtocolsResponse,\n  RPCRunCodeParam,\n  RPCRunOperationParam,\n  RPCRunViewParam,\n  RunCodeResult,\n  RunViewResult,\n  SaplingDiffResponse,\n  ScriptResponse,\n  StorageResponse,\n  TxRollupInboxResponse,\n  TxRollupStateResponse,\n  UnparsingMode,\n  VotesListingsResponse,\n  VotingPeriodBlockResult,\n} from './types';\n\nexport interface RPCOptions {\n  block: string;\n}\n\nexport const defaultChain = 'main';\nexport const defaultRPCOptions: RPCOptions = { block: 'head' };\n\nexport interface RpcClientInterface {\n  getBlockHash(options?: RPCOptions): Promise<string>;\n  getLiveBlocks(options?: RPCOptions): Promise<string[]>;\n  getBalance(address: string, options?: RPCOptions): Promise<BalanceResponse>;\n  getStorage(address: string, options?: RPCOptions): Promise<StorageResponse>;\n  getScript(address: string, options?: RPCOptions): Promise<ScriptResponse>;\n  getNormalizedScript(\n    address: string,\n    unparsingMode?: UnparsingMode,\n    options?: RPCOptions\n  ): Promise<ScriptResponse>;\n  getContract(address: string, options?: RPCOptions): Promise<ContractResponse>;\n  getManagerKey(address: string, options?: RPCOptions): Promise<ManagerKeyResponse>;\n  getDelegate(address: string, options?: RPCOptions): Promise<DelegateResponse>;\n  getBigMapKey(address: string, key: BigMapKey, options?: RPCOptions): Promise<BigMapGetResponse>;\n  getBigMapExpr(id: string, expr: string, options?: RPCOptions): Promise<BigMapResponse>;\n  getDelegates(address: string, options?: RPCOptions): Promise<DelegatesResponse>;\n  getConstants(options?: RPCOptions): Promise<ConstantsResponse>;\n  getBlock(options?: RPCOptions): Promise<BlockResponse>;\n  getBlockHeader(options?: RPCOptions): Promise<BlockHeaderResponse>;\n  getBlockMetadata(options?: RPCOptions): Promise<BlockMetadata>;\n  getBakingRights(\n    args: BakingRightsQueryArguments,\n    options?: RPCOptions\n  ): Promise<BakingRightsResponse>;\n  getEndorsingRights(\n    args: EndorsingRightsQueryArguments,\n    options?: RPCOptions\n  ): Promise<EndorsingRightsResponse>;\n  getBallotList(options?: RPCOptions): Promise<BallotListResponse>;\n  getBallots(options?: RPCOptions): Promise<BallotsResponse>;\n  getCurrentProposal(options?: RPCOptions): Promise<CurrentProposalResponse>;\n  getCurrentQuorum(options?: RPCOptions): Promise<CurrentQuorumResponse>;\n  getVotesListings(options?: RPCOptions): Promise<VotesListingsResponse>;\n  getProposals(options?: RPCOptions): Promise<ProposalsResponse>;\n  forgeOperations(data: ForgeOperationsParams, options?: RPCOptions): Promise<string>;\n  injectOperation(signedOpBytes: string): Promise<OperationHash>;\n  preapplyOperations(ops: PreapplyParams, options?: RPCOptions): Promise<PreapplyResponse[]>;\n  getEntrypoints(contract: string, options?: RPCOptions): Promise<EntrypointsResponse>;\n  runOperation(op: RPCRunOperationParam, options?: RPCOptions): Promise<PreapplyResponse>;\n  runCode(code: RPCRunCodeParam, options?: RPCOptions): Promise<RunCodeResult>;\n  runView(viewParams: RPCRunViewParam, options?: RPCOptions): Promise<RunViewResult>;\n  getChainId(): Promise<string>;\n  packData(\n    data: PackDataParams,\n    options?: RPCOptions\n  ): Promise<{ packed: string; gas: BigNumber | 'unaccounted' | undefined }>;\n  getRpcUrl(): string;\n  getCurrentPeriod(options?: RPCOptions): Promise<VotingPeriodBlockResult>;\n  getSuccessorPeriod(options?: RPCOptions): Promise<VotingPeriodBlockResult>;\n  getSaplingDiffById(id: string, options?: RPCOptions): Promise<SaplingDiffResponse>;\n  getSaplingDiffByContract(contract: string, options?: RPCOptions): Promise<SaplingDiffResponse>;\n  getProtocols(options?: RPCOptions): Promise<ProtocolsResponse>;\n  getTxRollupState(txRollupId: string, options?: RPCOptions): Promise<TxRollupStateResponse>;\n  getTxRollupInbox(\n    txRollupId: string,\n    blockLevel: string,\n    options?: RPCOptions\n  ): Promise<TxRollupInboxResponse | null>;\n}\n\nexport enum RPCMethodName {\n  GET_BAKING_RIGHTS = 'getBakingRights',\n  GET_BALLOTS = 'getBallots',\n  GET_BALLOT_LIST = 'getBallotList',\n  GET_BIG_MAP_KEY = 'getBigMapKey',\n  GET_BIG_MAP_EXPR = 'getBigMapExpr',\n  GET_BLOCK_HASH = 'getBlockHash',\n  GET_BLOCK = 'getBlock',\n  GET_BLOCK_HEADER = 'getBlockHeader',\n  GET_BLOCK_METADATA = 'getBlockMetadata',\n  GET_BALANCE = 'getBalance',\n  GET_CHAIN_ID = 'getChainId',\n  GET_CONSTANTS = 'getConstants',\n  GET_CONTRACT = 'getContract',\n  GET_CURRENT_PERIOD = 'getCurrentPeriod',\n  GET_CURRENT_PROPOSAL = 'getCurrentProposal',\n  GET_CURRENT_QUORUM = 'getCurrentQuorum',\n  GET_DELEGATE = 'getDelegate',\n  GET_DELEGATES = 'getDelegates',\n  GET_ENDORSING_RIGHTS = 'getEndorsingRights',\n  GET_ENTRYPOINTS = 'getEntrypoints',\n  GET_LIVE_BLOCKS = 'getLiveBlocks',\n  GET_MANAGER_KEY = 'getManagerKey',\n  GET_NORMALIZED_SCRIPT = 'getNormalizedScript',\n  GET_PROPOSALS = 'getProposals',\n  GET_PROTOCOLS = 'getProtocols',\n  GET_SAPLING_DIFF_BY_CONTRACT = 'getSaplingDiffByContract',\n  GET_SAPLING_DIFF_BY_ID = 'getSaplingDiffById',\n  GET_SCRIPT = 'getScript',\n  GET_STORAGE = 'getStorage',\n  GET_SUCCESSOR_PERIOD = 'getSuccessorPeriod',\n  GET_TX_ROLLUP_INBOX = 'getTxRollupInbox',\n  GET_TX_ROLLUP_STATE = 'getTxRollupState',\n  GET_VOTES_LISTINGS = 'getVotesListings',\n  PACK_DATA = 'packData',\n}\n","import BigNumber from 'bignumber.js';\n\n/**\n * Casts object/array items to BigNumber\n * @param data input object or array\n * @param keys keys for processing or all items if not defined\n *\n */\nexport function castToBigNumber(data: any, keys?: any): object {\n  const returnArray: boolean = Array.isArray(data);\n  if (typeof keys === 'undefined') {\n    keys = Object.keys(data);\n  }\n  const response: any = returnArray ? [] : {};\n\n  keys.forEach((key: any) => {\n    const item = data[key];\n    let res: any;\n    if (typeof item === 'undefined') {\n      return;\n    }\n\n    if (Array.isArray(item)) {\n      res = castToBigNumber(item);\n      response[key] = res;\n      return;\n    }\n\n    res = new BigNumber(item);\n    response[key] = res;\n  });\n\n  return response;\n}\n\n/**\n * Casts object/array BigNumber items to strings for readability\n * @param data input object or array\n * @param keys keys for processing or all items if not defined\n *\n */\nexport function castToString(data: any, keys?: any): object {\n  const returnArray: boolean = Array.isArray(data);\n  if (typeof keys === 'undefined') {\n    keys = Object.keys(data);\n  }\n  const response: any = returnArray ? [] : {};\n\n  keys.forEach((key: any) => {\n    const item = data[key];\n\n    if (typeof item === 'undefined') {\n      return;\n    }\n\n    if (Array.isArray(item)) {\n      response[key] = castToString(item);\n      return;\n    }\n\n    if (!BigNumber.isBigNumber(item)) {\n      response[key] = item;\n      return;\n    }\n\n    response[key] = item.toString();\n  });\n\n  return response;\n}\n","import { RPCMethodName } from './../rpc-client-interface';\nimport BigNumber from 'bignumber.js';\nimport { defaultRPCOptions, RpcClientInterface, RPCOptions } from '../rpc-client-interface';\nimport {\n  BakingRightsQueryArguments,\n  BakingRightsResponse,\n  BalanceResponse,\n  BallotListResponse,\n  BallotsResponse,\n  BigMapGetResponse,\n  BigMapKey,\n  BigMapResponse,\n  BlockHeaderResponse,\n  BlockMetadata,\n  BlockResponse,\n  ConstantsResponse,\n  ContractResponse,\n  CurrentProposalResponse,\n  CurrentQuorumResponse,\n  DelegateResponse,\n  DelegatesResponse,\n  EndorsingRightsQueryArguments,\n  EndorsingRightsResponse,\n  EntrypointsResponse,\n  ForgeOperationsParams,\n  ManagerKeyResponse,\n  OperationHash,\n  PackDataParams,\n  PreapplyParams,\n  PreapplyResponse,\n  ProposalsResponse,\n  ProtocolsResponse,\n  RPCRunCodeParam,\n  RPCRunOperationParam,\n  RPCRunViewParam,\n  RunCodeResult,\n  RunViewResult,\n  SaplingDiffResponse,\n  ScriptResponse,\n  StorageResponse,\n  TxRollupInboxResponse,\n  TxRollupStateResponse,\n  UnparsingMode,\n  VotesListingsResponse,\n  VotingPeriodBlockResult,\n} from '../types';\n\nimport {\n  InvalidAddressError,\n  InvalidContractAddressError,\n  validateContractAddress,\n  validateAddress,\n  ValidationResult,\n} from '@taquito/utils';\n\ninterface CachedDataInterface {\n  [key: string]: {\n    handle: () => void;\n    response: Promise<any>;\n  };\n}\n\ntype RpcMethodParam =\n  | string\n  | UnparsingMode\n  | BigMapKey\n  | BakingRightsQueryArguments\n  | PackDataParams\n  | EndorsingRightsQueryArguments;\n\nconst defaultTtl = 1000;\n\n/***\n * @description RpcClientCache acts as a decorator over the RpcClient instance by caching responses for the period defined by the ttl.\n */\nexport class RpcClientCache implements RpcClientInterface {\n  private _cache: CachedDataInterface = {};\n  /**\n   *\n   * @param rpcClient rpcClient responsible of the interaction with Tezos network through an rpc node\n   * @param ttl number representing the time to live (default 1000 milliseconds)\n   *\n   * @example new RpcClientCache(new RpcClient('https://mainnet.api.tez.ie/'))\n   */\n  constructor(private rpcClient: RpcClientInterface, private ttl = defaultTtl) {}\n\n  getAllCachedData() {\n    return this._cache;\n  }\n  /**\n   * @description Remove all the data in the cache.\n   *\n   */\n  deleteAllCachedData() {\n    for (const key in this._cache) {\n      delete this._cache[key];\n    }\n  }\n\n  private formatCacheKey(\n    rpcUrl: string,\n    rpcMethodName: RPCMethodName,\n    rpcMethodParams: RpcMethodParam[],\n    rpcMethodData?: object\n  ) {\n    let paramsToString = '';\n    rpcMethodParams.forEach((param) => {\n      paramsToString =\n        typeof param === 'object'\n          ? paramsToString + JSON.stringify(param) + '/'\n          : paramsToString + param + '/';\n    });\n    return rpcMethodData\n      ? `${rpcUrl}/${rpcMethodName}/${paramsToString}/${JSON.stringify(rpcMethodData)}`\n      : `${rpcUrl}/${rpcMethodName}/${paramsToString}`;\n  }\n\n  private has(key: string) {\n    return key in this._cache;\n  }\n\n  private get(key: string) {\n    return this._cache[key].response;\n  }\n\n  private put<T>(key: string, response: Promise<T>) {\n    const handle = setTimeout(() => {\n      return this.remove(key);\n    }, this.ttl);\n\n    Object.assign(this._cache, { [key]: { handle, response } });\n  }\n\n  private remove(key: string) {\n    if (key in this._cache) {\n      delete this._cache[key];\n    }\n  }\n\n  private validateAddress(address: string) {\n    if (validateAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(address);\n    }\n  }\n\n  private validateContract(address: string) {\n    if (validateContractAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(address);\n    }\n  }\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Get the block's hash, its unique identifier.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-hash\n   */\n  async getBlockHash({ block }: RPCOptions = defaultRPCOptions): Promise<string> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK_HASH, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBlockHash({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-live-blocks\n   */\n  async getLiveBlocks({ block }: RPCOptions = defaultRPCOptions): Promise<string[]> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_LIVE_BLOCKS, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getLiveBlocks({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address address from which we want to retrieve the balance\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the balance of a contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-balance\n   */\n  async getBalance(\n    address: string,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<BalanceResponse> {\n    this.validateAddress(address);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BALANCE, [\n      block,\n      address,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBalance(address, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the storage\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the data of the contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-storage\n   */\n  async getStorage(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<StorageResponse> {\n    this.validateContract(address);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_STORAGE, [\n      block,\n      address,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getStorage(address, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the script\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the code and data of the contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n   */\n  async getScript(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ScriptResponse> {\n    this.validateContract(address);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_SCRIPT, [\n      block,\n      address,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getScript(address, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the script\n   * @param unparsingMode default is { unparsing_mode: \"Readable\" }\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the script of the contract and normalize it using the requested unparsing mode.\n   *\n   */\n  async getNormalizedScript(\n    address: string,\n    unparsingMode: UnparsingMode = { unparsing_mode: 'Readable' },\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ScriptResponse> {\n    this.validateContract(address);\n    const key = this.formatCacheKey(\n      this.rpcClient.getRpcUrl(),\n      RPCMethodName.GET_NORMALIZED_SCRIPT,\n      [block, address, unparsingMode]\n    );\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getNormalizedScript(address, unparsingMode, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the complete status of a contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id\n   */\n  async getContract(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ContractResponse> {\n    this.validateAddress(address);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CONTRACT, [\n      block,\n      address,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getContract(address, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the manager\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the manager key of a contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-manager-key\n   */\n  async getManagerKey(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ManagerKeyResponse> {\n    this.validateAddress(address);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_MANAGER_KEY, [\n      block,\n      address,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getManagerKey(address, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the delegate (baker)\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the delegate of a contract, if any.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-delegate\n   */\n  async getDelegate(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<DelegateResponse> {\n    this.validateAddress(address);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_DELEGATE, [\n      block,\n      address,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getDelegate(address, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the big map key\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a key in the big map storage of the contract.\n   *\n   * @deprecated Deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  async getBigMapKey(\n    address: string,\n    key: BigMapKey,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<BigMapGetResponse> {\n    this.validateAddress(address);\n    const keyUrl = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BIG_MAP_KEY, [\n      block,\n      address,\n      key,\n    ]);\n    if (this.has(keyUrl)) {\n      return this.get(keyUrl);\n    } else {\n      const response = this.rpcClient.getBigMapKey(address, key, { block });\n      this.put(keyUrl, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param id Big Map ID\n   * @param expr Expression hash to query (A b58check encoded Blake2b hash of the expression (The expression can be packed using the pack_data method))\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a key in a big map.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n   */\n  async getBigMapExpr(\n    id: string,\n    expr: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<BigMapResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BIG_MAP_EXPR, [\n      block,\n      id,\n      expr,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBigMapExpr(id, expr, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param address delegate address which we want to retrieve\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Fetches information about a delegate from RPC.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-delegates-pkh\n   */\n  async getDelegates(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<DelegatesResponse> {\n    this.validateAddress(address);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_DELEGATES, [\n      block,\n      address,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getDelegates(address, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description All constants\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-constants\n   */\n  async getConstants({ block }: RPCOptions = defaultRPCOptions): Promise<ConstantsResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CONSTANTS, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getConstants({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls. See examples for various available sytaxes.\n   *\n   * @description All the information about a block\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id\n   * @example getBlock() will default to /main/chains/block/head.\n   * @example getBlock({ block: head~2 }) will return an offset of 2 blocks.\n   * @example getBlock({ block: BL8fTiWcSxWCjiMVnDkbh6EuhqVPZzgWheJ2dqwrxYRm9AephXh~2 }) will return an offset of 2 blocks from given block hash..\n   */\n  async getBlock({ block }: RPCOptions = defaultRPCOptions): Promise<BlockResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK, [block]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBlock({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description The whole block header\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-header\n   */\n  async getBlockHeader({ block }: RPCOptions = defaultRPCOptions): Promise<BlockHeaderResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK_HEADER, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBlockHeader({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description All the metadata associated to the block\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-metadata\n   */\n  async getBlockMetadata({ block }: RPCOptions = defaultRPCOptions): Promise<BlockMetadata> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK_METADATA, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBlockMetadata({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param args contains optional query arguments\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Retrieves the list of delegates allowed to bake a block.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-baking-rights\n   */\n  async getBakingRights(\n    args: BakingRightsQueryArguments = {},\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<BakingRightsResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BAKING_RIGHTS, [\n      block,\n      args,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBakingRights(args, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param args contains optional query arguments\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Retrieves the list of delegates allowed to bake a block.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-endorsing-rights\n   */\n  async getEndorsingRights(\n    args: EndorsingRightsQueryArguments = {},\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<EndorsingRightsResponse> {\n    const key = this.formatCacheKey(\n      this.rpcClient.getRpcUrl(),\n      RPCMethodName.GET_ENDORSING_RIGHTS,\n      [block, args]\n    );\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getEndorsingRights(args, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Ballots casted so far during a voting period\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballot-list\n   */\n  async getBallotList({ block }: RPCOptions = defaultRPCOptions): Promise<BallotListResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BALLOT_LIST, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBallotList({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Sum of ballots casted so far during a voting period.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballots\n   */\n  async getBallots({ block }: RPCOptions = defaultRPCOptions): Promise<BallotsResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BALLOTS, [block]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getBallots({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Current proposal under evaluation.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-proposal\n   */\n  async getCurrentProposal({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<CurrentProposalResponse> {\n    const key = this.formatCacheKey(\n      this.rpcClient.getRpcUrl(),\n      RPCMethodName.GET_CURRENT_PROPOSAL,\n      [block]\n    );\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getCurrentProposal({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Current expected quorum.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-quorum\n   */\n  async getCurrentQuorum({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<CurrentQuorumResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CURRENT_QUORUM, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getCurrentQuorum({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description List of delegates with their voting weight, in number of rolls.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-listings\n   */\n  async getVotesListings({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<VotesListingsResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_VOTES_LISTINGS, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getVotesListings({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description List of proposals with number of supporters.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-proposals\n   */\n  async getProposals({ block }: RPCOptions = defaultRPCOptions): Promise<ProposalsResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_PROPOSALS, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getProposals({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param data operation contents to forge\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Forge an operation returning the unsigned bytes\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-forge-operations\n   */\n  async forgeOperations(\n    data: ForgeOperationsParams,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<string> {\n    return this.rpcClient.forgeOperations(data, { block });\n  }\n\n  /**\n   *\n   * @param signedOpBytes signed bytes to inject\n   *\n   * @description Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-injection-operation\n   */\n  async injectOperation(signedOpBytes: string): Promise<OperationHash> {\n    return this.rpcClient.injectOperation(signedOpBytes);\n  }\n\n  /**\n   *\n   * @param ops Operations to apply\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Simulate the validation of an operation\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-preapply-operations\n   */\n  async preapplyOperations(\n    ops: PreapplyParams,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<PreapplyResponse[]> {\n    return this.rpcClient.preapplyOperations(ops, { block });\n  }\n\n  /**\n   *\n   * @param contract address of the contract we want to get the entrypoints of\n   *\n   * @description Return the list of entrypoints of the contract\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-entrypoints\n   *\n   * @version 005_PsBABY5H\n   */\n  async getEntrypoints(\n    contract: string,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<EntrypointsResponse> {\n    this.validateContract(contract);\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_ENTRYPOINTS, [\n      block,\n      contract,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getEntrypoints(contract, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   * @param op Operation to run\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Run an operation without signature checks\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-operation\n   */\n  async runOperation(\n    op: RPCRunOperationParam,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<PreapplyResponse> {\n    return this.rpcClient.runOperation(op, { block });\n  }\n\n  /**\n   * @param code Code to run\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Run a piece of code in the current context\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-code\n   */\n  async runCode(\n    code: RPCRunCodeParam,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<RunCodeResult> {\n    return this.rpcClient.runCode(code, { block });\n  }\n\n  /**\n   * @param viewParams Parameters of the view to run\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Simulate a call to a view following the TZIP-4 standard. See https://gitlab.com/tzip/tzip/-/blob/master/proposals/tzip-4/tzip-4.md#view-entrypoints.\n   *\n   */\n  async runView(\n    { unparsing_mode = 'Readable', ...rest }: RPCRunViewParam,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<RunViewResult> {\n    return this.rpcClient.runView(\n      {\n        unparsing_mode,\n        ...rest,\n      },\n      { block }\n    );\n  }\n\n  async getChainId() {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CHAIN_ID, []);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getChainId();\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param data Data to pack\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Computes the serialized version of a data expression using the same algorithm as script instruction PACK\n   *\n   * @example packData({ data: { string: \"test\" }, type: { prim: \"string\" } })\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-pack-data\n   */\n  async packData(\n    data: PackDataParams,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<{ packed: string; gas: BigNumber | 'unaccounted' | undefined }> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.PACK_DATA, [\n      block,\n      data,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.packData(data, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @description Return rpc root url\n   */\n  getRpcUrl() {\n    return this.rpcClient.getRpcUrl();\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Voting period of current block.\n   *\n   * @example getCurrentPeriod() will default to current voting period for /main/chains/block/head.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-period\n   */\n  async getCurrentPeriod({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<VotingPeriodBlockResult> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CURRENT_PERIOD, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getCurrentPeriod({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Voting period of next block.\n   *\n   * @example getSuccessorPeriod() will default to successor voting period for /main/chains/block/head.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-successor-period\n   */\n  async getSuccessorPeriod({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<VotingPeriodBlockResult> {\n    const key = this.formatCacheKey(\n      this.rpcClient.getRpcUrl(),\n      RPCMethodName.GET_SUCCESSOR_PERIOD,\n      [block]\n    );\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getSuccessorPeriod({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param id Sapling state ID\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a sapling state ID.\n   *\n   * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-sapling-sapling-state-id-get-diff\n   */\n  async getSaplingDiffById(\n    id: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<SaplingDiffResponse> {\n    const key = this.formatCacheKey(\n      this.rpcClient.getRpcUrl(),\n      RPCMethodName.GET_SAPLING_DIFF_BY_ID,\n      [block, id]\n    );\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getSaplingDiffById(id, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  /**\n   *\n   * @param contract address of the contract we want to get the sapling diff\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a sapling state.\n   *\n   * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-contracts-contract-id-single-sapling-get-diff\n   */\n  async getSaplingDiffByContract(\n    contract: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<SaplingDiffResponse> {\n    const key = this.formatCacheKey(\n      this.rpcClient.getRpcUrl(),\n      RPCMethodName.GET_SAPLING_DIFF_BY_CONTRACT,\n      [block, contract]\n    );\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getSaplingDiffByContract(contract, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  async getProtocols({ block }: { block: string } = defaultRPCOptions): Promise<ProtocolsResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_PROTOCOLS, [\n      block,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getProtocols({ block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  async getTxRollupState(\n    txRollupId: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<TxRollupStateResponse> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_TX_ROLLUP_STATE, [\n      block,\n      txRollupId,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getTxRollupState(txRollupId, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n\n  async getTxRollupInbox(\n    txRollupId: string,\n    blockLevel: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<TxRollupInboxResponse | null> {\n    const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_TX_ROLLUP_INBOX, [\n      block,\n      txRollupId,\n      blockLevel,\n    ]);\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      const response = this.rpcClient.getTxRollupInbox(txRollupId, blockLevel, { block });\n      this.put(key, response);\n      return response;\n    }\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { OpKind } from './opkind';\n\nexport type BalanceResponse = BigNumber;\nexport type StorageResponse = ScriptedContracts['storage'];\nexport type ScriptResponse = ScriptedContracts;\nexport type BigMapGetResponse = MichelsonV1Expression;\nexport type ManagerResponse = { manager: string };\nexport type ManagerKeyResponse = string | { key: string };\nexport type DelegateResponse = string | null;\n\nexport type OperationHash = string;\n\ninterface INodeExtender {\n  length: string;\n  segment: string;\n  proof: string;\n}\n\ntype OtherEltsInner =\n  | {\n      value: any;\n    }\n  | {\n      inode_extender: INodeExtender;\n    };\n\ntype OtherElts =\n  | {\n      node: [string, { value: string } | { node: string }][];\n    }\n  | {\n      other_elts: OtherEltsInner;\n    };\n\ntype State =\n  | {\n      inode: Inode;\n    }\n  | {\n      other_elts: OtherElts;\n    };\n\ninterface Inode {\n  length: string;\n  proofs: [string | null, string | null];\n}\n\ntype TxRollupProofContextHash =\n  | {\n      value: string;\n    }\n  | {\n      node: string;\n    };\n\nexport interface TxRollupProof {\n  version: number;\n  before: TxRollupProofContextHash;\n  after: TxRollupProofContextHash;\n  state: State[];\n}\n\nexport interface TxRollupCommitment {\n  level: number;\n  messages: string[];\n  predecessor?: string;\n  inbox_merkle_root: string;\n}\n\nexport interface TxRollupDeposit {\n  sender: string;\n  destination: string;\n  ticket_hash: string;\n  amount: string;\n}\n\nexport interface TxRollupMessage {\n  batch?: string;\n  deposit?: TxRollupDeposit;\n}\n\nexport interface TxRollupPreviousMessageResult {\n  context_hash: string;\n  withdraw_list_hash: string;\n}\n\nexport interface TxRollupTicketsInfo {\n  contents: MichelsonV1Expression;\n  ty: MichelsonV1Expression;\n  ticketer: string;\n  amount: string;\n  claimer: string;\n}\nexport interface DelegatesResponse {\n  balance?: BigNumber;\n  full_balance?: BigNumber;\n  current_frozen_deposits?: BigNumber;\n  frozen_deposits?: BigNumber;\n  frozen_balance?: BigNumber;\n  frozen_balance_by_cycle?: Frozenbalancebycycle[];\n  frozen_deposits_limit?: BigNumber;\n  staking_balance: BigNumber;\n  delegated_contracts: string[];\n  delegated_balance: BigNumber;\n  deactivated: boolean;\n  grace_period: number;\n  voting_power?: BigNumber;\n}\n\ninterface Frozenbalancebycycle {\n  cycle: number;\n  deposit?: BigNumber;\n  deposits?: BigNumber; // Since Granada, \"deposit\" is replaced by \"deposits\"\n  fees: BigNumber;\n  rewards: BigNumber;\n}\n\nexport type BigMapKey = {\n  key: { [key: string]: string | object[] };\n  type: { prim: string; args?: object[] };\n};\n\nexport type LiquidityBakingToggleVotes = 'on' | 'off' | 'pass';\n\nexport interface BlockFullHeader {\n  level: number;\n  proto: number;\n  predecessor: string;\n  timestamp: TimeStampMixed;\n  validation_pass: number;\n  operations_hash: string;\n  fitness: string[];\n  context: string;\n  payload_hash?: string;\n  payload_round?: number;\n  priority: number;\n  proof_of_work_nonce: string;\n  seed_nonce_hash?: string;\n  liquidity_baking_escape_vote?: boolean | LiquidityBakingToggleVotes;\n  liquidity_baking_toggle_vote?: LiquidityBakingToggleVotes;\n  signature: string;\n}\n\nexport type InlinedEndorsementKindEnum = OpKind.ENDORSEMENT;\n\nexport interface InlinedEndorsementContents {\n  kind: InlinedEndorsementKindEnum;\n  slot?: number;\n  round?: number;\n  block_payload_hash?: string;\n  level: number;\n}\n\nexport interface InlinedPreEndorsementContents {\n  kind: OpKind.PREENDORSEMENT;\n  slot: number;\n  level: number;\n  round: number;\n  block_payload_hash: string;\n}\n\nexport interface InlinedEndorsement {\n  branch: string;\n  operations: InlinedEndorsementContents;\n  signature?: string;\n}\n\nexport interface InlinedPreEndorsement {\n  branch: string;\n  operations: InlinedPreEndorsementContents;\n  signature?: string;\n}\n\nexport type OperationContentsBallotEnum = 'nay' | 'yay' | 'pass';\n\nexport interface OperationContentsEndorsement {\n  kind: OpKind.ENDORSEMENT;\n  level: number;\n  slot?: number;\n  round?: number;\n  block_payload_hash?: string;\n}\n\nexport interface OperationContentsPreEndorsement {\n  kind: OpKind.PREENDORSEMENT;\n  slot: number;\n  level: number;\n  round: number;\n  block_payload_hash: string;\n}\n\nexport interface OperationContentsDoublePreEndorsement {\n  kind: OpKind.DOUBLE_PREENDORSEMENT_EVIDENCE;\n  op1: InlinedPreEndorsement;\n  op2: InlinedPreEndorsement;\n}\n\nexport interface OperationContentsSetDepositsLimit {\n  kind: OpKind.SET_DEPOSITS_LIMIT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  limit?: string;\n}\n\nexport interface OperationContentsEndorsementWithSlot {\n  kind: OpKind.ENDORSEMENT_WITH_SLOT;\n  endorsement: InlinedEndorsement;\n  slot: number;\n}\n\nexport interface OperationContentsFailingNoop {\n  kind: OpKind.FAILING_NOOP;\n  arbitrary: string;\n}\n\nexport interface OperationContentsRevelation {\n  kind: OpKind.SEED_NONCE_REVELATION;\n  level: number;\n  nonce: string;\n}\n\nexport interface OperationContentsDoubleEndorsement {\n  kind: OpKind.DOUBLE_ENDORSEMENT_EVIDENCE;\n  op1: InlinedEndorsement;\n  op2: InlinedEndorsement;\n  slot?: number;\n}\n\nexport interface OperationContentsDoubleBaking {\n  kind: OpKind.DOUBLE_BAKING_EVIDENCE;\n  bh1: BlockFullHeader;\n  bh2: BlockFullHeader;\n}\n\nexport interface OperationContentsActivateAccount {\n  kind: OpKind.ACTIVATION;\n  pkh: string;\n  secret: string;\n}\n\nexport interface OperationContentsProposals {\n  kind: OpKind.PROPOSALS;\n  source: string;\n  period: number;\n  proposals: string[];\n}\n\nexport interface OperationContentsBallot {\n  kind: OpKind.BALLOT;\n  source: string;\n  period: number;\n  proposal: string;\n  ballot: OperationContentsBallotEnum;\n}\n\nexport interface OperationContentsReveal {\n  kind: OpKind.REVEAL;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  public_key: string;\n}\n\nexport interface OperationContentsTransaction {\n  kind: OpKind.TRANSACTION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  amount: string;\n  destination: string;\n  parameters?: TransactionOperationParameter;\n}\n\nexport interface OperationContentsOrigination {\n  kind: OpKind.ORIGINATION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  balance: string;\n  delegate?: string;\n  script?: ScriptedContracts;\n}\n\nexport interface OperationContentsDelegation {\n  kind: OpKind.DELEGATION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  delegate?: string;\n}\n\nexport interface OperationContentsRegisterGlobalConstant {\n  kind: OpKind.REGISTER_GLOBAL_CONSTANT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  value: MichelsonV1Expression;\n}\n\nexport interface OperationContentsTxRollupOrigination {\n  kind: OpKind.TX_ROLLUP_ORIGINATION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  tx_rollup_origination: any;\n}\n\nexport interface OperationContentsTxRollupSubmitBatch {\n  kind: OpKind.TX_ROLLUP_SUBMIT_BATCH;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  content: string;\n  burn_limit?: string;\n}\n\nexport interface OperationContentsTxRollupCommit {\n  kind: OpKind.TX_ROLLUP_COMMIT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  commitment: TxRollupCommitment;\n}\n\nexport interface OperationContentsTxRollupReturnBond {\n  kind: OpKind.TX_ROLLUP_RETURN_BOND;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n}\n\nexport interface OperationContentsTxRollupFinalizeCommitment {\n  kind: OpKind.TX_ROLLUP_FINALIZE_COMMITMENT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n}\n\nexport interface OperationContentsTxRollupRemoveCommitment {\n  kind: OpKind.TX_ROLLUP_REMOVE_COMMITMENT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n}\n\nexport interface OperationContentsTxRollupRejection {\n  kind: OpKind.TX_ROLLUP_REJECTION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  level: number;\n  message: TxRollupMessage;\n  message_position: string;\n  message_path: string[];\n  message_result_hash: string;\n  message_result_path: string[];\n  previous_message_result: TxRollupPreviousMessageResult;\n  previous_message_result_path: string[];\n  proof: TxRollupProof;\n}\n\nexport interface OperationContentsTxRollupDispatchTickets {\n  kind: OpKind.TX_ROLLUP_DISPATCH_TICKETS;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  tx_rollup: string;\n  level: number;\n  context_hash: string;\n  message_index: number;\n  message_result_path: string[];\n  tickets_info: TxRollupTicketsInfo[];\n}\n\nexport interface OperationContentsTransferTicket {\n  kind: OpKind.TRANSFER_TICKET;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  ticket_contents: MichelsonV1Expression;\n  ticket_ty: MichelsonV1Expression;\n  ticket_ticketer: string;\n  ticket_amount: string;\n  destination: string;\n  entrypoint: string;\n}\n\nexport type OperationContents =\n  | OperationContentsEndorsement\n  | OperationContentsPreEndorsement\n  | OperationContentsDoublePreEndorsement\n  | OperationContentsRevelation\n  | OperationContentsDoubleEndorsement\n  | OperationContentsDoubleBaking\n  | OperationContentsActivateAccount\n  | OperationContentsProposals\n  | OperationContentsBallot\n  | OperationContentsReveal\n  | OperationContentsTransaction\n  | OperationContentsOrigination\n  | OperationContentsDelegation\n  | OperationContentsEndorsementWithSlot\n  | OperationContentsFailingNoop\n  | OperationContentsRegisterGlobalConstant\n  | OperationContentsSetDepositsLimit\n  | OperationContentsTxRollupOrigination\n  | OperationContentsTxRollupSubmitBatch\n  | OperationContentsTxRollupCommit\n  | OperationContentsTxRollupReturnBond\n  | OperationContentsTxRollupFinalizeCommitment\n  | OperationContentsTxRollupRemoveCommitment\n  | OperationContentsTxRollupRejection\n  | OperationContentsTransferTicket;\n\nexport interface OperationContentsAndResultMetadataExtended {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  delegate: string;\n  slots?: number[];\n  endorsement_power?: number;\n}\n\nexport interface OperationContentsAndResultMetadataPreEndorsement {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  delegate: string;\n  preendorsement_power: number;\n}\n\nexport interface OperationContentsAndResultMetadataReveal {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultReveal;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTransaction {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTransaction;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataDelegation {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultDelegation;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataRegisterGlobalConstant {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultRegisterGlobalConstant;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataSetDepositsLimit {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultSetDepositsLimit;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadata {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupOrigination {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupOrigination;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupSubmitBatch {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupSubmitBatch;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupCommit {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupCommit;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupReturnBond {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupReturnBond;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupFinalizeCommitment {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupFinalizeCommitment;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupRemoveCommitment {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupRemoveCommitment;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupRejection {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupRejection;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTransferTicket {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTransferTicket;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultMetadataTxRollupDispatchTickets {\n  balance_updates?: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultTxRollupDispatchTickets;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport interface OperationContentsAndResultEndorsement {\n  kind: OpKind.ENDORSEMENT;\n  block_payload_hash?: string;\n  level: number;\n  round?: number;\n  slot?: number;\n  metadata: OperationContentsAndResultMetadataExtended;\n}\n\nexport interface OperationContentsAndResultPreEndorsement {\n  kind: OpKind.PREENDORSEMENT;\n  slot: number;\n  level: number;\n  round: number;\n  block_payload_hash: string;\n  metadata: OperationContentsAndResultMetadataPreEndorsement;\n}\n\nexport interface OperationContentsAndResultDoublePreEndorsement {\n  kind: OpKind.DOUBLE_PREENDORSEMENT_EVIDENCE;\n  op1: InlinedPreEndorsement;\n  op2: InlinedPreEndorsement;\n  metadata: OperationContentsAndResultMetadata;\n}\nexport interface OperationContentsAndResultEndorsementWithSlot {\n  kind: OpKind.ENDORSEMENT_WITH_SLOT;\n  endorsement: InlinedEndorsement;\n  slot: number;\n  metadata: OperationContentsAndResultMetadataExtended;\n}\n\nexport interface OperationContentsAndResultRevelation {\n  kind: OpKind.SEED_NONCE_REVELATION;\n  level: number;\n  nonce: string;\n  metadata: OperationContentsAndResultMetadata;\n}\n\nexport interface OperationContentsAndResultDoubleEndorsement {\n  kind: OpKind.DOUBLE_ENDORSEMENT_EVIDENCE;\n  op1: InlinedEndorsement;\n  op2: InlinedEndorsement;\n  slot?: number;\n  metadata: OperationContentsAndResultMetadata;\n}\n\nexport interface OperationContentsAndResultDoubleBaking {\n  kind: OpKind.DOUBLE_BAKING_EVIDENCE;\n  bh1: BlockFullHeader;\n  bh2: BlockFullHeader;\n  metadata: OperationContentsAndResultMetadata;\n}\n\nexport interface OperationContentsAndResultActivateAccount {\n  kind: OpKind.ACTIVATION;\n  pkh: string;\n  secret: string;\n  metadata: OperationContentsAndResultMetadata;\n}\n\nexport interface OperationContentsAndResultProposals {\n  kind: OpKind.PROPOSALS;\n  source: string;\n  period: number;\n  proposals: string[];\n}\n\nexport interface OperationContentsAndResultBallot {\n  kind: OpKind.BALLOT;\n  source: string;\n  period: number;\n  proposal: string;\n  ballot: OperationContentsBallotEnum;\n}\n\nexport interface OperationContentsAndResultReveal {\n  kind: OpKind.REVEAL;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  public_key: string;\n  metadata: OperationContentsAndResultMetadataReveal;\n}\n\nexport interface OperationContentsAndResultTransaction {\n  kind: OpKind.TRANSACTION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  amount: string;\n  destination: string;\n  parameters?: TransactionOperationParameter;\n  metadata: OperationContentsAndResultMetadataTransaction;\n}\n\nexport interface OperationContentsAndResultDelegation {\n  kind: OpKind.DELEGATION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  delegate?: string;\n  metadata: OperationContentsAndResultMetadataDelegation;\n}\n\nexport interface OperationContentsAndResultRegisterGlobalConstant {\n  kind: OpKind.REGISTER_GLOBAL_CONSTANT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  value: MichelsonV1Expression;\n  metadata: OperationContentsAndResultMetadataRegisterGlobalConstant;\n}\n\nexport interface OperationContentsAndResultSetDepositsLimit {\n  kind: OpKind.SET_DEPOSITS_LIMIT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  limit?: string;\n  metadata: OperationContentsAndResultMetadataSetDepositsLimit;\n}\n\nexport interface OperationContentsAndResultTxRollupOrigination {\n  kind: OpKind.TX_ROLLUP_ORIGINATION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  tx_rollup_origination: any;\n  metadata: OperationContentsAndResultMetadataTxRollupOrigination;\n}\n\nexport interface OperationContentsAndResultTxRollupSubmitBatch {\n  kind: OpKind.TX_ROLLUP_SUBMIT_BATCH;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  content: string;\n  burn_limit?: string;\n  metadata: OperationContentsAndResultMetadataTxRollupSubmitBatch;\n}\n\nexport interface OperationContentsAndResultTxRollupCommit {\n  kind: OpKind.TX_ROLLUP_COMMIT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  commitment: TxRollupCommitment;\n  metadata: OperationContentsAndResultMetadataTxRollupCommit;\n}\n\nexport interface OperationContentsAndResultTxRollupReturnBond {\n  kind: OpKind.TX_ROLLUP_RETURN_BOND;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  metadata: OperationContentsAndResultMetadataTxRollupReturnBond;\n}\n\nexport interface OperationContentsAndResultTxRollupFinalizeCommitment {\n  kind: OpKind.TX_ROLLUP_FINALIZE_COMMITMENT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  metadata: OperationContentsAndResultMetadataTxRollupFinalizeCommitment;\n}\n\nexport interface OperationContentsAndResultTxRollupRemoveCommitment {\n  kind: OpKind.TX_ROLLUP_REMOVE_COMMITMENT;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  metadata: OperationContentsAndResultMetadataTxRollupRemoveCommitment;\n}\n\nexport interface OperationContentsAndResultTxRollupRejection {\n  kind: OpKind.TX_ROLLUP_REJECTION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  rollup: string;\n  level: number;\n  message: TxRollupMessage;\n  message_position: string;\n  message_path: string[];\n  message_result_hash: string;\n  message_result_path: string[];\n  previous_message_result: TxRollupPreviousMessageResult;\n  previous_message_result_path: string[];\n  proof: TxRollupProof;\n  metadata: OperationContentsAndResultMetadataTxRollupRejection;\n}\n\nexport interface OperationContentsAndResultTransferTicket {\n  kind: OpKind.TRANSFER_TICKET;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  ticket_contents: MichelsonV1Expression;\n  ticket_ty: MichelsonV1Expression;\n  ticket_ticketer: string;\n  ticket_amount: string;\n  destination: string;\n  entrypoint: string;\n  metadata: OperationContentsAndResultMetadataTransferTicket;\n}\n\nexport interface OperationContentsAndResultTxRollupDispatchTickets {\n  kind: OpKind.TX_ROLLUP_DISPATCH_TICKETS;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  tx_rollup: string;\n  level: number;\n  context_hash: string;\n  message_index: number;\n  message_result_path: string[];\n  tickets_info: TxRollupTicketsInfo[];\n  metadata: OperationContentsAndResultMetadataTxRollupDispatchTickets;\n}\n\nexport type OperationContentsAndResult =\n  | OperationContentsAndResultEndorsement\n  | OperationContentsAndResultPreEndorsement\n  | OperationContentsAndResultDoublePreEndorsement\n  | OperationContentsAndResultRevelation\n  | OperationContentsAndResultDoubleEndorsement\n  | OperationContentsAndResultDoubleBaking\n  | OperationContentsAndResultActivateAccount\n  | OperationContentsAndResultProposals\n  | OperationContentsAndResultBallot\n  | OperationContentsAndResultReveal\n  | OperationContentsAndResultTransaction\n  | OperationContentsAndResultOrigination\n  | OperationContentsAndResultDelegation\n  | OperationContentsAndResultEndorsementWithSlot\n  | OperationContentsAndResultRegisterGlobalConstant\n  | OperationContentsAndResultSetDepositsLimit\n  | OperationContentsAndResultTxRollupOrigination\n  | OperationContentsAndResultTxRollupSubmitBatch\n  | OperationContentsAndResultTxRollupCommit\n  | OperationContentsAndResultTxRollupDispatchTickets\n  | OperationContentsAndResultTxRollupReturnBond\n  | OperationContentsAndResultTxRollupFinalizeCommitment\n  | OperationContentsAndResultTxRollupRemoveCommitment\n  | OperationContentsAndResultTxRollupRejection\n  | OperationContentsAndResultTransferTicket;\n\nexport enum OPERATION_METADATA {\n  TOO_LARGE = 'too large',\n}\n\nexport interface OperationEntry {\n  protocol: string;\n  chain_id: string;\n  hash: string;\n  branch: string;\n  contents: (OperationContents | OperationContentsAndResult)[];\n  signature?: string;\n  metadata?: OPERATION_METADATA;\n}\n\nexport interface BlockResponse {\n  protocol: string;\n  chain_id: string;\n  hash: string;\n  header: BlockFullHeader;\n  metadata: BlockMetadata;\n  operations: OperationEntry[][];\n}\n\nexport type BakingRightsArgumentsDelegate = string | string[];\nexport type BakingRightsArgumentsCycle = number | number[];\nexport type BakingRightsArgumentsLevel = number | number[];\n\nexport type BakingRightsQueryArguments =\n  | BakingRightsQueryArgumentsProto12\n  | BakingRightsQueryArgumentsBase;\n\nexport interface BakingRightsQueryArgumentsProto12\n  extends Omit<BakingRightsQueryArgumentsBase, 'max_priority'> {\n  max_round?: string;\n}\nexport interface BakingRightsQueryArgumentsBase {\n  level?: BakingRightsArgumentsLevel;\n  cycle?: BakingRightsArgumentsCycle;\n  delegate?: BakingRightsArgumentsDelegate;\n  max_priority?: number;\n  all?: null;\n}\n\nexport interface BakingRightsResponseItem {\n  level: number;\n  delegate: string;\n  priority?: number;\n  round?: number;\n  estimated_time?: Date;\n}\n\nexport type BakingRightsResponse = BakingRightsResponseItem[];\n\nexport type EndorsingRightsArgumentsDelegate = string | string[];\nexport type EndorsingRightsArgumentsCycle = number | number[];\nexport type EndorsingRightsArgumentsLevel = number | number[];\n\nexport interface EndorsingRightsQueryArguments {\n  level?: EndorsingRightsArgumentsLevel;\n  cycle?: EndorsingRightsArgumentsCycle;\n  delegate?: EndorsingRightsArgumentsDelegate;\n}\n\nexport interface EndorsingRightsResponseItemDelegates {\n  delegate: string;\n  first_slot: number;\n  endorsing_power: number;\n}\nexport interface EndorsingRightsResponseItem {\n  level: number;\n  delegate?: string;\n  delegates?: EndorsingRightsResponseItemDelegates[];\n  slots?: number[];\n  estimated_time?: Date;\n}\n\nexport type EndorsingRightsResponse = EndorsingRightsResponseItem[];\n\nexport type BallotListResponseEnum = 'nay' | 'yay' | 'pass';\n\nexport interface BallotListResponseItem {\n  pkh: string;\n  ballot: BallotListResponseEnum;\n}\n\nexport type BallotListResponse = BallotListResponseItem[];\n\nexport interface BallotsResponse {\n  yay: BigNumber;\n  nay: BigNumber;\n  pass: BigNumber;\n}\n\nexport type PeriodKindResponse =\n  | 'proposal'\n  | 'testing_vote'\n  | 'testing'\n  | 'promotion_vote'\n  | 'exploration'\n  | 'cooldown'\n  | 'promotion'\n  | 'adoption';\n\nexport type CurrentProposalResponse = string | null;\n\nexport type CurrentQuorumResponse = number;\n\nexport interface VotesListingsResponseItem {\n  pkh: string;\n  rolls?: number;\n  voting_power?: BigNumber;\n}\n\nexport type VotesListingsResponse = VotesListingsResponseItem[];\n\nexport type ProposalsResponseItem = [string, BigNumber];\n\nexport type ProposalsResponse = ProposalsResponseItem[];\n\nexport interface BlockHeaderResponse {\n  protocol: string;\n  chain_id: string;\n  hash: string;\n  level: number;\n  proto: number;\n  predecessor: string;\n  timestamp: string;\n  validation_pass: number;\n  operations_hash: string;\n  fitness: string[];\n  context: string;\n  payload_hash?: string;\n  payload_round?: number;\n  priority?: number;\n  proof_of_work_nonce: string;\n  liquidity_baking_escape_vote?: boolean | LiquidityBakingToggleVotes;\n  signature: string;\n}\n\nexport interface PackDataParams {\n  data: MichelsonV1Expression;\n  type: MichelsonV1Expression;\n  gas?: BigNumber;\n}\n\nexport type HexString = string;\n\nexport interface PackDataResponse {\n  packed: HexString;\n  gas?: BigNumber | 'unaccounted';\n}\n\nexport type BigMapResponse = MichelsonV1Expression | MichelsonV1Expression[];\n\nexport type SaplingDiffResponse = {\n  root: SaplingTransactionCommitmentHash;\n  commitments_and_ciphertexts: CommitmentsAndCiphertexts[];\n  nullifiers: string[];\n};\n\nexport type SaplingTransactionCommitmentHash = string;\n\nexport type PreapplyParams = OperationObject[];\nexport type PreapplyResponse = {\n  contents: OperationContentsAndResult[];\n};\n\nexport type ForgeOperationsParams = Pick<OperationObject, 'branch' | 'contents'>;\n\nexport type TimeStampMixed = Date | string;\n\nexport type BalanceUpdateKindEnum = MetadataBalanceUpdatesKindEnum;\nexport type BalanceUpdateCategoryEnum = MetadataBalanceUpdatesCategoryEnum;\n\nexport interface MichelsonV1ExpressionBase {\n  int?: string;\n  string?: string;\n  bytes?: string;\n}\n\nexport interface MichelsonV1ExpressionExtended {\n  prim: string;\n  args?: MichelsonV1Expression[];\n  annots?: string[];\n}\n\nexport type MichelsonV1Expression =\n  | MichelsonV1ExpressionBase\n  | MichelsonV1ExpressionExtended\n  | MichelsonV1Expression[];\n\nexport interface ScriptedContracts {\n  code: MichelsonV1Expression[];\n  storage: MichelsonV1Expression;\n}\n\nexport interface BondId {\n  tx_rollup: string;\n}\n\nexport interface OperationBalanceUpdatesItem {\n  kind: BalanceUpdateKindEnum;\n  category?: BalanceUpdateCategoryEnum;\n  delegate?: string;\n  cycle?: number;\n  contract?: string;\n  change: string;\n  origin?: MetadataBalanceUpdatesOriginEnum;\n  participation?: boolean;\n  revelation?: boolean;\n  committer?: string;\n  bond_id?: BondId;\n}\n\nexport type OperationBalanceUpdates = OperationBalanceUpdatesItem[];\n\nexport interface OperationObject {\n  branch?: string;\n  contents?: OperationContents[];\n  protocol?: string;\n  signature?: string;\n}\n\nexport type InternalOperationResultKindEnum =\n  | OpKind.REVEAL\n  | OpKind.TRANSACTION\n  | OpKind.ORIGINATION\n  | OpKind.DELEGATION;\n\nexport type SuccessfulManagerOperationResultKindEnum =\n  | OpKind.REVEAL\n  | OpKind.TRANSACTION\n  | OpKind.ORIGINATION\n  | OpKind.DELEGATION;\n\nexport type InternalOperationResultEnum =\n  | OperationResultReveal\n  | OperationResultTransaction\n  | OperationResultDelegation\n  | OperationResultOrigination;\n\nexport interface OperationResultTxRollupOrigination {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  originated_rollup?: string;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTxRollupSubmitBatch {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  paid_storage_size_diff?: string;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTxRollupDispatchTickets {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  paid_storage_size_diff?: string;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTxRollupCommit {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTxRollupReturnBond {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTxRollupFinalizeCommitment {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  level?: number;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTxRollupRemoveCommitment {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  level?: number;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTxRollupRejection {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  errors?: TezosGenericOperationError[];\n}\n\nexport interface OperationResultTransferTicket {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  paid_storage_size_diff?: string;\n  errors?: TezosGenericOperationError[];\n}\nexport interface OperationResultDelegation {\n  status: OperationResultStatusEnum;\n  consumed_gas?: string;\n  errors?: TezosGenericOperationError[];\n  consumed_milligas?: string;\n}\n\nexport interface OperationResultSetDepositsLimit {\n  status: OperationResultStatusEnum;\n  consumed_gas?: string;\n  errors?: TezosGenericOperationError[];\n  consumed_milligas?: string;\n}\n\nexport interface OperationResultRegisterGlobalConstant {\n  status: OperationResultStatusEnum;\n  balance_updates?: OperationBalanceUpdates;\n  consumed_gas?: string;\n  storage_size?: string;\n  global_address?: string;\n  errors?: TezosGenericOperationError[];\n  consumed_milligas?: string;\n}\n\nexport interface ContractBigMapDiffItem {\n  key_hash?: string;\n  key?: MichelsonV1Expression;\n  value?: MichelsonV1Expression;\n  action?: DiffActionEnum;\n  big_map?: string;\n  source_big_map?: string;\n  destination_big_map?: string;\n  key_type?: MichelsonV1Expression;\n  value_type?: MichelsonV1Expression;\n}\n\nexport type ContractBigMapDiff = ContractBigMapDiffItem[];\n\nexport interface TezosGenericOperationError {\n  kind: string;\n  id: string;\n}\n\nexport interface OperationResultTransaction {\n  status: OperationResultStatusEnum;\n  storage?: MichelsonV1Expression;\n  big_map_diff?: ContractBigMapDiff;\n  balance_updates?: OperationBalanceUpdates;\n  originated_contracts?: string[];\n  consumed_gas?: string;\n  storage_size?: string;\n  paid_storage_size_diff?: string;\n  allocated_destination_contract?: boolean;\n  errors?: TezosGenericOperationError[];\n  consumed_milligas?: string;\n  lazy_storage_diff?: LazyStorageDiff[];\n  ticket_hash?: string;\n}\n\nexport interface OperationResultReveal {\n  status: OperationResultStatusEnum;\n  consumed_gas?: string;\n  errors?: TezosGenericOperationError[];\n  consumed_milligas?: string;\n}\n\nexport interface TransactionOperationParameter {\n  entrypoint: string;\n  value: MichelsonV1Expression;\n}\n\nexport interface InternalOperationResult {\n  kind: InternalOperationResultKindEnum;\n  source: string;\n  nonce: number;\n  amount?: string;\n  destination?: string;\n  parameters?: TransactionOperationParameter;\n  public_key?: string;\n  balance?: string;\n  delegate?: string;\n  script?: ScriptedContracts;\n  value?: MichelsonV1Expression;\n  limit?: string;\n  result: InternalOperationResultEnum;\n}\n\nexport interface SuccessfulManagerOperationResult {\n  kind: SuccessfulManagerOperationResultKindEnum;\n  consumed_gas?: string;\n  consumed_milligas?: string;\n  storage?: MichelsonV1Expression;\n  big_map_diff?: ContractBigMapDiff;\n  balance_updates?: OperationBalanceUpdates;\n  originated_contracts?: string[];\n  storage_size?: string;\n  paid_storage_size_diff?: string;\n  lazy_storage_diff?: LazyStorageDiff[];\n}\n\nexport type MetadataBalanceUpdatesKindEnum =\n  | 'contract'\n  | 'freezer'\n  | 'accumulator'\n  | 'burned'\n  | 'commitment'\n  | 'minted';\n\nexport enum METADATA_BALANCE_UPDATES_CATEGORY {\n  BAKING_REWARDS = 'baking rewards',\n  REWARDS = 'rewards',\n  FEES = 'fees',\n  DEPOSITS = 'deposits',\n  LEGACY_REWARDS = 'legacy_rewards',\n  LEGACY_FEES = 'legacy_fees',\n  LEGACY_DEPOSITS = 'legacy_deposits',\n  BLOCK_FEES = 'block fees',\n  NONCE_REVELATION_REWARDS = 'nonce revelation rewards',\n  DOUBLE_SIGNING_EVIDENCE_REWARDS = 'double signing evidence rewards',\n  ENDORSING_REWARDS = 'endorsing rewards',\n  BAKING_BONUSES = 'baking bonuses',\n  STORAGE_FEES = 'storage fees',\n  PUNISHMENTS = 'punishments',\n  LOST_ENDORSING_REWARDS = 'lost endorsing rewards',\n  SUBSIDY = 'subsidy',\n  BURNED = 'burned',\n  COMMITMENT = 'commitment',\n  BOOTSTRAP = 'bootstrap',\n  INVOICE = 'invoice',\n  MINTED = 'minted',\n  TX_ROLLUP_REJECTION_REWARDS = 'tx_rollup_rejection_rewards',\n  TX_ROLLUP_REJECTION_PUNISHMENTS = 'tx_rollup_rejection_punishments',\n  BONDS = 'bonds',\n}\nexport type MetadataBalanceUpdatesCategoryEnum = METADATA_BALANCE_UPDATES_CATEGORY;\n\nexport type MetadataBalanceUpdatesOriginEnum = 'block' | 'migration' | 'subsidy' | 'simulation';\n\nexport interface OperationMetadataBalanceUpdates {\n  kind: MetadataBalanceUpdatesKindEnum;\n  category?: MetadataBalanceUpdatesCategoryEnum;\n  contract?: string;\n  delegate?: string;\n  participation?: boolean;\n  revelation?: boolean;\n  committer?: string;\n  cycle?: number;\n  change: string;\n  origin?: MetadataBalanceUpdatesOriginEnum;\n}\n\nexport type OperationResultStatusEnum = 'applied' | 'failed' | 'skipped' | 'backtracked';\n\nexport type DiffActionEnum = 'update' | 'remove' | 'copy' | 'alloc';\n\nexport type LazyStorageDiff = LazyStorageDiffBigMap | LazyStorageDiffSaplingState;\n\nexport interface LazyStorageDiffBigMap {\n  kind: 'big_map';\n  id: string;\n  diff: LazyStorageDiffBigMapItems;\n}\n\nexport interface LazyStorageDiffSaplingState {\n  kind: 'sapling_state';\n  id: string;\n  diff: LazyStorageDiffSaplingStateItems;\n}\n\nexport interface LazyStorageDiffBigMapItems {\n  action: DiffActionEnum;\n  updates?: LazyStorageDiffUpdatesBigMap[];\n  source?: string;\n  key_type?: MichelsonV1Expression;\n  value_type?: MichelsonV1Expression;\n}\n\nexport interface LazyStorageDiffSaplingStateItems {\n  action: DiffActionEnum;\n  updates?: LazyStorageDiffUpdatesSaplingState;\n  source?: string;\n  memo_size?: number;\n}\n\nexport interface LazyStorageDiffUpdatesBigMap {\n  key_hash: string;\n  key: MichelsonV1Expression;\n  value?: MichelsonV1Expression;\n}\n\nexport type CommitmentsAndCiphertexts = [\n  SaplingTransactionCommitment,\n  SaplingTransactionCiphertext\n];\n\nexport type SaplingTransactionCommitment = string;\n\nexport interface LazyStorageDiffUpdatesSaplingState {\n  commitments_and_ciphertexts: CommitmentsAndCiphertexts[];\n  nullifiers: string[];\n}\n\nexport interface SaplingTransactionCiphertext {\n  cv: string;\n  epk: string;\n  payload_enc: string;\n  nonce_enc: string;\n  payload_out: string;\n  nonce_out: string;\n}\n\nexport interface OperationResultOrigination {\n  status: OperationResultStatusEnum;\n  big_map_diff?: ContractBigMapDiff;\n  balance_updates?: OperationBalanceUpdates;\n  originated_contracts?: string[];\n  consumed_gas?: string;\n  storage_size?: string;\n  paid_storage_size_diff?: string;\n  errors?: TezosGenericOperationError[];\n  consumed_milligas?: string;\n  lazy_storage_diff?: LazyStorageDiff[];\n}\n\nexport interface OperationContentsAndResultMetadataOrigination {\n  balance_updates: OperationMetadataBalanceUpdates[];\n  operation_result: OperationResultOrigination;\n  internal_operation_results?: InternalOperationResult[];\n}\n\nexport type ConstantsResponse = ConstantsResponseCommon &\n  ConstantsResponseProto013 &\n  ConstantsResponseProto012 &\n  ConstantsResponseProto011 &\n  ConstantsResponseProto010 &\n  ConstantsResponseProto009 &\n  ConstantsResponseProto008 &\n  ConstantsResponseProto007 &\n  ConstantsResponseProto006 &\n  ConstantsResponseProto005 &\n  ConstantsResponseProto004 &\n  ConstantsResponseProto003 &\n  ConstantsResponseProto001And002;\n\nexport interface ConstantsResponseCommon {\n  proof_of_work_nonce_size: number;\n  nonce_length: number;\n  max_operation_data_length: number;\n  preserved_cycles: number;\n  blocks_per_cycle: number;\n  blocks_per_commitment: number;\n  blocks_per_roll_snapshot: number;\n  blocks_per_voting_period: number;\n  time_between_blocks: BigNumber[];\n  endorsers_per_block: number;\n  hard_gas_limit_per_operation: BigNumber;\n  hard_gas_limit_per_block: BigNumber;\n  proof_of_work_threshold: BigNumber;\n  tokens_per_roll: BigNumber;\n  michelson_maximum_type_size: number;\n  seed_nonce_revelation_tip: BigNumber;\n  block_security_deposit: BigNumber;\n  endorsement_security_deposit: BigNumber;\n  endorsement_reward: BigNumber | BigNumber[]; // BigNumber[] since proto 006, BigNumber before\n  cost_per_byte: BigNumber;\n  hard_storage_limit_per_operation: BigNumber;\n}\n\nexport type Ratio = { numerator: number; denominator: number };\n\nexport interface ConstantsResponseProto013\n  extends Omit<\n    ConstantsResponseProto012,\n    | 'blocks_per_voting_period'\n    | 'cache_layout'\n    | 'delegate_selection'\n    | 'liquidity_baking_escape_ema_threshold'\n  > {\n  cache_layout_size?: number;\n  cache_sampler_state_cycles?: number;\n  cache_script_size?: number;\n  cache_stake_distribution_cycles?: number;\n  cycles_per_voting_period?: number;\n  liquidity_baking_toggle_ema_threshold?: number;\n  initial_seed?: string;\n  tx_rollup_enable?: boolean;\n  tx_rollup_origination_size?: number;\n  tx_rollup_hard_size_limit_per_inbox?: number;\n  tx_rollup_hard_size_limit_per_message?: number;\n  tx_rollup_max_withdrawals_per_batch?: number;\n  tx_rollup_commitment_bond?: BigNumber;\n  tx_rollup_finality_period?: number;\n  tx_rollup_withdraw_period?: number;\n  tx_rollup_max_inboxes_count?: number;\n  tx_rollup_max_messages_per_inbox?: number;\n  tx_rollup_max_commitments_count?: number;\n  tx_rollup_cost_per_byte_ema_factor?: number;\n  tx_rollup_max_ticket_payload_size?: number;\n  tx_rollup_rejection_max_proof_size?: number;\n  tx_rollup_sunset_level?: number;\n  sc_rollup_enable?: boolean;\n  sc_rollup_origination_size?: number;\n  sc_rollup_challenge_window_in_blocks?: number;\n  sc_rollup_max_available_messages?: number;\n}\n\nexport interface ConstantsResponseProto012\n  extends Omit<\n    ConstantsResponseProto011,\n    | 'baking_reward_per_endorsement'\n    | 'initial_endorsers'\n    | 'delay_per_missing_endorsement'\n    | 'test_chain_duration'\n    | 'blocks_per_roll_snapshot'\n    | 'time_between_blocks'\n    | 'endorsers_per_block'\n    | 'block_security_deposit'\n    | 'endorsement_security_deposit'\n    | 'endorsement_reward'\n  > {\n  blocks_per_stake_snapshot?: number;\n  baking_reward_fixed_portion?: BigNumber;\n  baking_reward_bonus_per_slot?: BigNumber;\n  endorsing_reward_per_slot?: BigNumber;\n  max_operations_time_to_live?: number;\n  consensus_committee_size?: number;\n  consensus_threshold?: number;\n  minimal_participation_ratio?: Ratio;\n  max_slashing_period?: number;\n  frozen_deposits_percentage?: number;\n  double_baking_punishment?: BigNumber;\n  ratio_of_frozen_deposits_slashed_per_double_endorsement?: Ratio;\n  delegate_selection?: 'random' | string[][];\n  delay_increment_per_round?: BigNumber;\n}\n\nexport interface ConstantsResponseProto011 extends ConstantsResponseProto010 {\n  max_micheline_node_count?: number;\n  max_allowed_global_constants_depth?: number;\n  max_micheline_bytes_limit?: number;\n  cache_layout?: BigNumber[];\n}\nexport interface ConstantsResponseProto010 extends ConstantsResponseProto007 {\n  minimal_block_delay?: BigNumber;\n  liquidity_baking_subsidy?: BigNumber;\n  liquidity_baking_sunset_level?: number;\n  liquidity_baking_escape_ema_threshold?: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ConstantsResponseProto009 extends ConstantsResponseProto007 {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ConstantsResponseProto008 extends ConstantsResponseProto007 {}\n\nexport interface ConstantsResponseProto007\n  extends Omit<ConstantsResponseProto006, 'max_revelations_per_block'> {\n  max_anon_ops_per_block?: number;\n}\n\nexport interface ConstantsResponseProto006 extends Omit<ConstantsResponseProto005, 'block_reward'> {\n  baking_reward_per_endorsement?: BigNumber[];\n}\n\nexport interface ConstantsResponseProto005 extends ConstantsResponseProto004 {\n  quorum_min?: number;\n  quorum_max?: number;\n  min_proposal_quorum?: number;\n  initial_endorsers?: number;\n  delay_per_missing_endorsement?: BigNumber;\n}\n\nexport interface ConstantsResponseProto004 extends ConstantsResponseProto003 {\n  test_chain_duration?: BigNumber;\n}\n\nexport interface ConstantsResponseProto003\n  extends Omit<ConstantsResponseProto001And002, 'origination_burn'> {\n  origination_size?: number;\n  max_proposals_per_delegate?: number;\n}\n\nexport interface ConstantsResponseProto001And002 {\n  max_revelations_per_block?: number;\n  origination_burn?: string;\n  block_reward?: BigNumber;\n}\n\nexport interface ContractResponse {\n  balance: BigNumber;\n  script: ScriptedContracts;\n  counter?: string;\n  delegate?: string;\n}\n\nexport interface TestChainStatus {\n  status: string;\n}\n\nexport interface MaxOperationListLength {\n  max_size: number;\n  max_op?: number;\n}\n\nexport interface Level {\n  level: number;\n  level_position: number;\n  cycle: number;\n  cycle_position: number;\n  voting_period: number;\n  voting_period_position: number;\n  expected_commitment: boolean;\n}\n\nexport interface LevelInfo {\n  level: number;\n  level_position: number;\n  cycle: number;\n  cycle_position: number;\n  expected_commitment: boolean;\n}\n\nexport interface BlockMetadata {\n  protocol: string;\n  next_protocol: string;\n  test_chain_status: TestChainStatus;\n  max_operations_ttl: number;\n  max_operation_data_length: number;\n  max_block_header_length: number;\n  max_operation_list_length: MaxOperationListLength[];\n  proposer?: string;\n  baker: string;\n  level?: Level;\n  level_info?: LevelInfo;\n  voting_period_kind?: string;\n  voting_period_info?: VotingPeriodBlockResult;\n  nonce_hash?: string;\n  consumed_gas: string;\n  deactivated: string[];\n  balance_updates: OperationBalanceUpdates;\n  liquidity_baking_escape_ema?: number;\n  liquidity_baking_toggle_ema?: number;\n  implicit_operations_results?: SuccessfulManagerOperationResult[];\n  consumed_milligas?: string;\n}\n\nexport type RPCRunOperationParam = {\n  operation: OperationObject;\n  chain_id: string;\n};\n\nexport type RPCRunCodeParam = {\n  script: MichelsonV1ExpressionExtended[];\n  storage: MichelsonV1Expression;\n  input: MichelsonV1Expression;\n  amount: string;\n  chain_id: string;\n  source?: string;\n  payer?: string;\n  gas?: string;\n  self?: string;\n  entrypoint?: string;\n  balance?: string;\n  unparsing_mode?: UnparsingMode;\n  now?: string;\n  level?: string;\n};\n\nexport type RunCodeResult = {\n  storage: MichelsonV1Expression;\n  operations: InternalOperationResult[];\n  big_map_diff?: ContractBigMapDiff;\n  lazy_storage_diff?: LazyStorageDiff;\n};\n\nexport type RPCRunViewParam = {\n  contract: string;\n  entrypoint: string;\n  input: MichelsonV1Expression;\n  chain_id: string;\n  source?: string;\n  payer?: string;\n  gas?: BigNumber;\n  unparsing_mode?: UnparsingModeEnum;\n};\n\nexport type RunViewResult = {\n  data: MichelsonV1Expression;\n};\n\nexport type EntrypointsResponse = {\n  entrypoints: { [key: string]: MichelsonV1ExpressionExtended };\n  unreachable?: { path: ('Left' | 'Right')[] };\n};\n\nexport interface OperationContentsAndResultOrigination {\n  kind: OpKind.ORIGINATION;\n  source: string;\n  fee: string;\n  counter: string;\n  gas_limit: string;\n  storage_limit: string;\n  balance: string;\n  delegate?: string;\n  script?: ScriptedContracts;\n  metadata: OperationContentsAndResultMetadataOrigination;\n}\n\nexport interface VotingPeriodResult {\n  index: number;\n  kind: PeriodKindResponse;\n  start_position: number;\n}\n\nexport interface VotingPeriodBlockResult {\n  voting_period: VotingPeriodResult;\n  position: number;\n  remaining: number;\n}\n\nexport type UnparsingModeEnum = 'Readable' | 'Optimized' | 'Optimized_legacy';\nexport type UnparsingMode = {\n  unparsing_mode: UnparsingModeEnum;\n};\n\nexport type ProtocolsResponse = {\n  protocol: string;\n  next_protocol: string;\n};\n\nexport type Next =\n  | {\n      next: number;\n    }\n  | {\n      newest: number;\n      oldest: number;\n    };\n\nexport type LastRemovedCommitmentHashes = {\n  last_message_hash: string;\n  commitment_hash: string;\n};\nexport interface TxRollupStateResponse {\n  last_removed_commitment_hashes?: LastRemovedCommitmentHashes;\n  finalized_commitments: Next;\n  unfinalized_commitments: Next;\n  uncommitted_inboxes: Next;\n  commitment_newest_hash?: string;\n  tezos_head_level?: number;\n  burn_per_byte: string;\n  allocated_storage: string;\n  occupied_storage: string;\n  inbox_ema: number;\n  commitments_watermark?: number;\n}\n\nexport interface TxRollupInboxResponse {\n  inbox_length: number;\n  cumulated_size: number;\n  merkle_root: string;\n}\n","export enum OpKind {\n  ORIGINATION = 'origination',\n  DELEGATION = 'delegation',\n  REVEAL = 'reveal',\n  TRANSACTION = 'transaction',\n  ACTIVATION = 'activate_account',\n  ENDORSEMENT = 'endorsement',\n  PREENDORSEMENT = 'preendorsement',\n  SET_DEPOSITS_LIMIT = 'set_deposits_limit',\n  DOUBLE_PREENDORSEMENT_EVIDENCE = 'double_preendorsement_evidence',\n  ENDORSEMENT_WITH_SLOT = 'endorsement_with_slot',\n  SEED_NONCE_REVELATION = 'seed_nonce_revelation',\n  DOUBLE_ENDORSEMENT_EVIDENCE = 'double_endorsement_evidence',\n  DOUBLE_BAKING_EVIDENCE = 'double_baking_evidence',\n  PROPOSALS = 'proposals',\n  BALLOT = 'ballot',\n  FAILING_NOOP = 'failing_noop',\n  REGISTER_GLOBAL_CONSTANT = 'register_global_constant',\n  TX_ROLLUP_ORIGINATION = 'tx_rollup_origination',\n  TX_ROLLUP_SUBMIT_BATCH = 'tx_rollup_submit_batch',\n  TX_ROLLUP_COMMIT = 'tx_rollup_commit',\n  TX_ROLLUP_RETURN_BOND = 'tx_rollup_return_bond',\n  TX_ROLLUP_FINALIZE_COMMITMENT = 'tx_rollup_finalize_commitment',\n  TX_ROLLUP_REMOVE_COMMITMENT = 'tx_rollup_remove_commitment',\n  TX_ROLLUP_REJECTION = 'tx_rollup_rejection',\n  TX_ROLLUP_DISPATCH_TICKETS = 'tx_rollup_dispatch_tickets',\n  TRANSFER_TICKET = 'transfer_ticket',\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n    \"version\": \"13.0.1\"\n};\n","/**\n * @packageDocumentation\n * @module @taquito/rpc\n */\nimport { HttpBackend, HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\nimport BigNumber from 'bignumber.js';\nimport {\n  defaultChain,\n  defaultRPCOptions,\n  RpcClientInterface,\n  RPCOptions,\n} from './rpc-client-interface';\nimport {\n  BakingRightsQueryArguments,\n  BakingRightsResponse,\n  BalanceResponse,\n  BallotListResponse,\n  BallotsResponse,\n  BigMapGetResponse,\n  BigMapKey,\n  BigMapResponse,\n  BlockHeaderResponse,\n  BlockMetadata,\n  BlockResponse,\n  ConstantsResponse,\n  ContractResponse,\n  CurrentProposalResponse,\n  CurrentQuorumResponse,\n  DelegateResponse,\n  DelegatesResponse,\n  EndorsingRightsQueryArguments,\n  EndorsingRightsResponse,\n  EntrypointsResponse,\n  ForgeOperationsParams,\n  ManagerKeyResponse,\n  MichelsonV1ExpressionExtended,\n  OperationHash,\n  PackDataParams,\n  PackDataResponse,\n  PreapplyParams,\n  PreapplyResponse,\n  ProposalsResponse,\n  ProtocolsResponse,\n  RPCRunCodeParam,\n  RPCRunOperationParam,\n  RPCRunViewParam,\n  RunCodeResult,\n  RunViewResult,\n  SaplingDiffResponse,\n  ScriptResponse,\n  StorageResponse,\n  UnparsingMode,\n  VotesListingsResponse,\n  VotingPeriodBlockResult,\n  TxRollupStateResponse,\n  TxRollupInboxResponse,\n} from './types';\nimport { castToBigNumber } from './utils/utils';\nimport {\n  InvalidAddressError,\n  validateAddress,\n  validateContractAddress,\n  ValidationResult,\n} from '@taquito/utils';\n\nexport { castToBigNumber } from './utils/utils';\n\nexport {\n  RPCOptions,\n  defaultChain,\n  defaultRPCOptions,\n  RpcClientInterface,\n} from './rpc-client-interface';\n\nexport { RpcClientCache } from './rpc-client-modules/rpc-cache';\n\nexport * from './types';\n\nexport { OpKind } from './opkind';\n\nexport { VERSION } from './version';\n\n/***\n * @description RpcClient allows interaction with Tezos network through an rpc node\n */\nexport class RpcClient implements RpcClientInterface {\n  /**\n   *\n   * @param url rpc root url\n   * @param chain chain (default main)\n   * @param httpBackend Http backend that issue http request.\n   * You can override it by providing your own if you which to hook in the request/response\n   *\n   * @example new RpcClient('https://mainnet.api.tez.ie/', 'main') this will use https://mainnet.api.tez.ie//chains/main\n   */\n  constructor(\n    protected url: string,\n    protected chain: string = defaultChain,\n    protected httpBackend: HttpBackend = new HttpBackend()\n  ) {}\n\n  protected createURL(path: string) {\n    // Trim trailing slashes because it is assumed to be included in path\n    return `${this.url.replace(/\\/+$/g, '')}${path}`;\n  }\n\n  private validateAddress(address: string) {\n    if (validateAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(address);\n    }\n  }\n\n  private validateContract(address: string) {\n    if (validateContractAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(address);\n    }\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Get the block's hash, its unique identifier.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-hash\n   */\n  async getBlockHash({ block }: RPCOptions = defaultRPCOptions): Promise<string> {\n    const hash = await this.httpBackend.createRequest<string>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/hash`),\n      method: 'GET',\n    });\n    return hash;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-live-blocks\n   */\n  async getLiveBlocks({ block }: RPCOptions = defaultRPCOptions): Promise<string[]> {\n    const blocks = await this.httpBackend.createRequest<string[]>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/live_blocks`),\n      method: 'GET',\n    });\n    return blocks;\n  }\n\n  /**\n   *\n   * @param address address from which we want to retrieve the balance\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the balance of a contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-balance\n   */\n  async getBalance(\n    address: string,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<BalanceResponse> {\n    this.validateAddress(address);\n    const balance = await this.httpBackend.createRequest<BalanceResponse>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/contracts/${address}/balance`\n      ),\n      method: 'GET',\n    });\n    return new BigNumber(balance);\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the storage\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the data of the contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-storage\n   */\n  async getStorage(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<StorageResponse> {\n    this.validateContract(address);\n    return this.httpBackend.createRequest<StorageResponse>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/contracts/${address}/storage`\n      ),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the script\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the code and data of the contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n   */\n  async getScript(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ScriptResponse> {\n    this.validateContract(address);\n    return this.httpBackend.createRequest<ScriptResponse>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/contracts/${address}/script`\n      ),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the script\n   * @param unparsingMode default is { unparsing_mode: \"Readable\" }\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the script of the contract and normalize it using the requested unparsing mode.\n   *\n   */\n  async getNormalizedScript(\n    address: string,\n    unparsingMode: UnparsingMode = { unparsing_mode: 'Readable' },\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ScriptResponse> {\n    this.validateContract(address);\n    return this.httpBackend.createRequest<ScriptResponse>(\n      {\n        url: this.createURL(\n          `/chains/${this.chain}/blocks/${block}/context/contracts/${address}/script/normalized`\n        ),\n        method: 'POST',\n      },\n      unparsingMode\n    );\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the complete status of a contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id\n   */\n  async getContract(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ContractResponse> {\n    this.validateAddress(address);\n    const contractResponse = await this.httpBackend.createRequest<ContractResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}`),\n      method: 'GET',\n    });\n    return {\n      ...contractResponse,\n      balance: new BigNumber(contractResponse.balance),\n    };\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the manager\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the manager key of a contract.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-manager-key\n   */\n  async getManagerKey(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<ManagerKeyResponse> {\n    this.validateAddress(address);\n    return this.httpBackend.createRequest<ManagerKeyResponse>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/contracts/${address}/manager_key`\n      ),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the delegate (baker)\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the delegate of a contract, if any.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-delegate\n   */\n  async getDelegate(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<DelegateResponse> {\n    this.validateAddress(address);\n    let delegate: DelegateResponse;\n    try {\n      delegate = await this.httpBackend.createRequest<DelegateResponse>({\n        url: this.createURL(\n          `/chains/${this.chain}/blocks/${block}/context/contracts/${address}/delegate`\n        ),\n        method: 'GET',\n      });\n    } catch (ex) {\n      if (ex instanceof HttpResponseError && ex.status === STATUS_CODE.NOT_FOUND) {\n        delegate = null;\n      } else {\n        throw ex;\n      }\n    }\n    return delegate;\n  }\n\n  /**\n   *\n   * @param address contract address from which we want to retrieve the big map key\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a key in the big map storage of the contract.\n   *\n   * @deprecated Deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  async getBigMapKey(\n    address: string,\n    key: BigMapKey,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<BigMapGetResponse> {\n    this.validateAddress(address);\n    return this.httpBackend.createRequest<BigMapGetResponse>(\n      {\n        url: this.createURL(\n          `/chains/${this.chain}/blocks/${block}/context/contracts/${address}/big_map_get`\n        ),\n        method: 'POST',\n      },\n      key\n    );\n  }\n\n  /**\n   *\n   * @param id Big Map ID\n   * @param expr Expression hash to query (A b58check encoded Blake2b hash of the expression (The expression can be packed using the pack_data method))\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a key in a big map.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n   */\n  async getBigMapExpr(\n    id: string,\n    expr: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<BigMapResponse> {\n    return this.httpBackend.createRequest<BigMapResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/big_maps/${id}/${expr}`),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param address delegate address which we want to retrieve\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Fetches information about a delegate from RPC.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-delegates-pkh\n   */\n  async getDelegates(\n    address: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<DelegatesResponse> {\n    this.validateAddress(address);\n    const response = await this.httpBackend.createRequest<DelegatesResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/delegates/${address}`),\n      method: 'GET',\n    });\n\n    const castedResponse: any = castToBigNumber(response, [\n      'balance',\n      'full_balance',\n      'current_frozen_deposits',\n      'frozen_deposits',\n      'frozen_balance',\n      'frozen_deposits_limit',\n      'staking_balance',\n      'delegated_balance',\n      'voting_power',\n    ]);\n\n    return {\n      ...response,\n      ...castedResponse,\n      frozen_balance_by_cycle: response.frozen_balance_by_cycle\n        ? response.frozen_balance_by_cycle.map(({ deposit, deposits, fees, rewards, ...rest }) => {\n            const castedToBigNumber: any = castToBigNumber({ deposit, deposits, fees, rewards }, [\n              'deposit',\n              'deposits',\n              'fees',\n              'rewards',\n            ]);\n            return {\n              ...rest,\n              deposit: castedToBigNumber.deposit,\n              deposits: castedToBigNumber.deposits,\n              fees: castedToBigNumber.fees,\n              rewards: castedToBigNumber.rewards,\n            };\n          })\n        : undefined,\n    };\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description All constants\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-constants\n   */\n  async getConstants({ block }: RPCOptions = defaultRPCOptions): Promise<ConstantsResponse> {\n    const response = await this.httpBackend.createRequest<ConstantsResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/constants`),\n      method: 'GET',\n    });\n\n    const castedResponse: any = castToBigNumber(response, [\n      'time_between_blocks',\n      'hard_gas_limit_per_operation',\n      'hard_gas_limit_per_block',\n      'proof_of_work_threshold',\n      'tokens_per_roll',\n      'seed_nonce_revelation_tip',\n      'block_security_deposit',\n      'endorsement_security_deposit',\n      'block_reward',\n      'endorsement_reward',\n      'cost_per_byte',\n      'hard_storage_limit_per_operation',\n      'test_chain_duration',\n      'baking_reward_per_endorsement',\n      'delay_per_missing_endorsement',\n      'minimal_block_delay',\n      'liquidity_baking_subsidy',\n      'cache_layout',\n      'baking_reward_fixed_portion',\n      'baking_reward_bonus_per_slot',\n      'endorsing_reward_per_slot',\n      'double_baking_punishment',\n      'delay_increment_per_round',\n      'tx_rollup_commitment_bond',\n    ]);\n\n    return {\n      ...response,\n      ...(castedResponse as ConstantsResponse),\n    };\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls. See examples for various available sytaxes.\n   *\n   * @description All the information about a block\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id\n   * @example getBlock() will default to /main/chains/block/head.\n   * @example getBlock({ block: head~2 }) will return an offset of 2 blocks.\n   * @example getBlock({ block: BL8fTiWcSxWCjiMVnDkbh6EuhqVPZzgWheJ2dqwrxYRm9AephXh~2 }) will return an offset of 2 blocks from given block hash..\n   */\n  async getBlock({ block }: RPCOptions = defaultRPCOptions): Promise<BlockResponse> {\n    const response = await this.httpBackend.createRequest<BlockResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description The whole block header\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-header\n   */\n  async getBlockHeader({ block }: RPCOptions = defaultRPCOptions): Promise<BlockHeaderResponse> {\n    const response = await this.httpBackend.createRequest<BlockHeaderResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/header`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description All the metadata associated to the block\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-metadata\n   */\n  async getBlockMetadata({ block }: RPCOptions = defaultRPCOptions): Promise<BlockMetadata> {\n    const response = await this.httpBackend.createRequest<BlockMetadata>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/metadata`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param args contains optional query arguments\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Retrieves the list of delegates allowed to bake a block.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-baking-rights\n   */\n  async getBakingRights(\n    args: BakingRightsQueryArguments = {},\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<BakingRightsResponse> {\n    const response = await this.httpBackend.createRequest<BakingRightsResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/baking_rights`),\n      method: 'GET',\n      query: args,\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param args contains optional query arguments\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Retrieves the list of delegates allowed to bake a block.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-endorsing-rights\n   */\n  async getEndorsingRights(\n    args: EndorsingRightsQueryArguments = {},\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<EndorsingRightsResponse> {\n    const response = await this.httpBackend.createRequest<EndorsingRightsResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/endorsing_rights`),\n      method: 'GET',\n      query: args,\n    });\n\n    return response;\n  }\n\n  /**\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Ballots casted so far during a voting period\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballot-list\n   */\n  async getBallotList({ block }: RPCOptions = defaultRPCOptions): Promise<BallotListResponse> {\n    const response = await this.httpBackend.createRequest<BallotListResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/ballot_list`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Sum of ballots casted so far during a voting period.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballots\n   */\n  async getBallots({ block }: RPCOptions = defaultRPCOptions): Promise<BallotsResponse> {\n    const response = await this.httpBackend.createRequest<BallotsResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/ballots`),\n      method: 'GET',\n    });\n\n    const casted: any = castToBigNumber(response, ['yay', 'nay', 'pass']);\n    return casted;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Current proposal under evaluation.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-proposal\n   */\n  async getCurrentProposal({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<CurrentProposalResponse> {\n    const response = await this.httpBackend.createRequest<CurrentProposalResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_proposal`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Current expected quorum.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-quorum\n   */\n  async getCurrentQuorum({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<CurrentQuorumResponse> {\n    const response = await this.httpBackend.createRequest<CurrentQuorumResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_quorum`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description List of delegates with their voting weight, in number of rolls.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-listings\n   */\n  async getVotesListings({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<VotesListingsResponse> {\n    const response = await this.httpBackend.createRequest<VotesListingsResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/listings`),\n      method: 'GET',\n    });\n\n    response.map((item) => {\n      if (item.voting_power) {\n        item.voting_power = new BigNumber(item.voting_power);\n      }\n      return item;\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description List of proposals with number of supporters.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-proposals\n   */\n  async getProposals({ block }: RPCOptions = defaultRPCOptions): Promise<ProposalsResponse> {\n    const response = await this.httpBackend.createRequest<ProposalsResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/proposals`),\n      method: 'GET',\n    });\n\n    response.map((item) => {\n      return (item[1] = new BigNumber(item[1]));\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param data operation contents to forge\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Forge an operation returning the unsigned bytes\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-forge-operations\n   */\n  async forgeOperations(\n    data: ForgeOperationsParams,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<string> {\n    return this.httpBackend.createRequest<string>(\n      {\n        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/forge/operations`),\n        method: 'POST',\n      },\n      data\n    );\n  }\n\n  /**\n   *\n   * @param signedOpBytes signed bytes to inject\n   *\n   * @description Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-injection-operation\n   */\n  async injectOperation(signedOpBytes: string): Promise<OperationHash> {\n    return this.httpBackend.createRequest<any>(\n      {\n        url: this.createURL(`/injection/operation`),\n        method: 'POST',\n      },\n      signedOpBytes\n    );\n  }\n\n  /**\n   *\n   * @param ops Operations to apply\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Simulate the validation of an operation\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-preapply-operations\n   */\n  async preapplyOperations(\n    ops: PreapplyParams,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<PreapplyResponse[]> {\n    const response = await this.httpBackend.createRequest<PreapplyResponse[]>(\n      {\n        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/preapply/operations`),\n        method: 'POST',\n      },\n      ops\n    );\n\n    return response;\n  }\n\n  /**\n   *\n   * @param contract address of the contract we want to get the entrypoints of\n   *\n   * @description Return the list of entrypoints of the contract\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-entrypoints\n   *\n   * @version 005_PsBABY5H\n   */\n  async getEntrypoints(\n    contract: string,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<EntrypointsResponse> {\n    this.validateContract(contract);\n    const contractResponse = await this.httpBackend.createRequest<{\n      entrypoints: { [key: string]: MichelsonV1ExpressionExtended };\n    }>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/entrypoints`\n      ),\n      method: 'GET',\n    });\n\n    return contractResponse;\n  }\n\n  /**\n   * @param op Operation to run\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Run an operation without signature checks\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-operation\n   */\n  async runOperation(\n    op: RPCRunOperationParam,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<PreapplyResponse> {\n    const response = await this.httpBackend.createRequest<any>(\n      {\n        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_operation`),\n        method: 'POST',\n      },\n      op\n    );\n\n    return response;\n  }\n\n  /**\n   * @param code Code to run\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Run a piece of code in the current context\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-code\n   */\n  async runCode(\n    code: RPCRunCodeParam,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<RunCodeResult> {\n    const response = await this.httpBackend.createRequest<any>(\n      {\n        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_code`),\n        method: 'POST',\n      },\n      code\n    );\n\n    return response;\n  }\n\n  /**\n   * @param viewParams Parameters of the view to run\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Simulate a call to a view following the TZIP-4 standard. See https://gitlab.com/tzip/tzip/-/blob/master/proposals/tzip-4/tzip-4.md#view-entrypoints.\n   *\n   */\n  async runView(\n    { unparsing_mode = 'Readable', ...rest }: RPCRunViewParam,\n    { block }: RPCOptions = defaultRPCOptions\n  ): Promise<RunViewResult> {\n    return this.httpBackend.createRequest<any>(\n      {\n        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_view`),\n        method: 'POST',\n      },\n      {\n        unparsing_mode,\n        ...rest,\n      }\n    );\n  }\n\n  async getChainId() {\n    return this.httpBackend.createRequest<string>({\n      url: this.createURL(`/chains/${this.chain}/chain_id`),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param data Data to pack\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Computes the serialized version of a data expression using the same algorithm as script instruction PACK\n   * Note: You should always verify the packed bytes before signing or requesting that they be signed when using the the RPC to pack.\n   * This precaution helps protect you and your applications users from RPC nodes that have been compromised.\n   * A node that is operated by a bad actor, or compromised by a bad actor could return a fully formed operation that does not correspond to the input provided to the RPC endpoint.\n   * A safer solution to pack and sign data would be to use the `packDataBytes` function available in the `@taquito/michel-codec` package.\n   *\n   * @example packData({ data: { string: \"test\" }, type: { prim: \"string\" } })\n   *\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-pack-data\n   */\n  async packData(data: PackDataParams, { block }: RPCOptions = defaultRPCOptions) {\n    const { gas, ...rest } = await this.httpBackend.createRequest<PackDataResponse>(\n      {\n        url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/pack_data`),\n        method: 'POST',\n      },\n      data\n    );\n\n    let formattedGas = gas;\n    const tryBigNumber = new BigNumber(gas || '');\n    if (!tryBigNumber.isNaN()) {\n      formattedGas = tryBigNumber;\n    }\n\n    return { gas: formattedGas, ...rest };\n  }\n\n  /**\n   *\n   * @description Return rpc root url\n   */\n\n  getRpcUrl() {\n    return this.url;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Voting period of current block.\n   *\n   * @example getCurrentPeriod() will default to current voting period for /main/chains/block/head.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-period\n   */\n  async getCurrentPeriod({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<VotingPeriodBlockResult> {\n    const response = await this.httpBackend.createRequest<VotingPeriodBlockResult>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_period`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Voting period of next block.\n   *\n   * @example getSuccessorPeriod() will default to successor voting period for /main/chains/block/head.\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-successor-period\n   */\n  async getSuccessorPeriod({\n    block,\n  }: RPCOptions = defaultRPCOptions): Promise<VotingPeriodBlockResult> {\n    const response = await this.httpBackend.createRequest<VotingPeriodBlockResult>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/successor_period`),\n      method: 'GET',\n    });\n\n    return response;\n  }\n\n  /**\n   *\n   * @param id Sapling state ID\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a sapling state ID.\n   *\n   * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-sapling-sapling-state-id-get-diff\n   */\n  async getSaplingDiffById(\n    id: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<SaplingDiffResponse> {\n    return this.httpBackend.createRequest<SaplingDiffResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/sapling/${id}/get_diff`),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param contract address of the contract we want to get the sapling diff\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the value associated with a sapling state.\n   *\n   * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-contracts-contract-id-single-sapling-get-diff\n   */\n  async getSaplingDiffByContract(\n    contract: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<SaplingDiffResponse> {\n    return this.httpBackend.createRequest<SaplingDiffResponse>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/single_sapling_get_diff`\n      ),\n      method: 'GET',\n    });\n  }\n\n  async getProtocols({ block }: { block: string } = defaultRPCOptions): Promise<ProtocolsResponse> {\n    return this.httpBackend.createRequest<ProtocolsResponse>({\n      url: this.createURL(`/chains/${this.chain}/blocks/${block}/protocols`),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param tx_rollup_id the transaction rollup ID\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the state of a rollup\n   *\n   * @see https://tezos.gitlab.io/jakarta/rpc.html#get-block-id-context-tx-rollup-tx-rollup-id-state\n   */\n\n  async getTxRollupState(\n    txRollupId: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<TxRollupStateResponse> {\n    return this.httpBackend.createRequest<TxRollupStateResponse>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/tx_rollup/${txRollupId}/state`\n      ),\n      method: 'GET',\n    });\n  }\n\n  /**\n   *\n   * @param tx_rollup_id the transaction rollup ID\n   * @param block_level the block level\n   * @param options contains generic configuration for rpc calls\n   *\n   * @description Access the inbox of a transaction rollup\n   *\n   * @see https://tezos.gitlab.io/jakarta/rpc.html#get-block-id-context-tx-rollup-tx-rollup-id-inbox-block-level\n   */\n\n  async getTxRollupInbox(\n    txRollupId: string,\n    blockLevel: string,\n    { block }: { block: string } = defaultRPCOptions\n  ): Promise<TxRollupInboxResponse | null> {\n    return this.httpBackend.createRequest<TxRollupInboxResponse>({\n      url: this.createURL(\n        `/chains/${this.chain}/blocks/${block}/context/tx_rollup/${txRollupId}/inbox/${blockLevel}`\n      ),\n      method: 'GET',\n    });\n  }\n}\n"],"names":[],"mappings":"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"}