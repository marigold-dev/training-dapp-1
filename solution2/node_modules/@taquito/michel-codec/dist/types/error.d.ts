/**
 *  @category Error
 *  @description Error that indicates an invalid contract being passed or used
 */
export declare class InvalidContractError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid type expression being passed or used
 */
export declare class InvalidTypeExpressionError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid data expression being passed or used
 */
export declare class InvalidDataExpressionError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates an invalid contract entrypoint being referenced or passed
 */
export declare class InvalidEntrypointError extends Error {
    entrypoint?: string | undefined;
    name: string;
    constructor(entrypoint?: string | undefined);
}
/**
 *  @category Error
 *  @description Error that indicates a failure happening when trying to encode Tezos ID
 */
export declare class TezosIdEncodeError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates a general error happening when trying to create a LongInteger
 */
export declare class LongIntegerError extends Error {
    message: string;
    name: string;
    constructor(message: string);
}
/**
 *  @category Error
 *  @description Error that indicates a failure occurring when trying to parse a hex byte
 */
export declare class HexParseError extends Error {
    hexByte: string;
    name: string;
    constructor(hexByte: string);
}
