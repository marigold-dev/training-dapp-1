"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HexParseError = exports.LongIntegerError = exports.TezosIdEncodeError = exports.InvalidEntrypointError = exports.InvalidDataExpressionError = exports.InvalidTypeExpressionError = exports.InvalidContractError = void 0;
/**
 *  @category Error
 *  @description Error that indicates an invalid contract being passed or used
 */
class InvalidContractError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidContractError';
    }
}
exports.InvalidContractError = InvalidContractError;
/**
 *  @category Error
 *  @description Error that indicates an invalid type expression being passed or used
 */
class InvalidTypeExpressionError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidTypeExpressionError';
    }
}
exports.InvalidTypeExpressionError = InvalidTypeExpressionError;
/**
 *  @category Error
 *  @description Error that indicates an invalid data expression being passed or used
 */
class InvalidDataExpressionError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidDataExpressionError';
    }
}
exports.InvalidDataExpressionError = InvalidDataExpressionError;
/**
 *  @category Error
 *  @description Error that indicates an invalid contract entrypoint being referenced or passed
 */
class InvalidEntrypointError extends Error {
    constructor(entrypoint) {
        super(`Contract has no entrypoint named: '${entrypoint}'`);
        this.entrypoint = entrypoint;
        this.name = 'InvalidEntrypointError';
    }
}
exports.InvalidEntrypointError = InvalidEntrypointError;
/**
 *  @category Error
 *  @description Error that indicates a failure happening when trying to encode Tezos ID
 */
class TezosIdEncodeError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'TezosIdEncodeError';
    }
}
exports.TezosIdEncodeError = TezosIdEncodeError;
/**
 *  @category Error
 *  @description Error that indicates a general error happening when trying to create a LongInteger
 */
class LongIntegerError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'LongIntegerError';
    }
}
exports.LongIntegerError = LongIntegerError;
/**
 *  @category Error
 *  @description Error that indicates a failure occurring when trying to parse a hex byte
 */
class HexParseError extends Error {
    constructor(hexByte) {
        super(`Unable to parse hex byte: ${hexByte}`);
        this.hexByte = hexByte;
        this.name = 'HexParseError';
    }
}
exports.HexParseError = HexParseError;
//# sourceMappingURL=error.js.map