{"version":3,"file":"taquito-michel-codec.umd.js","sources":["../src/micheline.ts","../src/scan.ts","../src/michelson-types.ts","../src/macros.ts","../src/global-constants.ts","../src/micheline-parser.ts","../src/micheline-emitter.ts","../src/base58.ts","../src/error.ts","../src/utils.ts","../src/michelson-validator.ts","../src/binary.ts","../src/michelson-typecheck.ts","../src/michelson-contract.ts","../src/formatters.ts","../src/version.ts"],"sourcesContent":["// Michelson abstract syntax tree types https://tezos.gitlab.io/whitedoc/michelson.html#concrete-syntax\n\nexport type SourceReference = {\n  first: number;\n  last: number;\n  macro?: Expr;\n  globalConstant?: Expr;\n};\n\nexport const sourceReference: unique symbol = Symbol('source_reference');\n\nexport interface Node {\n  [sourceReference]?: SourceReference;\n}\n\n/**\n * An AST node representing Michelson string literal.\n */\nexport interface StringLiteral extends Node {\n  string: string;\n}\n\n/**\n * An AST node representing Michelson int literal.\n */\nexport interface IntLiteral<T extends string = string> extends Node {\n  int: T;\n}\n\n/**\n * An AST node representing Michelson bytes literal.\n */\nexport interface BytesLiteral extends Node {\n  bytes: string;\n}\n\n/**\n * An AST node representing Michelson primitive.\n */\nexport interface Prim<PT extends string = string, AT extends Expr[] = Expr[]> extends Node {\n  prim: PT;\n  args?: AT;\n  annots?: string[];\n}\n\nexport type List<T extends Expr> = T[] & Node;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface ExprList extends List<Expr> {}\n\n/**\n * An AST node representing valid Michelson expression. Directly corresponds to JSON-encoded Michelson node\n */\n\nexport type Expr = Prim | StringLiteral | IntLiteral | BytesLiteral | ExprList;\n","/**\n *  @category Error\n *  @description Error that indicates a failure when performing the scan step when parsing Michelson\n */\nexport class ScanError extends Error {\n  constructor(public src: string, public idx: number, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, ScanError.prototype);\n  }\n}\n\nexport enum Literal {\n  Comment,\n  Number,\n  String,\n  Bytes,\n  Ident,\n}\n\nexport type TokenType = '(' | ')' | '{' | '}' | ';' | Literal;\n\nconst isSpace = new RegExp('\\\\s');\nconst isIdentStart = new RegExp('[:@%_A-Za-z]');\nconst isIdent = new RegExp('[@%_\\\\.A-Za-z0-9]');\nconst isDigit = new RegExp('[0-9]');\nconst isHex = new RegExp('[0-9a-fA-F]');\n\nexport interface Token {\n  t: TokenType;\n  v: string;\n  first: number;\n  last: number;\n}\n\nexport function* scan(src: string, scanComments = false): Generator<Token, void> {\n  let i = 0;\n  while (i < src.length) {\n    // Skip space\n    while (i < src.length && isSpace.test(src[i])) {\n      i++;\n    }\n    if (i === src.length) {\n      return;\n    }\n\n    const s = src[i];\n    const start = i;\n    if (isIdentStart.test(s)) {\n      // Identifier\n      i++;\n      while (i < src.length && isIdent.test(src[i])) {\n        i++;\n      }\n      yield { t: Literal.Ident, v: src.slice(start, i), first: start, last: i };\n    } else if (src.length - i > 1 && src.substr(i, 2) === '0x') {\n      // Bytes\n      i += 2;\n      while (i < src.length && isHex.test(src[i])) {\n        i++;\n      }\n      if (((i - start) & 1) !== 0) {\n        throw new ScanError(src, i, 'Bytes literal length is expected to be power of two');\n      }\n      yield { t: Literal.Bytes, v: src.slice(start, i), first: start, last: i };\n    } else if (isDigit.test(s) || s === '-') {\n      // Number\n      if (s === '-') {\n        i++;\n      }\n      const ii = i;\n      while (i < src.length && isDigit.test(src[i])) {\n        i++;\n      }\n      if (ii === i) {\n        throw new ScanError(src, i, 'Number literal is too short');\n      }\n      yield { t: Literal.Number, v: src.slice(start, i), first: start, last: i };\n    } else if (s === '\"') {\n      // String\n      i++;\n      let esc = false;\n      for (; i < src.length && (esc || src[i] !== '\"'); i++) {\n        if (!esc && src[i] === '\\\\') {\n          esc = true;\n        } else {\n          esc = false;\n        }\n      }\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated string literal');\n      }\n      i++;\n      yield { t: Literal.String, v: src.slice(start, i), first: start, last: i };\n    } else if (s === '#') {\n      // Comment\n      i++;\n      while (i < src.length && src[i] !== '\\n') {\n        i++;\n      }\n      if (scanComments) {\n        yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n      }\n    } else if (src.length - i > 1 && src.substr(i, 2) === '/*') {\n      // C style comment\n      i += 2;\n      while (i < src.length && !(src.length - i > 1 && src.substr(i, 2) === '*/')) {\n        i++;\n      }\n      if (i === src.length) {\n        throw new ScanError(src, i, 'Unterminated C style comment');\n      }\n      i += 2;\n      if (scanComments) {\n        yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n      }\n    } else if (s === '(' || s === ')' || s === '{' || s === '}' || s === ';') {\n      i++;\n      yield { t: s, v: s, first: start, last: i };\n    } else {\n      throw new ScanError(src, i, `Invalid character at offset ${i}: \\`${s}'`);\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { Prim, Expr, IntLiteral, StringLiteral, BytesLiteral, List, Node } from './micheline';\n\ninterface Prim0<PT extends string = string> extends Prim<PT> {\n  args?: never;\n}\ninterface PrimX<PT extends string = string, AT extends Expr[] = Expr[]> extends Prim<PT, AT> {\n  args: AT;\n}\n\n// Instructions\ntype MichelsonNoArgInstructionID =\n  | 'ABS'\n  | 'ADD'\n  | 'ADDRESS'\n  | 'AMOUNT'\n  | 'AND'\n  | 'APPLY'\n  | 'BALANCE'\n  | 'BLAKE2B'\n  | 'CAR'\n  | 'CDR'\n  | 'CHAIN_ID'\n  | 'CHECK_SIGNATURE'\n  | 'COMPARE'\n  | 'CONCAT'\n  | 'CONS'\n  | 'EDIV'\n  | 'EQ'\n  | 'EXEC'\n  | 'FAILWITH'\n  | 'GE'\n  | 'GET_AND_UPDATE'\n  | 'GT'\n  | 'HASH_KEY'\n  | 'IMPLICIT_ACCOUNT'\n  | 'INT'\n  | 'ISNAT'\n  | 'JOIN_TICKETS'\n  | 'KECCAK'\n  | 'LE'\n  | 'LEVEL'\n  | 'LSL'\n  | 'LSR'\n  | 'LT'\n  | 'MEM'\n  | 'MUL'\n  | 'NEG'\n  | 'NEQ'\n  | 'NEVER'\n  | 'NOT'\n  | 'NOW'\n  | 'OR'\n  | 'PACK'\n  | 'PAIRING_CHECK'\n  | 'READ_TICKET'\n  | 'SAPLING_VERIFY_UPDATE'\n  | 'SELF'\n  | 'SELF_ADDRESS'\n  | 'SENDER'\n  | 'SET_DELEGATE'\n  | 'SHA256'\n  | 'SHA3'\n  | 'SHA512'\n  | 'SIZE'\n  | 'SLICE'\n  | 'SOME'\n  | 'SOURCE'\n  | 'SPLIT_TICKET'\n  | 'SUB'\n  | 'SUB_MUTEZ'\n  | 'SWAP'\n  | 'TICKET'\n  | 'TOTAL_VOTING_POWER'\n  | 'TRANSFER_TOKENS'\n  | 'UNIT'\n  | 'VOTING_POWER'\n  | 'XOR'\n  | 'RENAME'\n  | 'OPEN_CHEST'\n  | 'MIN_BLOCK_TIME';\n\ntype MichelsonRegularInstructionID =\n  | 'CONTRACT'\n  | 'CREATE_CONTRACT'\n  | 'DIG'\n  | 'DIP'\n  | 'DROP'\n  | 'DUG'\n  | 'DUP'\n  | 'EMPTY_BIG_MAP'\n  | 'EMPTY_MAP'\n  | 'EMPTY_SET'\n  | 'GET'\n  | 'IF'\n  | 'IF_CONS'\n  | 'IF_LEFT'\n  | 'IF_NONE'\n  | 'ITER'\n  | 'LAMBDA'\n  | 'LEFT'\n  | 'LOOP'\n  | 'LOOP_LEFT'\n  | 'MAP'\n  | 'NIL'\n  | 'NONE'\n  | 'PAIR'\n  | 'PUSH'\n  | 'RIGHT'\n  | 'SAPLING_EMPTY_STATE'\n  | 'UNPACK'\n  | 'UNPAIR'\n  | 'UPDATE'\n  | 'CAST'\n  | 'VIEW'\n  // legacy\n  | 'CREATE_ACCOUNT'\n  | 'STEPS_TO_QUOTA';\n\nexport type MichelsonInstructionID = MichelsonNoArgInstructionID | MichelsonRegularInstructionID;\ntype InstrPrim<PT extends MichelsonInstructionID, AT extends Expr[]> = Prim<PT, AT>;\ntype Instr0<PT extends MichelsonNoArgInstructionID> = Prim0<PT>;\ntype InstrX<PT extends MichelsonRegularInstructionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonCode = InstructionList | MichelsonInstruction;\nexport interface InstructionList extends List<MichelsonCode> {}\n\nexport type MichelsonNoArgInstruction = Instr0<MichelsonNoArgInstructionID>;\nexport type MichelsonInstruction =\n  | MichelsonNoArgInstruction\n  | InstrX<'DIG' | 'DUG' | 'SAPLING_EMPTY_STATE', [IntLiteral]>\n  | InstrX<'NONE' | 'LEFT' | 'RIGHT' | 'NIL' | 'CAST', [MichelsonType]>\n  | InstrX<'IF_NONE' | 'IF_LEFT' | 'IF_CONS' | 'IF', [InstructionList, InstructionList]>\n  | InstrX<'MAP' | 'ITER' | 'LOOP' | 'LOOP_LEFT' | 'DIP', [InstructionList]>\n  | InstrX<'UNPACK', [MichelsonType]>\n  | InstrX<'CONTRACT', [MichelsonType]>\n  | InstrX<'CREATE_CONTRACT', [MichelsonContract]>\n  | InstrX<'PUSH', [MichelsonType, MichelsonData]>\n  | InstrX<'EMPTY_SET', [MichelsonType]>\n  | InstrX<'EMPTY_MAP', [MichelsonType, MichelsonType]>\n  | InstrX<'EMPTY_BIG_MAP', [MichelsonType, MichelsonType]>\n  | InstrX<'LAMBDA', [MichelsonType, MichelsonType, InstructionList]>\n  | InstrX<'DIP', [IntLiteral, InstructionList] | [InstructionList]>\n  | InstrX<'VIEW', [StringLiteral, MichelsonType]>\n  | InstrPrim<'DROP' | 'PAIR' | 'UNPAIR' | 'DUP' | 'GET' | 'UPDATE', [IntLiteral]>;\n\n// Types\n\nexport type MichelsonSimpleComparableTypeID =\n  | 'string'\n  | 'nat'\n  | 'int'\n  | 'bytes'\n  | 'bool'\n  | 'mutez'\n  | 'key_hash'\n  | 'address'\n  | 'timestamp'\n  | 'never'\n  | 'key'\n  | 'unit'\n  | 'signature'\n  | 'chain_id'\n  | 'tx_rollup_l2_address';\n\nexport type MichelsonTypeID =\n  | MichelsonSimpleComparableTypeID\n  | 'option'\n  | 'list'\n  | 'set'\n  | 'contract'\n  | 'operation'\n  | 'pair'\n  | 'or'\n  | 'lambda'\n  | 'map'\n  | 'big_map'\n  | 'sapling_transaction'\n  | 'sapling_state'\n  | 'ticket'\n  | 'bls12_381_g1'\n  | 'bls12_381_g2'\n  | 'bls12_381_fr'\n  | 'chest_key'\n  | 'chest';\n\ntype Type0<PT extends MichelsonTypeID> = Prim0<PT>;\ntype TypeX<PT extends MichelsonTypeID, AT extends Expr[]> = PrimX<PT, AT>;\n\n// Michelson types\n\nexport const refContract: unique symbol = Symbol('ref_contract');\nexport interface MichelsonTypeAddress extends Type0<'address'> {\n  [refContract]?: MichelsonTypeContract<MichelsonType>;\n}\n\nexport type MichelsonTypeInt = Type0<'int'>;\nexport type MichelsonTypeNat = Type0<'nat'>;\nexport type MichelsonTypeString = Type0<'string'>;\nexport type MichelsonTypeBytes = Type0<'bytes'>;\nexport type MichelsonTypeMutez = Type0<'mutez'>;\nexport type MichelsonTypeBool = Type0<'bool'>;\nexport type MichelsonTypeKeyHash = Type0<'key_hash'>;\nexport type MichelsonTypeTimestamp = Type0<'timestamp'>;\nexport type MichelsonTypeKey = Type0<'key'>;\nexport type MichelsonTypeUnit = Type0<'unit'>;\nexport type MichelsonTypeSignature = Type0<'signature'>;\nexport type MichelsonTypeOperation = Type0<'operation'>;\nexport type MichelsonTypeChainID = Type0<'chain_id'>;\nexport type MichelsonTypeNever = Type0<'never'>;\nexport type MichelsonTypeBLS12_381_G1 = Type0<'bls12_381_g1'>;\nexport type MichelsonTypeBLS12_381_G2 = Type0<'bls12_381_g2'>;\nexport type MichelsonTypeBLS12_381_FR = Type0<'bls12_381_fr'>;\nexport type MichelsonTypeChestKey = Type0<'chest_key'>;\nexport type MichelsonTypeChest = Type0<'chest'>;\n\ntype TypeList<T extends MichelsonType[]> = T & Node;\nexport type MichelsonTypePair<T extends MichelsonType[]> = TypeX<'pair', T> | TypeList<T>;\n\nexport interface MichelsonTypeOption<T extends MichelsonType> extends TypeX<'option', [T]> {}\nexport interface MichelsonTypeList<T extends MichelsonType> extends TypeX<'list', [T]> {}\nexport interface MichelsonTypeContract<T extends MichelsonType> extends TypeX<'contract', [T]> {}\nexport interface MichelsonTypeOr<T extends [MichelsonType, MichelsonType]> extends TypeX<'or', T> {}\nexport interface MichelsonTypeLambda<Arg extends MichelsonType, Ret extends MichelsonType>\n  extends TypeX<'lambda', [Arg, Ret]> {}\nexport interface MichelsonTypeSet<T extends MichelsonType> extends TypeX<'set', [T]> {}\nexport interface MichelsonTypeMap<K extends MichelsonType, V extends MichelsonType>\n  extends TypeX<'map', [K, V]> {}\nexport interface MichelsonTypeBigMap<K extends MichelsonType, V extends MichelsonType>\n  extends TypeX<'big_map', [K, V]> {}\nexport interface MichelsonTypeSaplingState<S extends string = string>\n  extends TypeX<'sapling_state', [IntLiteral<S>]> {}\nexport interface MichelsonTypeSaplingTransaction<S extends string = string>\n  extends TypeX<'sapling_transaction', [IntLiteral<S>]> {}\nexport interface MichelsonTypeTicket<T extends MichelsonType> extends TypeX<'ticket', [T]> {}\n\nexport type MichelsonType<T extends MichelsonTypeID = MichelsonTypeID> = T extends 'int'\n  ? MichelsonTypeInt\n  : T extends 'nat'\n  ? MichelsonTypeNat\n  : T extends 'string'\n  ? MichelsonTypeString\n  : T extends 'bytes'\n  ? MichelsonTypeBytes\n  : T extends 'mutez'\n  ? MichelsonTypeMutez\n  : T extends 'bool'\n  ? MichelsonTypeBool\n  : T extends 'key_hash'\n  ? MichelsonTypeKeyHash\n  : T extends 'timestamp'\n  ? MichelsonTypeTimestamp\n  : T extends 'address'\n  ? MichelsonTypeAddress\n  : T extends 'key'\n  ? MichelsonTypeKey\n  : T extends 'unit'\n  ? MichelsonTypeUnit\n  : T extends 'signature'\n  ? MichelsonTypeSignature\n  : T extends 'operation'\n  ? MichelsonTypeOperation\n  : T extends 'chain_id'\n  ? MichelsonTypeChainID\n  : T extends 'option'\n  ? MichelsonTypeOption<MichelsonType>\n  : T extends 'list'\n  ? MichelsonTypeList<MichelsonType>\n  : T extends 'contract'\n  ? MichelsonTypeContract<MichelsonType>\n  : T extends 'ticket'\n  ? MichelsonTypeTicket<MichelsonType>\n  : T extends 'pair'\n  ? MichelsonTypePair<MichelsonType[]>\n  : T extends 'or'\n  ? MichelsonTypeOr<[MichelsonType, MichelsonType]>\n  : T extends 'lambda'\n  ? MichelsonTypeLambda<MichelsonType, MichelsonType>\n  : T extends 'set'\n  ? MichelsonTypeSet<MichelsonType>\n  : T extends 'map'\n  ? MichelsonTypeMap<MichelsonType, MichelsonType>\n  : T extends 'big_map'\n  ? MichelsonTypeBigMap<MichelsonType, MichelsonType>\n  : T extends 'never'\n  ? MichelsonTypeNever\n  : T extends 'bls12_381_g1'\n  ? MichelsonTypeBLS12_381_G1\n  : T extends 'bls12_381_g2'\n  ? MichelsonTypeBLS12_381_G2\n  : T extends 'bls12_381_fr'\n  ? MichelsonTypeBLS12_381_FR\n  : T extends 'sapling_transaction'\n  ? MichelsonTypeSaplingTransaction\n  : T extends 'sapling_state'\n  ? MichelsonTypeSaplingState\n  : T extends 'chest_key'\n  ? MichelsonTypeChestKey\n  : MichelsonTypeChest;\n\n// Data\n\nexport type MichelsonDataID =\n  | 'Unit'\n  | 'True'\n  | 'False'\n  | 'None'\n  | 'Pair'\n  | 'Left'\n  | 'Right'\n  | 'Some';\n\ntype Data0<PT extends MichelsonDataID> = Prim0<PT>;\ntype DataX<PT extends MichelsonDataID, AT extends MichelsonData[]> = PrimX<PT, AT>;\n\nexport type MichelsonDataOption = DataX<'Some', [MichelsonData]> | Data0<'None'>;\nexport type MichelsonDataOr = DataX<'Left' | 'Right', [MichelsonData]>;\ntype DataList<T extends MichelsonData[]> = T & Node;\nexport type MichelsonDataPair<T extends MichelsonData[]> = DataX<'Pair', T> | DataList<T>;\nexport type MichelsonMapElt = PrimX<'Elt', [MichelsonData, MichelsonData]>;\nexport type MichelsonMapEltList = List<MichelsonMapElt>;\n\nexport type MichelsonData =\n  | IntLiteral\n  | StringLiteral\n  | BytesLiteral\n  | Data0<'Unit' | 'True' | 'False'>\n  | MichelsonDataOption\n  | MichelsonDataOr\n  | DataList<MichelsonData[]>\n  | MichelsonDataPair<MichelsonData[]>\n  | InstructionList\n  | MichelsonMapEltList;\n\n// Top level script sections\n\nexport type MichelsonSectionID = 'parameter' | 'storage' | 'code' | 'view';\ntype SectionPrim<PT extends MichelsonSectionID, AT extends Expr[]> = PrimX<PT, AT>;\n\nexport type MichelsonContractParameter = SectionPrim<'parameter', [MichelsonType]>;\nexport type MichelsonContractStorage = SectionPrim<'storage', [MichelsonType]>;\nexport type MichelsonContractCode = SectionPrim<'code', [InstructionList]>;\nexport type MichelsonContractView = SectionPrim<\n  'view',\n  [StringLiteral, MichelsonType, MichelsonType, InstructionList]\n>;\n\nexport type MichelsonContract = MichelsonContractSection[];\n\nexport type MichelsonContractSection<T extends MichelsonSectionID = MichelsonSectionID> =\n  T extends 'parameter'\n    ? MichelsonContractParameter\n    : T extends 'storage'\n    ? MichelsonContractStorage\n    : T extends 'view'\n    ? MichelsonContractView\n    : MichelsonContractCode;\n\n// Code analysis types\nexport interface MichelsonTypeFailed {\n  failed: MichelsonType;\n  level: number;\n}\n\nexport type MichelsonReturnType = MichelsonType[] | MichelsonTypeFailed;\n\nexport enum Protocol {\n  Ps9mPmXa = 'Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P',\n  PtCJ7pwo = 'PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY',\n  PsYLVpVv = 'PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt',\n  PsddFKi3 = 'PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP',\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n  PsDELPH1 = 'PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo',\n  PtEdoTez = 'PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq',\n  PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n  PsFLoren = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PtGRANAD = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtGRANADs = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtHangzH = 'PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r',\n  PtHangz2 = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx',\n  PsiThaCa = 'PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP',\n  Psithaca2 = 'Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A',\n  PtJakarta = 'PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw',\n  PtJakart2 = 'PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY',\n  ProtoALpha = 'ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK', // temporary protocol hash\n}\n\nexport const DefaultProtocol = Protocol.Psithaca2;\n\nexport type ProtocolID = `${Protocol}`;\n\nconst protoLevel: Record<ProtocolID, number> = {\n  Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P: 0,\n  PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY: 1,\n  PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt: 2,\n  PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP: 3,\n  Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd: 4,\n  PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU: 5,\n  PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS: 5,\n  PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb: 6,\n  PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo: 7,\n  PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq: 8,\n  PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA: 8,\n  PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i: 9,\n  PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV: 10,\n  PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r: 11,\n  PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx: 11,\n  PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP: 12,\n  Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A: 12,\n  PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw: 13,\n  PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY: 13,\n  ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK: 14,\n};\n\nexport function ProtoGreaterOfEqual(a: ProtocolID, b: ProtocolID): boolean {\n  return protoLevel[a] >= protoLevel[b];\n}\n\nexport function ProtoInferiorTo(a: ProtocolID, b: ProtocolID): boolean {\n  return protoLevel[a] < protoLevel[b];\n}\n\nexport interface ProtocolOptions {\n  protocol?: ProtocolID;\n}\n","import { Prim, Expr, IntLiteral } from './micheline';\nimport { DefaultProtocol, Protocol, ProtocolOptions, ProtoInferiorTo } from './michelson-types';\nimport { Tuple, NoArgs, ReqArgs, NoAnnots } from './utils';\n\n/**\n *  @category Error\n *  @description Indicates that an error has occurred preventing macros from being expanded in a plain Michelson input\n */\nexport class MacroError extends Error {\n  constructor(public prim: Prim, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, MacroError.prototype);\n  }\n}\n\nfunction assertArgs<N extends number>(\n  ex: Prim,\n  n: N\n): ex is N extends 0 ? NoArgs<Prim<string>> : ReqArgs<Prim<string, Tuple<N, Expr>>> {\n  if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n    return true;\n  }\n  throw new MacroError(ex, `macro ${ex.prim} expects ${n} arguments, was given ${ex.args?.length}`);\n}\n\nfunction assertNoAnnots(ex: Prim): ex is NoAnnots<Prim> {\n  if (ex.annots === undefined) {\n    return true;\n  }\n  throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${ex.annots}`);\n}\n\nfunction assertIntArg(ex: Prim, arg: Expr): arg is IntLiteral {\n  if ('int' in arg) {\n    return true;\n  }\n  throw new MacroError(ex, `macro ${ex.prim} expects int argument`);\n}\n\ntype PT = [number, [string | null, string | null]];\n\nfunction parsePairUnpairExpr(\n  p: Prim,\n  expr: string,\n  annotations: string[],\n  agg: (l: PT[] | undefined, r: PT[] | undefined, top: PT) => PT[]\n): { r: PT[]; n: number; an: number } {\n  let i = 0;\n  let ai = 0;\n  const ann: [string | null, string | null] = [null, null];\n\n  // Left expression\n  let lexpr: PT[] | undefined;\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n  let c = expr[i++];\n  switch (c) {\n    case 'P': {\n      const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n      lexpr = r;\n      i += n;\n      ai += an;\n      break;\n    }\n    case 'A':\n      if (ai !== annotations.length) {\n        ann[0] = annotations[ai++];\n      }\n      break;\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n\n  // Right expression\n  let rexpr: PT[] | undefined;\n  if (i === expr.length) {\n    throw new MacroError(p, `unexpected end: ${p.prim}`);\n  }\n  c = expr[i++];\n  switch (c) {\n    case 'P': {\n      const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n      rexpr = r.map<PT>(([v, a]) => [v + 1, a]);\n      i += n;\n      ai += an;\n      break;\n    }\n    case 'I':\n      if (ai !== annotations.length) {\n        ann[1] = annotations[ai++];\n      }\n      break;\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n\n  return { r: agg(lexpr, rexpr, [0, ann]), n: i, an: ai };\n}\n\nfunction parseSetMapCadr(p: Prim, expr: string, vann: string[], term: { a: Expr; d: Expr }): Expr {\n  const c = expr[0];\n  switch (c) {\n    case 'A':\n      return expr.length > 1\n        ? [\n            { prim: 'DUP' },\n            {\n              prim: 'DIP',\n              args: [\n                [{ prim: 'CAR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n              ],\n            },\n            { prim: 'CDR', annots: ['@%%'] },\n            { prim: 'SWAP' },\n            { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n          ]\n        : term.a;\n\n    case 'D':\n      return expr.length > 1\n        ? [\n            { prim: 'DUP' },\n            {\n              prim: 'DIP',\n              args: [\n                [{ prim: 'CDR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n              ],\n            },\n            { prim: 'CAR', annots: ['@%%'] },\n            { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n          ]\n        : term.d;\n\n    default:\n      throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n  }\n}\n\nfunction trimLast<T>(a: T[], v: T): T[] {\n  let l = a.length;\n  while (l > 0 && a[l - 1] === v) {\n    l--;\n  }\n  return a.slice(0, l);\n}\n\nfunction filterAnnotations(a?: string[]): {\n  fields: string[];\n  rest: string[];\n} {\n  const fields: string[] = [];\n  const rest: string[] = [];\n  if (a !== undefined) {\n    for (const v of a) {\n      (v.length !== 0 && v[0] === '%' ? fields : rest).push(v);\n    }\n  }\n  return { fields, rest };\n}\n\nfunction mkPrim({ prim, annots, args }: Prim): Prim {\n  return {\n    prim,\n    ...(annots && { annots }),\n    ...(args && { args }),\n  };\n}\n\nconst pairRe = /^P[PAI]{3,}R$/;\nconst unpairRe = /^UNP[PAI]{2,}R$/;\nconst cadrRe = /^C[AD]{2,}R$/;\nconst setCadrRe = /^SET_C[AD]+R$/;\nconst mapCadrRe = /^MAP_C[AD]+R$/;\nconst diipRe = /^DI{2,}P$/;\nconst duupRe = /^DU+P$/;\n\nexport function expandMacros(ex: Prim, opt?: ProtocolOptions): Expr {\n  const proto = opt?.protocol || DefaultProtocol;\n\n  function mayRename(annots?: string[]): Prim[] {\n    return annots !== undefined ? [{ prim: 'RENAME', annots }] : [];\n  }\n\n  switch (ex.prim) {\n    // Compare\n    case 'CMPEQ':\n    case 'CMPNEQ':\n    case 'CMPLT':\n    case 'CMPGT':\n    case 'CMPLE':\n    case 'CMPGE':\n      if (assertArgs(ex, 0)) {\n        return [{ prim: 'COMPARE' }, mkPrim({ prim: ex.prim.slice(3), annots: ex.annots })];\n      }\n      break;\n\n    case 'IFEQ':\n    case 'IFNEQ':\n    case 'IFLT':\n    case 'IFGT':\n    case 'IFLE':\n    case 'IFGE':\n      if (assertArgs(ex, 2)) {\n        return [\n          { prim: ex.prim.slice(2) },\n          mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n        ];\n      }\n      break;\n\n    case 'IFCMPEQ':\n    case 'IFCMPNEQ':\n    case 'IFCMPLT':\n    case 'IFCMPGT':\n    case 'IFCMPLE':\n    case 'IFCMPGE':\n      if (assertArgs(ex, 2)) {\n        return [\n          { prim: 'COMPARE' },\n          { prim: ex.prim.slice(5) },\n          mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n        ];\n      }\n      break;\n\n    // Fail\n    case 'FAIL':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [{ prim: 'UNIT' }, { prim: 'FAILWITH' }];\n      }\n      break;\n\n    // Assertion macros\n    case 'ASSERT':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_EQ':\n    case 'ASSERT_NEQ':\n    case 'ASSERT_LT':\n    case 'ASSERT_GT':\n    case 'ASSERT_LE':\n    case 'ASSERT_GE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          { prim: ex.prim.slice(7) },\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_CMPEQ':\n    case 'ASSERT_CMPNEQ':\n    case 'ASSERT_CMPLT':\n    case 'ASSERT_CMPGT':\n    case 'ASSERT_CMPLE':\n    case 'ASSERT_CMPGE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          [{ prim: 'COMPARE' }, { prim: ex.prim.slice(10) }],\n          {\n            prim: 'IF',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_NONE':\n      if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n        return [\n          {\n            prim: 'IF_NONE',\n            args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_SOME':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_NONE',\n            args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_LEFT':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_LEFT',\n            args: [mayRename(ex.annots), [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n          },\n        ];\n      }\n      break;\n\n    case 'ASSERT_RIGHT':\n      if (assertArgs(ex, 0)) {\n        return [\n          {\n            prim: 'IF_LEFT',\n            args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n          },\n        ];\n      }\n      break;\n\n    // Syntactic conveniences\n\n    case 'IF_SOME':\n      if (assertArgs(ex, 2)) {\n        return [mkPrim({ prim: 'IF_NONE', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n      }\n      break;\n\n    case 'IF_RIGHT':\n      if (assertArgs(ex, 2)) {\n        return [mkPrim({ prim: 'IF_LEFT', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n      }\n      break;\n\n    // CAR/CDR n\n    case 'CAR':\n    case 'CDR':\n      if (ex.args !== undefined) {\n        if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          const n = parseInt(ex.args[0].int, 10);\n          return mkPrim({\n            prim: 'GET',\n            args: [{ int: ex.prim === 'CAR' ? String(n * 2 + 1) : String(n * 2) }],\n            annots: ex.annots,\n          });\n        }\n      } else {\n        return ex;\n      }\n  }\n\n  // More syntactic conveniences\n\n  // PAPPAIIR macro\n  if (pairRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const { fields, rest } = filterAnnotations(ex.annots);\n      const { r } = parsePairUnpairExpr(ex, ex.prim.slice(1), fields, (l, r, top) => [\n        ...(l || []),\n        ...(r || []),\n        top,\n      ]);\n\n      return r.map(([v, a], i) => {\n        const ann = [\n          ...trimLast(a, null).map((v) => (v === null ? '%' : v)),\n          ...(v === 0 && i === r.length - 1 ? rest : []),\n        ];\n\n        const leaf = mkPrim({ prim: 'PAIR', annots: ann.length !== 0 ? ann : undefined });\n\n        return v === 0\n          ? leaf\n          : {\n              prim: 'DIP',\n              args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n            };\n      });\n    }\n  }\n\n  // UNPAPPAIIR macro\n  if (unpairRe.test(ex.prim)) {\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk) && assertArgs(ex, 0)) {\n      const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), ex.annots || [], (l, r, top) => [\n        top,\n        ...(r || []),\n        ...(l || []),\n      ]);\n      return r.map(([v, a]) => {\n        const leaf: Prim[] = [\n          { prim: 'DUP' },\n          mkPrim({ prim: 'CAR', annots: a[0] !== null ? [a[0]] : undefined }),\n          {\n            prim: 'DIP',\n            args: [[mkPrim({ prim: 'CDR', annots: a[1] !== null ? [a[1]] : undefined })]],\n          },\n        ];\n\n        return v === 0\n          ? leaf\n          : {\n              prim: 'DIP',\n              args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n            };\n      });\n    } else {\n      if (ex.prim === 'UNPAIR') {\n        return ex;\n      }\n      if (assertArgs(ex, 0)) {\n        // 008_edo: annotations are deprecated\n        const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), [], (l, r, top) => [\n          top,\n          ...(r || []),\n          ...(l || []),\n        ]);\n        return r.map(([v]) => {\n          const leaf = mkPrim({\n            prim: 'UNPAIR',\n          });\n\n          return v === 0\n            ? leaf\n            : {\n                prim: 'DIP',\n                args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n              };\n        });\n      }\n    }\n  }\n\n  // C[AD]+R macro\n  if (cadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const ch = [...ex.prim.slice(1, ex.prim.length - 1)];\n\n      return ch.map<Prim>((c, i) => {\n        const ann = i === ch.length - 1 ? ex.annots : undefined;\n        switch (c) {\n          case 'A':\n            return mkPrim({ prim: 'CAR', annots: ann });\n          case 'D':\n            return mkPrim({ prim: 'CDR', annots: ann });\n          default:\n            throw new MacroError(ex, `unexpected character: ${c}`);\n        }\n      });\n    }\n  }\n\n  // SET_C[AD]+R macro\n  if (setCadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 0)) {\n      const { fields, rest } = filterAnnotations(ex.annots);\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term =\n        fields.length !== 0\n          ? {\n              a: [\n                { prim: 'DUP' },\n                { prim: 'CAR', annots: fields },\n                { prim: 'DROP' },\n                { prim: 'CDR', annots: ['@%%'] },\n                { prim: 'SWAP' },\n                { prim: 'PAIR', annots: [fields[0], '%@'] },\n              ],\n              d: [\n                { prim: 'DUP' },\n                { prim: 'CDR', annots: fields },\n                { prim: 'DROP' },\n                { prim: 'CAR', annots: ['@%%'] },\n                { prim: 'PAIR', annots: ['%@', fields[0]] },\n              ],\n            }\n          : {\n              a: [\n                { prim: 'CDR', annots: ['@%%'] },\n                { prim: 'SWAP' },\n                { prim: 'PAIR', annots: ['%', '%@'] },\n              ],\n              d: [\n                { prim: 'CAR', annots: ['@%%'] },\n                { prim: 'PAIR', annots: ['%@', '%'] },\n              ],\n            };\n\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), rest, term);\n    }\n  }\n\n  // MAP_C[AD]+R macro\n  if (mapCadrRe.test(ex.prim)) {\n    if (assertArgs(ex, 1)) {\n      const { fields } = filterAnnotations(ex.annots);\n      if (fields.length > 1) {\n        throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n      }\n\n      const term = {\n        a: [\n          { prim: 'DUP' },\n          { prim: 'CDR', annots: ['@%%'] },\n          {\n            prim: 'DIP',\n            args: [\n              [\n                mkPrim({\n                  prim: 'CAR',\n                  annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n                }),\n                ex.args[0],\n              ],\n            ],\n          },\n          { prim: 'SWAP' },\n          { prim: 'PAIR', annots: [fields.length !== 0 ? fields[0] : '%', '%@'] },\n        ],\n        d: [\n          { prim: 'DUP' },\n          mkPrim({\n            prim: 'CDR',\n            annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n          }),\n          ex.args[0],\n          { prim: 'SWAP' },\n          { prim: 'CAR', annots: ['@%%'] },\n          { prim: 'PAIR', annots: ['%@', fields.length !== 0 ? fields[0] : '%'] },\n        ],\n      };\n\n      return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), [], term);\n    }\n  }\n\n  // Expand deprecated DI...IP to [DIP n]\n  if (diipRe.test(ex.prim)) {\n    if (assertArgs(ex, 1)) {\n      let n = 0;\n      while (ex.prim[1 + n] === 'I') {\n        n++;\n      }\n      return mkPrim({ prim: 'DIP', args: [{ int: String(n) }, ex.args[0]] });\n    }\n  }\n\n  // Expand DU...UP and DUP n\n  if (duupRe.test(ex.prim)) {\n    let n = 0;\n    while (ex.prim[1 + n] === 'U') {\n      n++;\n    }\n    if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n      if (n === 1) {\n        if (ex.args === undefined) {\n          return ex; // skip\n        }\n        if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n          n = parseInt(ex.args[0].int, 10);\n        }\n      } else {\n        assertArgs(ex, 0);\n      }\n\n      if (n === 1) {\n        return [mkPrim({ prim: 'DUP', annots: ex.annots })];\n      } else if (n === 2) {\n        return [\n          {\n            prim: 'DIP',\n            args: [[mkPrim({ prim: 'DUP', annots: ex.annots })]],\n          },\n          { prim: 'SWAP' },\n        ];\n      } else {\n        return [\n          {\n            prim: 'DIP',\n            args: [{ int: String(n - 1) }, [mkPrim({ prim: 'DUP', annots: ex.annots })]],\n          },\n          {\n            prim: 'DIG',\n            args: [{ int: String(n) }],\n          },\n        ];\n      }\n    } else {\n      if (n === 1) {\n        return ex;\n      }\n      if (assertArgs(ex, 0)) {\n        return mkPrim({ prim: 'DUP', args: [{ int: String(n) }], annots: ex.annots });\n      }\n    }\n  }\n\n  return ex;\n}\n","import { Prim, Expr } from './micheline';\nimport { GlobalConstantHashAndValue } from './micheline-parser';\n\nexport function expandGlobalConstants(ex: Prim, hashAndValue: GlobalConstantHashAndValue): Expr {\n  if (\n    ex.args !== undefined &&\n    ex.args.length === 1 &&\n    'string' in ex.args[0] &&\n    ex.args[0].string in hashAndValue\n  ) {\n    return hashAndValue[ex.args[0].string];\n  }\n\n  return ex;\n}\n","import { scan, Token, Literal } from './scan';\nimport {\n  Expr,\n  Prim,\n  StringLiteral,\n  IntLiteral,\n  BytesLiteral,\n  sourceReference,\n  List,\n  SourceReference,\n} from './micheline';\nimport { expandMacros } from './macros';\nimport { ProtocolOptions } from './michelson-types';\nimport { expandGlobalConstants } from './global-constants';\n\n/**\n *  @category Error\n *  @description Error indicating a failure when parsing Micheline expressions\n */\nexport class MichelineParseError extends Error {\n  /**\n   * @param token A token caused the error\n   * @param message An error message\n   */\n  constructor(public token: Token | null, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, MichelineParseError.prototype);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that inidicates a failure when parsing Micheline JSON\n */\nexport class JSONParseError extends Error {\n  /**\n   * @param node A node caused the error\n   * @param message An error message\n   */\n  constructor(public node: unknown, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, JSONParseError.prototype);\n  }\n}\n\nexport interface GlobalConstantHashAndValue {\n  [globalConstantHash: string]: Expr;\n}\n\nconst errEOF = new MichelineParseError(null, 'Unexpected EOF');\n\nfunction isAnnotation(tok: Token): boolean {\n  return tok.t === Literal.Ident && (tok.v[0] === '@' || tok.v[0] === '%' || tok.v[0] === ':');\n}\n\nconst intRe = new RegExp('^-?[0-9]+$');\nconst bytesRe = new RegExp('^([0-9a-fA-F]{2})*$');\n\nexport interface ParserOptions extends ProtocolOptions {\n  /**\n   * Expand [Michelson macros](https://tezos.gitlab.io/whitedoc/michelson.html#macros) during parsing.\n   */\n  expandMacros?: boolean;\n  /**\n   * Expand global constants during parsing.\n   * `expandGlobalConstant` expects an object where the keys are global constant hashes and the values are the corresponding JSON Micheline expressions.\n   * @example\n   * ```\n   * const parserOptions: ParserOptions = {\n   *  expandGlobalConstant: {\n   *      'expr...': { prim: 'DROP', args: [{ int: '2' }] }\n   *  }\n   * }\n   *\n   * const p = new Parser(parserOptions);\n   * ```\n   */\n  expandGlobalConstant?: GlobalConstantHashAndValue;\n}\n\n/**\n * Converts and validates Michelson expressions between JSON-based Michelson and Micheline\n *\n * Pretty Print a Michelson Smart Contract:\n * ```\n * const contract = await Tezos.contract.at(\"KT1Vsw3kh9638gqWoHTjvHCoHLPKvCbMVbCg\");\n * const p = new Parser();\n *\n * const michelsonCode = p.parseJSON(contract.script.code);\n * const storage = p.parseJSON(contract.script.storage);\n *\n * console.log(\"Pretty print Michelson smart contract:\");\n * console.log(emitMicheline(michelsonCode, {indent:\"    \", newline: \"\\n\",}));\n *\n * console.log(\"Pretty print Storage:\");\n * console.log(emitMicheline(storage, {indent:\"    \", newline: \"\\n\",}));\n * ```\n *\n * Encode a Michelson expression for inital storage of a smart contract\n * ```\n * const src = `(Pair (Pair { Elt 1\n *                (Pair (Pair \"tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN\" \"tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx\")\n *                      0x0501000000026869) }\n *          10000000)\n *    (Pair 2 333))`;\n *\n * const p = new Parser();\n *\n * const exp = p.parseMichelineExpression(src);\n * console.log(JSON.stringify(exp));\n * ```\n */\nexport class Parser {\n  constructor(private opt?: ParserOptions) {}\n\n  private expand(ex: Prim): Expr {\n    if (this.opt?.expandGlobalConstant !== undefined && ex.prim === 'constant') {\n      const ret = expandGlobalConstants(ex, this.opt.expandGlobalConstant);\n      if (ret !== ex) {\n        ret[sourceReference] = {\n          ...(ex[sourceReference] || { first: 0, last: 0 }),\n          globalConstant: ex,\n        };\n      }\n      return ret;\n    }\n    if (this.opt?.expandMacros !== undefined ? this.opt?.expandMacros : true) {\n      const ret = expandMacros(ex, this.opt);\n      if (ret !== ex) {\n        ret[sourceReference] = { ...(ex[sourceReference] || { first: 0, last: 0 }), macro: ex };\n      }\n      return ret;\n    } else {\n      return ex;\n    }\n  }\n\n  private parseListExpr(scanner: Iterator<Token>, start: Token): Expr {\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n\n    const expectBracket = start.t === '(';\n    let tok: IteratorResult<Token>;\n    if (expectBracket) {\n      tok = scanner.next();\n      if (tok.done) {\n        throw errEOF;\n      }\n      ref.last = tok.value.last;\n    } else {\n      tok = { value: start };\n    }\n\n    if (tok.value.t !== Literal.Ident) {\n      throw new MichelineParseError(tok.value, `not an identifier: ${tok.value.v}`);\n    }\n\n    const ret: Prim = {\n      prim: tok.value.v,\n      [sourceReference]: ref,\n    };\n\n    for (;;) {\n      const tok = scanner.next();\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        }\n        break;\n      } else if (tok.value.t === ')') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        }\n        ref.last = tok.value.last;\n        break;\n      } else if (isAnnotation(tok.value)) {\n        ret.annots = ret.annots || [];\n        ret.annots.push(tok.value.v);\n        ref.last = tok.value.last;\n      } else {\n        ret.args = ret.args || [];\n        const arg = this.parseExpr(scanner, tok.value);\n        ref.last = arg[sourceReference]?.last || ref.last;\n        ret.args.push(arg);\n      }\n    }\n    return this.expand(ret);\n  }\n\n  private parseArgs(scanner: Iterator<Token>, start: Token): [Prim, IteratorResult<Token>] {\n    // Identifier with arguments\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n    const p: Prim = {\n      prim: start.v,\n      [sourceReference]: ref,\n    };\n\n    for (;;) {\n      const t = scanner.next();\n      if (t.done || t.value.t === '}' || t.value.t === ';') {\n        return [p, t];\n      }\n\n      if (isAnnotation(t.value)) {\n        ref.last = t.value.last;\n        p.annots = p.annots || [];\n        p.annots.push(t.value.v);\n      } else {\n        const arg = this.parseExpr(scanner, t.value);\n        ref.last = arg[sourceReference]?.last || ref.last;\n        p.args = p.args || [];\n        p.args.push(arg);\n      }\n    }\n  }\n\n  private parseSequenceExpr(scanner: Iterator<Token>, start: Token): List<Expr> {\n    const ref: SourceReference = {\n      first: start.first,\n      last: start.last,\n    };\n    const seq: List<Expr> = [];\n    seq[sourceReference] = ref;\n\n    const expectBracket = start.t === '{';\n    let tok: IteratorResult<Token> | null = start.t === '{' ? null : { value: start };\n\n    for (;;) {\n      if (tok === null) {\n        tok = scanner.next();\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n      if (tok.done) {\n        if (expectBracket) {\n          throw errEOF;\n        } else {\n          return seq;\n        }\n      }\n\n      if (tok.value.t === '}') {\n        if (!expectBracket) {\n          throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n        } else {\n          return seq;\n        }\n      } else if (tok.value.t === Literal.Ident) {\n        // Identifier with arguments\n        const [itm, n] = this.parseArgs(scanner, tok.value);\n        ref.last = itm[sourceReference]?.last || ref.last;\n        seq.push(this.expand(itm));\n        tok = n;\n      } else {\n        // Other\n        const ex = this.parseExpr(scanner, tok.value);\n        ref.last = ex[sourceReference]?.last || ref.last;\n        seq.push(ex);\n        tok = null;\n      }\n\n      if (tok === null) {\n        tok = scanner.next();\n        if (!tok.done) {\n          ref.last = tok.value.last;\n        }\n      }\n      if (!tok.done && tok.value.t === ';') {\n        tok = null;\n      }\n    }\n  }\n\n  private parseExpr(scanner: Iterator<Token>, tok: Token): Expr {\n    switch (tok.t) {\n      case Literal.Ident:\n        return this.expand({\n          prim: tok.v,\n          [sourceReference]: { first: tok.first, last: tok.last },\n        });\n\n      case Literal.Number:\n        return { int: tok.v, [sourceReference]: { first: tok.first, last: tok.last } };\n\n      case Literal.String:\n        return {\n          string: JSON.parse(tok.v) as string,\n          [sourceReference]: { first: tok.first, last: tok.last },\n        };\n\n      case Literal.Bytes:\n        return { bytes: tok.v.slice(2), [sourceReference]: { first: tok.first, last: tok.last } };\n\n      case '{':\n        return this.parseSequenceExpr(scanner, tok);\n\n      default:\n        return this.parseListExpr(scanner, tok);\n    }\n  }\n\n  /**\n   * Parses a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n   */\n  parseSequence(src: string): Expr[] | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseSequenceExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n   * @returns An AST node or null for empty document.\n   */\n  parseList(src: string): Expr | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseListExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse any Michelson expression\n   * @param src A Michelson expression such as `(Pair {Elt \"0\" 0} 0)` or `{parameter ...; storage int; code { DUP ; ...};}`\n   * @returns An AST node or null for empty document.\n   */\n  parseMichelineExpression(src: string): Expr | null {\n    if (typeof src !== 'string') {\n      throw new TypeError(`string type was expected, got ${typeof src} instead`);\n    }\n\n    const scanner = scan(src);\n    const tok = scanner.next();\n    if (tok.done) {\n      return null;\n    }\n    return this.parseExpr(scanner, tok.value);\n  }\n\n  /**\n   * Parse a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n   * An alias for `parseSequence`\n   * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n   */\n  parseScript(src: string): Expr[] | null {\n    return this.parseSequence(src);\n  }\n\n  /**\n   * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n   * An alias for `parseList`\n   * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n   * @returns An AST node or null for empty document.\n   */\n  parseData(src: string): Expr | null {\n    return this.parseList(src);\n  }\n\n  /**\n   * Takes a JSON-encoded Michelson, validates it, strips away unneeded properties and optionally expands macros (See {@link ParserOptions}).\n   * @param src An object containing JSON-encoded Michelson, usually returned by `JSON.parse()`\n   */\n  parseJSON(src: object): Expr {\n    if (typeof src !== 'object') {\n      throw new TypeError(`object type was expected, got ${typeof src} instead`);\n    }\n\n    if (Array.isArray(src)) {\n      const ret: Expr[] = [];\n      for (const n of src) {\n        if (n === null || typeof n !== 'object') {\n          throw new JSONParseError(n, `unexpected sequence element: ${n}`);\n        }\n        ret.push(this.parseJSON(n));\n      }\n      return ret;\n    } else if ('prim' in src) {\n      const p = src as { prim: unknown; annots?: unknown[]; args?: unknown[] };\n      if (\n        typeof p.prim === 'string' &&\n        (p.annots === undefined || Array.isArray(p.annots)) &&\n        (p.args === undefined || Array.isArray(p.args))\n      ) {\n        const ret: Prim = {\n          prim: p.prim,\n        };\n\n        if (p.annots !== undefined) {\n          for (const a of p.annots) {\n            if (typeof a !== 'string') {\n              throw new JSONParseError(a, `string expected: ${a}`);\n            }\n          }\n          ret.annots = p.annots;\n        }\n\n        if (p.args !== undefined) {\n          ret.args = [];\n          for (const a of p.args) {\n            if (a === null || typeof a !== 'object') {\n              throw new JSONParseError(a, `unexpected argument: ${a}`);\n            }\n            ret.args.push(this.parseJSON(a));\n          }\n        }\n\n        return this.expand(ret);\n      }\n\n      throw new JSONParseError(src, `malformed prim expression: ${src}`);\n    } else if ('string' in src) {\n      if (typeof (src as StringLiteral).string === 'string') {\n        return { string: (src as StringLiteral).string };\n      }\n\n      throw new JSONParseError(src, `malformed string literal: ${src}`);\n    } else if ('int' in src) {\n      if (typeof (src as IntLiteral).int === 'string' && intRe.test((src as IntLiteral).int)) {\n        return { int: (src as IntLiteral).int };\n      }\n\n      throw new JSONParseError(src, `malformed int literal: ${src}`);\n    } else if ('bytes' in src) {\n      if (\n        typeof (src as BytesLiteral).bytes === 'string' &&\n        bytesRe.test((src as BytesLiteral).bytes)\n      ) {\n        return { bytes: (src as BytesLiteral).bytes };\n      }\n\n      throw new JSONParseError(src, `malformed bytes literal: ${src}`);\n    } else {\n      throw new JSONParseError(src, `unexpected object: ${src}`);\n    }\n  }\n}\n","import { Expr, Prim, sourceReference } from './micheline';\n\nexport interface FormatOptions {\n  /**\n   * A string used for code indentation if desired. Usually a tab character or a number of spaces.\n   */\n  indent?: string;\n  /**\n   * A string used for line separation. Usually a newline character (\"\\n\");\n   */\n  newline?: string;\n}\n\nclass Formatter {\n  constructor(private opt?: FormatOptions, private lev: number = 0) {}\n\n  indent(n = 0): string {\n    let ret = '';\n    if (this.opt?.indent !== undefined) {\n      for (let i = this.lev + n; i > 0; i--) {\n        ret += this.opt.indent;\n      }\n    }\n    return ret;\n  }\n\n  get lf(): string {\n    return this.opt?.newline || '';\n  }\n\n  get lfsp(): string {\n    return this.opt?.newline || ' ';\n  }\n\n  down(n: number): Formatter {\n    return new Formatter(this.opt, this.lev + n);\n  }\n}\n\nfunction hasArgs(node: Expr): node is Prim {\n  return (\n    'prim' in node &&\n    ((node.annots !== undefined && node.annots.length !== 0) ||\n      (node.args !== undefined && node.args.length !== 0))\n  );\n}\n\nfunction isMultiline(node: Prim): boolean {\n  if (node.args !== undefined) {\n    for (const a of node.args) {\n      if (Array.isArray(a) || hasArgs(a)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction emitExpr(node: Expr, f: Formatter, foldMacros: boolean): string {\n  const macro = node[sourceReference]?.macro;\n  if (foldMacros && macro) {\n    return emitExpr(macro, f, foldMacros);\n  }\n\n  if (Array.isArray(node)) {\n    return emitSeq(node, f, foldMacros);\n  } else if ('string' in node) {\n    return JSON.stringify(node.string);\n  } else if ('int' in node) {\n    return node.int;\n  } else if ('bytes' in node) {\n    return '0x' + node.bytes;\n  } else {\n    if (\n      (node.annots === undefined || node.annots.length === 0) &&\n      (node.args === undefined || node.args.length === 0)\n    ) {\n      return node.prim;\n    }\n\n    let ret = '(' + node.prim;\n    if (node.annots !== undefined) {\n      for (const a of node.annots) {\n        ret += ' ' + a;\n      }\n    }\n    if (node.args !== undefined) {\n      const multiline = isMultiline(node);\n      for (const a of node.args) {\n        if (multiline) {\n          ret += f.lfsp + f.indent(1) + emitExpr(a, f.down(1), foldMacros);\n        } else {\n          ret += ' ' + emitExpr(a, f, foldMacros);\n        }\n      }\n    }\n    return ret + ')';\n  }\n}\n\nfunction emitSeq(node: Expr[], f: Formatter, foldMacros: boolean): string {\n  let ret = '{' + f.lf;\n  let i = node.length;\n  for (const el of node) {\n    ret += f.indent(1);\n\n    if ('prim' in el) {\n      ret += el.prim;\n\n      if (el.annots !== undefined) {\n        for (const a of el.annots) {\n          ret += ' ' + a;\n        }\n      }\n      if (el.args !== undefined) {\n        const multiline = isMultiline(el);\n        for (const a of el.args) {\n          if (multiline) {\n            ret += f.lfsp + f.indent(2) + emitExpr(a, f.down(2), foldMacros);\n          } else {\n            ret += ' ' + emitExpr(a, f, foldMacros);\n          }\n        }\n      }\n    } else {\n      ret += emitExpr(el, f.down(1), foldMacros);\n    }\n\n    ret += i > 1 ? ';' + f.lfsp : f.lf;\n    i--;\n  }\n  return ret + f.indent() + '}';\n}\n\n/**\n * Formats Micheline expression\n * @param expr An AST node\n * @param opt Options\n */\nexport function emitMicheline(expr: Expr, opt?: FormatOptions, foldMacros = false): string {\n  if (typeof expr !== 'object') {\n    throw new TypeError(`object type was expected, got ${typeof expr} instead`);\n  }\n\n  return emitExpr(expr, new Formatter(opt), foldMacros);\n}\n","const H = [\n  0x6a09e667 | 0,\n  0xbb67ae85 | 0,\n  0x3c6ef372 | 0,\n  0xa54ff53a | 0,\n  0x510e527f | 0,\n  0x9b05688c | 0,\n  0x1f83d9ab | 0,\n  0x5be0cd19 | 0,\n];\n\nconst K = [\n  0x428a2f98 | 0,\n  0x71374491 | 0,\n  0xb5c0fbcf | 0,\n  0xe9b5dba5 | 0,\n  0x3956c25b | 0,\n  0x59f111f1 | 0,\n  0x923f82a4 | 0,\n  0xab1c5ed5 | 0,\n  0xd807aa98 | 0,\n  0x12835b01 | 0,\n  0x243185be | 0,\n  0x550c7dc3 | 0,\n  0x72be5d74 | 0,\n  0x80deb1fe | 0,\n  0x9bdc06a7 | 0,\n  0xc19bf174 | 0,\n  0xe49b69c1 | 0,\n  0xefbe4786 | 0,\n  0x0fc19dc6 | 0,\n  0x240ca1cc | 0,\n  0x2de92c6f | 0,\n  0x4a7484aa | 0,\n  0x5cb0a9dc | 0,\n  0x76f988da | 0,\n  0x983e5152 | 0,\n  0xa831c66d | 0,\n  0xb00327c8 | 0,\n  0xbf597fc7 | 0,\n  0xc6e00bf3 | 0,\n  0xd5a79147 | 0,\n  0x06ca6351 | 0,\n  0x14292967 | 0,\n  0x27b70a85 | 0,\n  0x2e1b2138 | 0,\n  0x4d2c6dfc | 0,\n  0x53380d13 | 0,\n  0x650a7354 | 0,\n  0x766a0abb | 0,\n  0x81c2c92e | 0,\n  0x92722c85 | 0,\n  0xa2bfe8a1 | 0,\n  0xa81a664b | 0,\n  0xc24b8b70 | 0,\n  0xc76c51a3 | 0,\n  0xd192e819 | 0,\n  0xd6990624 | 0,\n  0xf40e3585 | 0,\n  0x106aa070 | 0,\n  0x19a4c116 | 0,\n  0x1e376c08 | 0,\n  0x2748774c | 0,\n  0x34b0bcb5 | 0,\n  0x391c0cb3 | 0,\n  0x4ed8aa4a | 0,\n  0x5b9cca4f | 0,\n  0x682e6ff3 | 0,\n  0x748f82ee | 0,\n  0x78a5636f | 0,\n  0x84c87814 | 0,\n  0x8cc70208 | 0,\n  0x90befffa | 0,\n  0xa4506ceb | 0,\n  0xbef9a3f7 | 0,\n  0xc67178f2 | 0,\n];\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when decoding a base58 encoding\n */\nexport class Base58DecodingError extends Error {\n  public name = 'Base58DecodingError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description\n */\nexport class InvalidMessageError extends Error {\n  public name = 'InvalidMessageError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n// https://tools.ietf.org/html/rfc6234\nfunction sha256(msg: number[] | Uint8Array): number[] {\n  // pad the message\n  const r = (msg.length + 9) % 64;\n  const pad = r === 0 ? 0 : 64 - r;\n\n  if (msg.length > 268435455) {\n    throw new InvalidMessageError(`SHA-256 -- message length is too big: ${msg.length}`);\n  }\n\n  const l = msg.length << 3;\n  const buffer = [\n    ...msg,\n    0x80,\n    ...new Array<number>(pad).fill(0),\n    0,\n    0,\n    0,\n    0,\n    (l >> 24) & 0xff,\n    (l >> 16) & 0xff,\n    (l >> 8) & 0xff,\n    l & 0xff,\n  ];\n\n  function ror(x: number, n: number): number {\n    return (x >>> n) | (x << (32 - n));\n  }\n\n  const h = [...H];\n  const w = new Array<number>(64);\n  const v = new Array<number>(8);\n\n  for (let offset = 0; offset < buffer.length; offset += 64) {\n    let q = offset;\n    let i = 0;\n    while (i < 16) {\n      w[i] = (buffer[q] << 24) | (buffer[q + 1] << 16) | (buffer[q + 2] << 8) | buffer[q + 3];\n      q += 4;\n      i++;\n    }\n    while (i < 64) {\n      const s0 = ror(w[i - 15], 7) ^ ror(w[i - 15], 18) ^ (w[i - 15] >>> 3);\n      const s1 = ror(w[i - 2], 17) ^ ror(w[i - 2], 19) ^ (w[i - 2] >>> 10);\n      w[i] = ((s1 | 0) + w[i - 7] + s0 + w[i - 16]) | 0;\n      i++;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      v[i] = h[i];\n    }\n\n    for (let i = 0; i < 64; i++) {\n      const b0 = ror(v[0], 2) ^ ror(v[0], 13) ^ ror(v[0], 22);\n      const b1 = ror(v[4], 6) ^ ror(v[4], 11) ^ ror(v[4], 25);\n      const t1 = (v[7] + b1 + ((v[4] & v[5]) ^ (~v[4] & v[6])) + K[i] + w[i]) | 0;\n      const t2 = (b0 + ((v[0] & v[1]) ^ (v[0] & v[2]) ^ (v[1] & v[2]))) | 0;\n\n      v[7] = v[6];\n      v[6] = v[5];\n      v[5] = v[4];\n      v[4] = (v[3] + t1) | 0;\n      v[3] = v[2];\n      v[2] = v[1];\n      v[1] = v[0];\n      v[0] = (t1 + t2) | 0;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      h[i] = (h[i] + v[i]) | 0;\n    }\n  }\n\n  const digest: number[] = [];\n  for (const v of h) {\n    digest.push((v >> 24) & 0xff);\n    digest.push((v >> 16) & 0xff);\n    digest.push((v >> 8) & 0xff);\n    digest.push(v & 0xff);\n  }\n\n  return digest;\n}\n\nconst base58alphabetFwd: number[] = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18,\n  19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n];\n\nconst base58alphabetBwd: number[] = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66,\n  67, 68, 69, 70, 71, 72, 73,\n];\n\nfunction byteAt(src: string, i: number): number {\n  const c = src.charCodeAt(i) - 49;\n  if (c >= base58alphabetFwd.length || base58alphabetFwd[c] === -1) {\n    throw new Base58DecodingError(`Unexpected character at position ${i}: ${src[i]}`);\n  }\n  return base58alphabetFwd[c];\n}\n\nexport function decodeBase58(src: string): number[] {\n  const acc: number[] = [];\n  let i = 0;\n  // count and skip leading zeros\n  while (i < src.length && byteAt(src, i) === 0) {\n    i++;\n  }\n  let zeros = i;\n  while (i < src.length) {\n    let carry = byteAt(src, i++);\n    /*\n        for every symbol x\n        acc = acc * 58 + x\n        where acc is a little endian arbitrary length integer\n        */\n    let ii = 0;\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 58 + carry;\n      acc[ii++] = m % 256;\n      carry = Math.floor(m / 256);\n    }\n  }\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n  return acc.reverse();\n}\n\nexport function encodeBase58(src: number[] | Uint8Array): string {\n  const acc: number[] = [];\n  let i = 0;\n  // count and skip leading zeros\n  while (i < src.length && src[i] === 0) {\n    i++;\n  }\n  let zeros = i;\n  while (i < src.length) {\n    let carry = src[i++];\n    let ii = 0;\n    while (carry !== 0 || ii < acc.length) {\n      const m = (acc[ii] || 0) * 256 + carry;\n      acc[ii++] = m % 58;\n      carry = Math.floor(m / 58);\n    }\n  }\n  while (zeros-- > 0) {\n    acc.push(0);\n  }\n  acc.reverse();\n  return String.fromCharCode(...acc.map((v) => base58alphabetBwd[v] + 49));\n}\n\nexport function decodeBase58Check(src: string): number[] {\n  const buffer = decodeBase58(src);\n  if (buffer.length < 4) {\n    throw new Base58DecodingError(`Data is too short ${buffer.length}`);\n  }\n\n  const data = buffer.slice(0, buffer.length - 4);\n  const sum = buffer.slice(buffer.length - 4);\n  const computed = sha256(sha256(data));\n  if (\n    sum[0] !== computed[0] ||\n    sum[1] !== computed[1] ||\n    sum[2] !== computed[2] ||\n    sum[3] !== computed[3]\n  ) {\n    throw new Base58DecodingError('Invalid checksum');\n  }\n\n  return data;\n}\n\nexport function encodeBase58Check(src: number[] | Uint8Array): string {\n  const sum = sha256(sha256(src));\n  return encodeBase58([...src, ...sum.slice(0, 4)]);\n}\n","/**\n *  @category Error\n *  @description Error that indicates an invalid contract being passed or used\n */\nexport class InvalidContractError extends Error {\n  public name = 'InvalidContractError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid type expression being passed or used\n */\nexport class InvalidTypeExpressionError extends Error {\n  public name = 'InvalidTypeExpressionError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid data expression being passed or used\n */\nexport class InvalidDataExpressionError extends Error {\n  public name = 'InvalidDataExpressionError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid contract entrypoint being referenced or passed\n */\nexport class InvalidEntrypointError extends Error {\n  public name = 'InvalidEntrypointError';\n  constructor(public entrypoint?: string) {\n    super(`Contract has no entrypoint named: '${entrypoint}'`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when trying to encode Tezos ID\n */\nexport class TezosIdEncodeError extends Error {\n  public name = 'TezosIdEncodeError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a general error happening when trying to create a LongInteger\n */\nexport class LongIntegerError extends Error {\n  public name = 'LongIntegerError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure occurring when trying to parse a hex byte\n */\nexport class HexParseError extends Error {\n  public name = 'HexParseError';\n  constructor(public hexByte: string) {\n    super(`Unable to parse hex byte: ${hexByte}`);\n  }\n}\n","import { Prim, Expr, StringLiteral, IntLiteral } from './micheline';\nimport { decodeBase58Check, encodeBase58Check } from './base58';\nimport {\n  MichelsonData,\n  MichelsonDataPair,\n  MichelsonType,\n  MichelsonTypePair,\n} from './michelson-types';\nimport { HexParseError, LongIntegerError, TezosIdEncodeError } from './error';\n\nexport type Tuple<N extends number, T> = N extends 1\n  ? [T]\n  : N extends 2\n  ? [T, T]\n  : N extends 3\n  ? [T, T, T]\n  : N extends 4\n  ? [T, T, T, T]\n  : N extends 5\n  ? [T, T, T, T, T]\n  : N extends 6\n  ? [T, T, T, T, T, T]\n  : N extends 7\n  ? [T, T, T, T, T, T, T]\n  : N extends 8\n  ? [T, T, T, T, T, T, T, T]\n  : T[];\n\ntype RequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\ntype OmitProp<T, K extends keyof T> = Omit<T, K> & { [P in K]?: undefined };\n\nexport type ReqArgs<T extends Prim> = RequiredProp<T, 'args'>;\nexport type NoArgs<T extends Prim> = OmitProp<T, 'args'>;\nexport type NoAnnots<T extends Prim> = OmitProp<T, 'annots'>;\n\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\n/**\n *  @category Error\n *  @description Error that indicates a Michelson failure occurring\n */\nexport class MichelsonError<T extends Expr = Expr> extends Error {\n  /**\n   * @param val Value of a AST node caused the error\n   * @param path Path to a node caused the error\n   * @param message An error message\n   */\n  constructor(public val: T, message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, MichelsonError.prototype);\n  }\n}\n\nexport function isMichelsonError<T extends Expr = Expr>(err: unknown): err is MichelsonError<T> {\n  return err instanceof MichelsonError;\n}\n\nexport class MichelsonTypeError extends MichelsonError<MichelsonType | MichelsonType[]> {\n  public data?: Expr;\n\n  /**\n   * @param val Value of a type node caused the error\n   * @param data Value of a data node caused the error\n   * @param message An error message\n   */\n  constructor(val: MichelsonType | MichelsonType[], data?: Expr, message?: string) {\n    super(val, message);\n    if (data !== undefined) {\n      this.data = data;\n    }\n    Object.setPrototypeOf(this, MichelsonTypeError.prototype);\n  }\n}\n\n// Ad hoc big integer parser\nexport class LongInteger {\n  private neg = false;\n  private buf: number[] = [];\n\n  private append(c: number) {\n    let i = 0;\n    while (c !== 0 || i < this.buf.length) {\n      const m = (this.buf[i] || 0) * 10 + c;\n      this.buf[i++] = m % 256;\n      c = Math.floor(m / 256);\n    }\n  }\n\n  constructor(arg?: string | number) {\n    if (arg === undefined) {\n      return;\n    }\n    if (typeof arg === 'string') {\n      for (let i = 0; i < arg.length; i++) {\n        const c = arg.charCodeAt(i);\n        if (i === 0 && c === 0x2d) {\n          this.neg = true;\n        } else {\n          if (c < 0x30 || c > 0x39) {\n            throw new LongIntegerError(`unexpected character in integer constant: ${arg[i]}`);\n          }\n          this.append(c - 0x30);\n        }\n      }\n    } else if (arg < 0) {\n      this.neg = true;\n      this.append(-arg);\n    } else {\n      this.append(arg);\n    }\n  }\n\n  cmp(arg: LongInteger): number {\n    if (this.neg !== arg.neg) {\n      return (arg.neg ? 1 : 0) - (this.neg ? 1 : 0);\n    } else {\n      let ret = 0;\n      if (this.buf.length !== arg.buf.length) {\n        ret = this.buf.length < arg.buf.length ? -1 : 1;\n      } else if (this.buf.length !== 0) {\n        let i = arg.buf.length - 1;\n        while (i >= 0 && this.buf[i] === arg.buf[i]) {\n          i--;\n        }\n        ret = i < 0 ? 0 : this.buf[i] < arg.buf[i] ? -1 : 1;\n      }\n      return !this.neg ? ret : ret === 0 ? 0 : -ret;\n    }\n  }\n\n  get sign(): number {\n    return this.buf.length === 0 ? 0 : this.neg ? -1 : 1;\n  }\n}\n\nexport function parseBytes(s: string): number[] | null {\n  const ret: number[] = [];\n  for (let i = 0; i < s.length; i += 2) {\n    const x = parseInt(s.slice(i, i + 2), 16);\n    if (Number.isNaN(x)) {\n      return null;\n    }\n    ret.push(x);\n  }\n  return ret;\n}\n\nexport function compareBytes(a: number[] | Uint8Array, b: number[] | Uint8Array): number {\n  if (a.length !== b.length) {\n    return a.length < b.length ? -1 : 1;\n  } else if (a.length !== 0) {\n    let i = 0;\n    while (i < a.length && a[i] === b[i]) {\n      i++;\n    }\n    return i === a.length ? 0 : a[i] < b[i] ? -1 : 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function isDecimal(x: string): boolean {\n  try {\n    new LongInteger(x);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isNatural(x: string): boolean {\n  try {\n    return new LongInteger(x).sign >= 0;\n  } catch {\n    return false;\n  }\n}\n\nexport interface UnpackedAnnotations {\n  f?: string[];\n  t?: string[];\n  v?: string[];\n}\n\nexport interface UnpackAnnotationsOptions {\n  specialVar?: boolean; // CAR, CDR\n  emptyVar?: boolean;\n  specialFields?: boolean; // PAIR, LEFT, RIGHT\n  emptyFields?: boolean;\n}\n\nconst annRe = /^(@%|@%%|%@|[@:%]([_0-9a-zA-Z][_0-9a-zA-Z.%@]*)?)$/;\n\nexport function unpackAnnotations(\n  p: Prim | Expr[],\n  opt?: UnpackAnnotationsOptions\n): UnpackedAnnotations {\n  if (Array.isArray(p)) {\n    return {};\n  }\n\n  let field: string[] | undefined;\n  let type: string[] | undefined;\n  let vars: string[] | undefined;\n\n  if (p.annots !== undefined) {\n    for (const v of p.annots) {\n      if (v.length !== 0) {\n        if (\n          !annRe.test(v) ||\n          (!opt?.specialVar && (v === '@%' || v === '@%%')) ||\n          (!opt?.specialFields && v === '%@')\n        ) {\n          throw new MichelsonError(p, `${p.prim}: unexpected annotation: ${v}`);\n        }\n\n        switch (v[0]) {\n          case '%':\n            if (opt?.emptyFields || v.length > 1) {\n              field = field || [];\n              field.push(v);\n            }\n            break;\n          case ':':\n            if (v.length > 1) {\n              type = type || [];\n              type.push(v);\n            }\n            break;\n          case '@':\n            if (opt?.emptyVar || v.length > 1) {\n              vars = vars || [];\n              vars.push(v);\n            }\n            break;\n        }\n      }\n    }\n  }\n  return { f: field, t: type, v: vars };\n}\n\nexport type TezosIDType =\n  | 'BlockHash'\n  | 'OperationHash'\n  | 'OperationListHash'\n  | 'OperationListListHash'\n  | 'ProtocolHash'\n  | 'ContextHash'\n  | 'ED25519PublicKeyHash'\n  | 'SECP256K1PublicKeyHash'\n  | 'P256PublicKeyHash'\n  | 'ContractHash'\n  | 'CryptoboxPublicKeyHash'\n  | 'ED25519Seed'\n  | 'ED25519PublicKey'\n  | 'SECP256K1SecretKey'\n  | 'P256SecretKey'\n  | 'ED25519EncryptedSeed'\n  | 'SECP256K1EncryptedSecretKey'\n  | 'P256EncryptedSecretKey'\n  | 'SECP256K1PublicKey'\n  | 'P256PublicKey'\n  | 'SECP256K1Scalar'\n  | 'SECP256K1Element'\n  | 'ED25519SecretKey'\n  | 'ED25519Signature'\n  | 'SECP256K1Signature'\n  | 'P256Signature'\n  | 'GenericSignature'\n  | 'ChainID'\n  | 'RollupAddress'\n  | 'TxRollupL2Address';\n\nexport type TezosIDPrefix = [number, number[]]; // payload length, prefix\n\nexport const tezosPrefix: Record<TezosIDType, TezosIDPrefix> = {\n  BlockHash: [32, [1, 52]], // B(51)\n  OperationHash: [32, [5, 116]], // o(51)\n  OperationListHash: [32, [133, 233]], // Lo(52)\n  OperationListListHash: [32, [29, 159, 109]], // LLo(53)\n  ProtocolHash: [32, [2, 170]], // P(51)\n  ContextHash: [32, [79, 199]], // Co(52)\n  ED25519PublicKeyHash: [20, [6, 161, 159]], // tz1(36)\n  SECP256K1PublicKeyHash: [20, [6, 161, 161]], // tz2(36)\n  P256PublicKeyHash: [20, [6, 161, 164]], // tz3(36)\n  ContractHash: [20, [2, 90, 121]], // KT1(36)\n  CryptoboxPublicKeyHash: [16, [153, 103]], // id(30)\n  ED25519Seed: [32, [13, 15, 58, 7]], // edsk(54)\n  ED25519PublicKey: [32, [13, 15, 37, 217]], // edpk(54)\n  SECP256K1SecretKey: [32, [17, 162, 224, 201]], // spsk(54)\n  P256SecretKey: [32, [16, 81, 238, 189]], // p2sk(54)\n  ED25519EncryptedSeed: [56, [7, 90, 60, 179, 41]], // edesk(88)\n  SECP256K1EncryptedSecretKey: [56, [9, 237, 241, 174, 150]], // spesk(88)\n  P256EncryptedSecretKey: [56, [9, 48, 57, 115, 171]], // p2esk(88)\n  SECP256K1PublicKey: [33, [3, 254, 226, 86]], // sppk(55)\n  P256PublicKey: [33, [3, 178, 139, 127]], // p2pk(55)\n  SECP256K1Scalar: [33, [38, 248, 136]], // SSp(53)\n  SECP256K1Element: [33, [5, 92, 0]], // GSp(54)\n  ED25519SecretKey: [64, [43, 246, 78, 7]], // edsk(98)\n  ED25519Signature: [64, [9, 245, 205, 134, 18]], // edsig(99)\n  SECP256K1Signature: [64, [13, 115, 101, 19, 63]], // spsig1(99)\n  P256Signature: [64, [54, 240, 44, 52]], // p2sig(98)\n  GenericSignature: [64, [4, 130, 43]], // sig(96)\n  ChainID: [4, [87, 82, 0]],\n  RollupAddress: [20, [1, 128, 120, 31]],\n  TxRollupL2Address: [20, [6, 161, 166]],\n};\n\nexport function checkDecodeTezosID<T extends TezosIDType[]>(\n  id: string,\n  ...types: T\n): [T[number], number[]] | null {\n  const buf = decodeBase58Check(id);\n  for (const t of types) {\n    const [plen, p] = tezosPrefix[t];\n    if (buf.length === plen + p.length) {\n      let i = 0;\n      while (i < p.length && buf[i] === p[i]) {\n        i++;\n      }\n      if (i === p.length) {\n        return [t, buf.slice(p.length)];\n      }\n    }\n  }\n  return null;\n}\n\nexport function encodeTezosID(id: TezosIDType, data: number[] | Uint8Array): string {\n  const [plen, p] = tezosPrefix[id];\n  if (data.length !== plen) {\n    throw new TezosIdEncodeError(`Incorrect data length for ${id}: ${data.length}`);\n  }\n  return encodeBase58Check([...p, ...data]);\n}\n\n// reassemble comb pair for transparent comparison etc. non-recursive!\ntype PairTypeOrDataPrim<I extends 'pair' | 'Pair'> = I extends 'pair'\n  ? Extract<MichelsonTypePair<MichelsonType[]>, Prim>\n  : Extract<MichelsonDataPair<MichelsonData[]>, Prim>;\nexport function unpackComb<I extends 'pair' | 'Pair'>(\n  id: I,\n  v: I extends 'pair' ? MichelsonTypePair<MichelsonType[]> : MichelsonDataPair<MichelsonData[]>\n): PairTypeOrDataPrim<I> {\n  const vv: MichelsonTypePair<MichelsonType[]> | MichelsonDataPair<MichelsonData[]> = v;\n  const args = Array.isArray(vv) ? vv : vv.args;\n  if (args.length === 2) {\n    // it's a way to make a union of two interfaces not an interface with two independent properties of union types\n    const ret =\n      id === 'pair'\n        ? {\n            prim: 'pair',\n            args,\n          }\n        : {\n            prim: 'Pair',\n            args,\n          };\n    return ret as PairTypeOrDataPrim<I>;\n  }\n\n  return {\n    ...(Array.isArray(vv) ? { prim: id } : vv),\n    args: [\n      args[0],\n      {\n        prim: id,\n        args: args.slice(1),\n      },\n    ],\n  } as PairTypeOrDataPrim<I>;\n}\n\nexport function isPairType(t: MichelsonType): t is MichelsonTypePair<MichelsonType[]> {\n  return Array.isArray(t) || t.prim === 'pair';\n}\n\nexport function isPairData(d: Expr): d is MichelsonDataPair<MichelsonData[]> {\n  return Array.isArray(d) || ('prim' in d && d.prim === 'Pair');\n}\n\nconst rfc3339Re =\n  /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;\n\nexport function parseDate(a: StringLiteral | IntLiteral): Date | null {\n  if ('string' in a) {\n    if (isNatural(a.string)) {\n      return new Date(parseInt(a.string, 10));\n    } else if (rfc3339Re.test(a.string)) {\n      const x = new Date(a.string);\n      if (!Number.isNaN(x.valueOf)) {\n        return x;\n      }\n    }\n  } else if (isDecimal(a.int)) {\n    return new Date(parseInt(a.int, 10));\n  }\n  return null;\n}\n\nexport function parseHex(s: string): number[] {\n  const res: number[] = [];\n  for (let i = 0; i < s.length; i += 2) {\n    const ss = s.slice(i, i + 2);\n    const x = parseInt(ss, 16);\n    if (Number.isNaN(x)) {\n      throw new HexParseError(ss);\n    }\n    res.push(x);\n  }\n  return res;\n}\n\nexport function hexBytes(bytes: number[]): string {\n  return bytes.map((x) => ((x >> 4) & 0xf).toString(16) + (x & 0xf).toString(16)).join('');\n}\n","import { Prim, Expr, IntLiteral, StringLiteral } from './micheline';\nimport { Tuple, NoArgs, ReqArgs, MichelsonError } from './utils';\nimport {\n  MichelsonCode,\n  MichelsonType,\n  MichelsonData,\n  MichelsonContract,\n  MichelsonNoArgInstruction,\n  MichelsonInstruction,\n  InstructionList,\n  MichelsonTypeID,\n  MichelsonSimpleComparableTypeID,\n} from './michelson-types';\n\n// Michelson validator\n\nconst maxViewNameLength = 31;\n\nconst noArgInstructionIDs: Record<MichelsonNoArgInstruction['prim'], true> = {\n  ABS: true,\n  ADD: true,\n  ADDRESS: true,\n  AMOUNT: true,\n  AND: true,\n  APPLY: true,\n  BALANCE: true,\n  BLAKE2B: true,\n  CAR: true,\n  CDR: true,\n  CHAIN_ID: true,\n  CHECK_SIGNATURE: true,\n  COMPARE: true,\n  CONCAT: true,\n  CONS: true,\n  EDIV: true,\n  EQ: true,\n  EXEC: true,\n  FAILWITH: true,\n  GE: true,\n  GET_AND_UPDATE: true,\n  GT: true,\n  HASH_KEY: true,\n  IMPLICIT_ACCOUNT: true,\n  INT: true,\n  ISNAT: true,\n  JOIN_TICKETS: true,\n  KECCAK: true,\n  LE: true,\n  LEVEL: true,\n  LSL: true,\n  LSR: true,\n  LT: true,\n  MEM: true,\n  MUL: true,\n  NEG: true,\n  NEQ: true,\n  NEVER: true,\n  NOT: true,\n  NOW: true,\n  OR: true,\n  PACK: true,\n  PAIRING_CHECK: true,\n  READ_TICKET: true,\n  SAPLING_VERIFY_UPDATE: true,\n  SELF: true,\n  SELF_ADDRESS: true,\n  SENDER: true,\n  SET_DELEGATE: true,\n  SHA256: true,\n  SHA3: true,\n  SHA512: true,\n  SIZE: true,\n  SLICE: true,\n  SOME: true,\n  SOURCE: true,\n  SPLIT_TICKET: true,\n  SUB: true,\n  SWAP: true,\n  TICKET: true,\n  TOTAL_VOTING_POWER: true,\n  TRANSFER_TOKENS: true,\n  UNIT: true,\n  VOTING_POWER: true,\n  XOR: true,\n  RENAME: true,\n  OPEN_CHEST: true,\n  SUB_MUTEZ: true,\n  MIN_BLOCK_TIME: true,\n};\n\nexport const instructionIDs: Record<MichelsonInstruction['prim'], true> = Object.assign(\n  {},\n  noArgInstructionIDs,\n  {\n    CONTRACT: true,\n    CREATE_CONTRACT: true,\n    DIG: true,\n    DIP: true,\n    DROP: true,\n    DUG: true,\n    DUP: true,\n    EMPTY_BIG_MAP: true,\n    EMPTY_MAP: true,\n    EMPTY_SET: true,\n    GET: true,\n    IF: true,\n    IF_CONS: true,\n    IF_LEFT: true,\n    IF_NONE: true,\n    ITER: true,\n    LAMBDA: true,\n    LEFT: true,\n    LOOP: true,\n    LOOP_LEFT: true,\n    MAP: true,\n    NIL: true,\n    NONE: true,\n    PAIR: true,\n    PUSH: true,\n    RIGHT: true,\n    SAPLING_EMPTY_STATE: true,\n    UNPACK: true,\n    UNPAIR: true,\n    UPDATE: true,\n    CAST: true,\n    VIEW: true,\n  } as const\n);\n\nconst simpleComparableTypeIDs: Record<MichelsonSimpleComparableTypeID, true> = {\n  unit: true,\n  never: true,\n  bool: true,\n  int: true,\n  nat: true,\n  string: true,\n  chain_id: true,\n  bytes: true,\n  mutez: true,\n  key_hash: true,\n  key: true,\n  signature: true,\n  timestamp: true,\n  address: true,\n  tx_rollup_l2_address: true,\n};\n\nconst typeIDs: Record<MichelsonTypeID, true> = Object.assign({}, simpleComparableTypeIDs, {\n  or: true,\n  pair: true,\n  set: true,\n  big_map: true,\n  contract: true,\n  lambda: true,\n  list: true,\n  map: true,\n  operation: true,\n  option: true,\n  bls12_381_g1: true,\n  bls12_381_g2: true,\n  bls12_381_fr: true,\n  sapling_transaction: true,\n  sapling_state: true,\n  ticket: true,\n  chest_key: true,\n  chest: true,\n} as const);\n\nexport class MichelsonValidationError extends MichelsonError {\n  /**\n   * @param val Value of a node caused the error\n   * @param message An error message\n   */\n  constructor(public val: Expr, message?: string) {\n    super(val, message);\n    Object.setPrototypeOf(this, MichelsonValidationError.prototype);\n  }\n}\n\nfunction isPrim(ex: Expr): ex is Prim {\n  return 'prim' in ex;\n}\n\nfunction isPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n  return Array.isArray(ex) || 'prim' in ex;\n}\n\nfunction assertPrim(ex: Expr): ex is Prim {\n  if (isPrim(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'prim expression expected');\n}\n\nfunction assertSeq(ex: Expr): ex is Expr[] {\n  if (Array.isArray(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'sequence expression expected');\n}\n\nfunction assertPrimOrSeq(ex: Expr): ex is Prim | Expr[] {\n  if (isPrimOrSeq(ex)) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'prim or sequence expression expected');\n}\n\nfunction assertNatural(i: IntLiteral) {\n  if (i.int[0] === '-') {\n    throw new MichelsonValidationError(i, 'natural number expected');\n  }\n}\n\nfunction assertIntLiteral(ex: Expr): ex is IntLiteral {\n  if ('int' in ex) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'int literal expected');\n}\n\nfunction assertStringLiteral(ex: Expr): ex is StringLiteral {\n  if ('string' in ex) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, 'string literal expected');\n}\n\nfunction assertArgs<N extends number>(\n  ex: Prim,\n  n: N\n): ex is N extends 0 ? NoArgs<Prim<string>> : ReqArgs<Prim<string, Tuple<N, Expr>>> {\n  if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n    return true;\n  }\n  throw new MichelsonValidationError(ex, `${n} arguments expected`);\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonInstruction(ex: Expr): ex is MichelsonCode {\n  if (Array.isArray(ex)) {\n    for (const n of ex) {\n      if (!Array.isArray(n) && !isPrim(n)) {\n        throw new MichelsonValidationError(ex, 'sequence or prim expected');\n      }\n      assertMichelsonInstruction(n);\n    }\n    return true;\n  }\n\n  if (assertPrim(ex)) {\n    if (Object.prototype.hasOwnProperty.call(noArgInstructionIDs, ex.prim)) {\n      assertArgs(ex, 0);\n      return true;\n    }\n\n    switch (ex.prim) {\n      case 'DROP':\n      case 'PAIR':\n      case 'UNPAIR':\n      case 'DUP':\n      case 'UPDATE':\n      case 'GET':\n        if (ex.args !== undefined && assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n        break;\n\n      case 'DIG':\n      case 'DUG':\n      case 'SAPLING_EMPTY_STATE':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n        }\n        break;\n\n      case 'NONE':\n      case 'LEFT':\n      case 'RIGHT':\n      case 'NIL':\n      case 'CAST':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonType(ex.args[0]);\n        }\n        break;\n\n      case 'UNPACK':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPackableType(ex.args[0]);\n        }\n        break;\n\n      case 'CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonPassableType(ex.args[0]);\n        }\n        break;\n\n      case 'IF_NONE':\n      case 'IF_LEFT':\n      case 'IF_CONS':\n      case 'IF':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        }\n        break;\n\n      case 'MAP':\n      case 'ITER':\n      case 'LOOP':\n      case 'LOOP_LEFT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonInstruction(ex.args[0]);\n        }\n        break;\n\n      case 'CREATE_CONTRACT':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonContract(ex.args[0]);\n        }\n        break;\n\n      case 'DIP':\n        if (ex.args?.length === 2) {\n          /* istanbul ignore else */\n          if (assertIntLiteral(ex.args[0])) {\n            assertNatural(ex.args[0]);\n          }\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[1])) {\n            assertMichelsonInstruction(ex.args[1]);\n          }\n        } else if (ex.args?.length === 1) {\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[0])) {\n            assertMichelsonInstruction(ex.args[0]);\n          }\n        } else {\n          throw new MichelsonValidationError(ex, '1 or 2 arguments expected');\n        }\n        break;\n\n      case 'PUSH':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonPushableType(ex.args[0]);\n          assertMichelsonData(ex.args[1]);\n        }\n        break;\n\n      case 'EMPTY_SET':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonComparableType(ex.args[0]);\n        }\n        break;\n\n      case 'EMPTY_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n        }\n        break;\n\n      case 'EMPTY_BIG_MAP':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          assertMichelsonComparableType(ex.args[0]);\n          assertMichelsonBigMapStorableType(ex.args[1]);\n        }\n        break;\n\n      case 'LAMBDA':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 3)) {\n          assertMichelsonType(ex.args[0]);\n          assertMichelsonType(ex.args[1]);\n          /* istanbul ignore else */\n          if (assertSeq(ex.args[2])) {\n            assertMichelsonInstruction(ex.args[2]);\n          }\n        }\n        break;\n\n      case 'VIEW':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 2)) {\n          if (assertStringLiteral(ex.args[0])) {\n            assertViewNameValid(ex.args[0]);\n          }\n          if (assertMichelsonType(ex.args[1])) {\n            assertMichelsonPushableType(ex.args[1]);\n          }\n        }\n        break;\n\n      default:\n        throw new MichelsonValidationError(ex, 'instruction expected');\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonComparableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (Array.isArray(ex) || ex.prim === 'pair' || ex.prim === 'or' || ex.prim === 'option') {\n      traverseType(ex, (ex) => assertMichelsonComparableType(ex));\n    } else if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim)) {\n      throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPackableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state' ||\n        ex.prim === 'ticket'\n      ) {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used inside PACK/UNPACK instructions`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonPackableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPushableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state' ||\n        ex.prim === 'ticket' ||\n        ex.prim === 'contract'\n      ) {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be pushed`);\n      }\n      traverseType(ex, (ex) => assertMichelsonPushableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonStorableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'operation' ||\n        ex.prim === 'contract'\n      ) {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used as part of a storage`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonStorableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonPassableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'operation') {\n        throw new MichelsonValidationError(\n          ex,\n          `${ex.prim}: type can't be used as part of a parameter`\n        );\n      }\n      traverseType(ex, (ex) => assertMichelsonPassableType(ex));\n    }\n  }\n  return true;\n}\n\nexport function assertMichelsonBigMapStorableType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (\n        !Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n        ex.prim === 'big_map' ||\n        ex.prim === 'operation' ||\n        ex.prim === 'sapling_state'\n      ) {\n        throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside a big_map`);\n      }\n      traverseType(ex, (ex) => assertMichelsonBigMapStorableType(ex));\n    }\n  }\n  return true;\n}\n\nconst viewRe = new RegExp('^[a-zA-Z0-9_.%@]*$');\n\nexport function assertViewNameValid(name: StringLiteral): void {\n  if (name.string.length > maxViewNameLength) {\n    throw new MichelsonValidationError(name, `view name too long: ${name.string}`);\n  }\n  if (!viewRe.test(name.string)) {\n    throw new MichelsonValidationError(name, `invalid character(s) in view name: ${name.string}`);\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonType(ex: Expr): ex is MichelsonType {\n  /* istanbul ignore else */\n  if (assertPrimOrSeq(ex)) {\n    if (isPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim)) {\n        throw new MichelsonValidationError(ex, 'type expected');\n      }\n      traverseType(ex, (ex) => assertMichelsonType(ex));\n    }\n  }\n  return true;\n}\n\nfunction traverseType(ex: Prim | Expr[], cb: (ex: Prim | Expr[]) => void): ex is MichelsonType {\n  if (Array.isArray(ex) || ex.prim === 'pair') {\n    const args = Array.isArray(ex) ? ex : ex.args;\n    if (args === undefined || args.length < 2) {\n      throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n    }\n    args.forEach((a) => {\n      if (assertPrimOrSeq(a)) {\n        cb(a);\n      }\n    });\n    return true;\n  }\n\n  switch (ex.prim) {\n    case 'option':\n    case 'list':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        cb(ex.args[0]);\n      }\n      break;\n\n    case 'contract':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonPassableType(ex.args[0]);\n      }\n      break;\n\n    case 'or':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        cb(ex.args[0]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'lambda':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2)) {\n        assertMichelsonType(ex.args[0]);\n        assertMichelsonType(ex.args[1]);\n      }\n      break;\n\n    case 'set':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1)) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n      break;\n\n    case 'map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'big_map':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n        assertMichelsonComparableType(ex.args[0]);\n        assertMichelsonBigMapStorableType(ex.args[1]);\n        cb(ex.args[1]);\n      }\n      break;\n\n    case 'ticket':\n      /* istanbul ignore else */\n      if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n        assertMichelsonComparableType(ex.args[0]);\n      }\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (assertArgs(ex, 1)) {\n        assertIntLiteral(ex.args[0]);\n      }\n      break;\n\n    default:\n      assertArgs(ex, 0);\n  }\n\n  return true;\n}\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonData(ex: Expr): ex is MichelsonData {\n  if ('int' in ex || 'string' in ex || 'bytes' in ex) {\n    return true;\n  }\n\n  if (Array.isArray(ex)) {\n    let mapElts = 0;\n    for (const n of ex) {\n      if (isPrim(n) && n.prim === 'Elt') {\n        /* istanbul ignore else */\n        if (assertArgs(n, 2)) {\n          assertMichelsonData(n.args[0]);\n          assertMichelsonData(n.args[1]);\n        }\n        mapElts++;\n      } else {\n        assertMichelsonData(n);\n      }\n    }\n\n    if (mapElts !== 0 && mapElts !== ex.length) {\n      throw new MichelsonValidationError(ex, \"data entries and map elements can't be intermixed\");\n    }\n    return true;\n  }\n\n  if (isPrim(ex)) {\n    switch (ex.prim) {\n      case 'Unit':\n      case 'True':\n      case 'False':\n      case 'None':\n        assertArgs(ex, 0);\n        break;\n\n      case 'Pair':\n        /* istanbul ignore else */\n        if (ex.args === undefined || ex.args.length < 2) {\n          throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n        }\n        for (const a of ex.args) {\n          assertMichelsonData(a);\n        }\n        break;\n\n      case 'Left':\n      case 'Right':\n      case 'Some':\n        /* istanbul ignore else */\n        if (assertArgs(ex, 1)) {\n          assertMichelsonData(ex.args[0]);\n        }\n        break;\n\n      default:\n        if (Object.prototype.hasOwnProperty.call(instructionIDs, ex.prim)) {\n          assertMichelsonInstruction(ex);\n        } else {\n          throw new MichelsonValidationError(ex, 'data entry or instruction expected');\n        }\n    }\n  } else {\n    throw new MichelsonValidationError(ex, 'data entry expected');\n  }\n\n  return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonContract(ex: Expr): ex is MichelsonContract {\n  /* istanbul ignore else */\n  if (assertSeq(ex)) {\n    const toplevelSec: { [sec: string]: boolean } = {};\n    const views: { [name: string]: boolean } = {};\n    for (const sec of ex) {\n      if (assertPrim(sec)) {\n        if (sec.prim !== 'view') {\n          if (sec.prim in toplevelSec) {\n            throw new MichelsonValidationError(ex, `duplicate contract section: ${sec.prim}`);\n          }\n          toplevelSec[sec.prim] = true;\n        }\n\n        /* istanbul ignore else */\n        switch (sec.prim) {\n          case 'code':\n            if (assertArgs(sec, 1)) {\n              /* istanbul ignore else */\n              if (assertSeq(sec.args[0])) {\n                assertMichelsonInstruction(sec.args[0]);\n              }\n            }\n            break;\n\n          case 'parameter':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonPassableType(sec.args[0]);\n            }\n            if (sec.annots) {\n              throw new MichelsonValidationError(\n                sec,\n                'Annotation must be part of the parameter type'\n              );\n            }\n            break;\n\n          case 'storage':\n            if (assertArgs(sec, 1)) {\n              assertMichelsonStorableType(sec.args[0]);\n            }\n            break;\n\n          case 'view':\n            if (assertArgs(sec, 4)) {\n              if (assertStringLiteral(sec.args[0])) {\n                const name = sec.args[0];\n                if (name.string in views) {\n                  throw new MichelsonValidationError(ex, `duplicate view name: ${name.string}`);\n                }\n                views[name.string] = true;\n                assertViewNameValid(name);\n              }\n\n              assertMichelsonPushableType(sec.args[1]);\n              assertMichelsonPushableType(sec.args[2]);\n              if (assertSeq(sec.args[3])) {\n                assertMichelsonInstruction(sec.args[3]);\n              }\n            }\n            break;\n\n          default:\n            throw new MichelsonValidationError(ex, `unexpected contract section: ${sec.prim}`);\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * @param ex An AST node\n */\nexport function isMichelsonScript(ex: Expr): ex is MichelsonContract {\n  try {\n    assertMichelsonContract(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * @param ex An AST node\n */\nexport function isMichelsonData(ex: Expr): ex is MichelsonData {\n  try {\n    assertMichelsonData(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * @param ex An AST node\n */\nexport function isMichelsonCode(ex: Expr): ex is InstructionList {\n  try {\n    assertMichelsonInstruction(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * @param ex An AST node\n */\nexport function isMichelsonType(ex: Expr): ex is MichelsonType {\n  try {\n    assertMichelsonType(ex);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isInstruction(p: Prim): p is MichelsonInstruction {\n  return Object.prototype.hasOwnProperty.call(instructionIDs, p.prim);\n}\n\nexport function assertDataListIfAny(d: MichelsonData): d is MichelsonData[] {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n  for (const v of d) {\n    if ('prim' in v) {\n      if (isInstruction(v)) {\n        throw new MichelsonError(d, `Instruction outside of a lambda: ${JSON.stringify(d)}`);\n      } else if (v.prim === 'Elt') {\n        throw new MichelsonError(d, `Elt item outside of a map literal: ${JSON.stringify(d)}`);\n      }\n    }\n  }\n  return true;\n}\n","import { BytesLiteral, Expr, IntLiteral, Prim } from './micheline';\nimport {\n  MichelsonTypeID,\n  MichelsonDataID,\n  MichelsonSectionID,\n  MichelsonInstructionID,\n  MichelsonData,\n  MichelsonType,\n  MichelsonDataOr,\n  MichelsonDataOption,\n  MichelsonInstruction,\n} from './michelson-types';\nimport {\n  assertDataListIfAny,\n  assertMichelsonData,\n  assertMichelsonInstruction,\n} from './michelson-validator';\nimport {\n  checkDecodeTezosID,\n  encodeTezosID,\n  hexBytes,\n  isPairData,\n  isPairType,\n  MichelsonTypeError,\n  parseBytes,\n  parseDate,\n  parseHex,\n  unpackComb,\n} from './utils';\n\ntype PrimID =\n  | MichelsonTypeID\n  | MichelsonDataID\n  | MichelsonSectionID\n  | MichelsonInstructionID\n  | 'Elt'\n  | 'constant';\n\nconst primitives: PrimID[] = [\n  'parameter',\n  'storage',\n  'code',\n  'False',\n  'Elt',\n  'Left',\n  'None',\n  'Pair',\n  'Right',\n  'Some',\n  'True',\n  'Unit',\n  'PACK',\n  'UNPACK',\n  'BLAKE2B',\n  'SHA256',\n  'SHA512',\n  'ABS',\n  'ADD',\n  'AMOUNT',\n  'AND',\n  'BALANCE',\n  'CAR',\n  'CDR',\n  'CHECK_SIGNATURE',\n  'COMPARE',\n  'CONCAT',\n  'CONS',\n  'CREATE_ACCOUNT',\n  'CREATE_CONTRACT',\n  'IMPLICIT_ACCOUNT',\n  'DIP',\n  'DROP',\n  'DUP',\n  'EDIV',\n  'EMPTY_MAP',\n  'EMPTY_SET',\n  'EQ',\n  'EXEC',\n  'FAILWITH',\n  'GE',\n  'GET',\n  'GT',\n  'HASH_KEY',\n  'IF',\n  'IF_CONS',\n  'IF_LEFT',\n  'IF_NONE',\n  'INT',\n  'LAMBDA',\n  'LE',\n  'LEFT',\n  'LOOP',\n  'LSL',\n  'LSR',\n  'LT',\n  'MAP',\n  'MEM',\n  'MUL',\n  'NEG',\n  'NEQ',\n  'NIL',\n  'NONE',\n  'NOT',\n  'NOW',\n  'OR',\n  'PAIR',\n  'PUSH',\n  'RIGHT',\n  'SIZE',\n  'SOME',\n  'SOURCE',\n  'SENDER',\n  'SELF',\n  'STEPS_TO_QUOTA',\n  'SUB',\n  'SWAP',\n  'TRANSFER_TOKENS',\n  'SET_DELEGATE',\n  'UNIT',\n  'UPDATE',\n  'XOR',\n  'ITER',\n  'LOOP_LEFT',\n  'ADDRESS',\n  'CONTRACT',\n  'ISNAT',\n  'CAST',\n  'RENAME',\n  'bool',\n  'contract',\n  'int',\n  'key',\n  'key_hash',\n  'lambda',\n  'list',\n  'map',\n  'big_map',\n  'nat',\n  'option',\n  'or',\n  'pair',\n  'set',\n  'signature',\n  'string',\n  'bytes',\n  'mutez',\n  'timestamp',\n  'unit',\n  'operation',\n  'address',\n  'SLICE',\n  'DIG',\n  'DUG',\n  'EMPTY_BIG_MAP',\n  'APPLY',\n  'chain_id',\n  'CHAIN_ID',\n  'LEVEL',\n  'SELF_ADDRESS',\n  'never',\n  'NEVER',\n  'UNPAIR',\n  'VOTING_POWER',\n  'TOTAL_VOTING_POWER',\n  'KECCAK',\n  'SHA3',\n  'PAIRING_CHECK',\n  'bls12_381_g1',\n  'bls12_381_g2',\n  'bls12_381_fr',\n  'sapling_state',\n  'sapling_transaction',\n  'SAPLING_EMPTY_STATE',\n  'SAPLING_VERIFY_UPDATE',\n  'ticket',\n  'TICKET',\n  'READ_TICKET',\n  'SPLIT_TICKET',\n  'JOIN_TICKETS',\n  'GET_AND_UPDATE',\n  'chest',\n  'chest_key',\n  'OPEN_CHEST',\n  'VIEW',\n  'view',\n  'constant',\n  'SUB_MUTEZ',\n];\n\nconst primTags: { [key in PrimID]?: number } & { [key: string]: number | undefined } =\n  Object.assign({}, ...primitives.map((v, i) => ({ [v]: i })));\n\nenum Tag {\n  Int = 0,\n  String = 1,\n  Sequence = 2,\n  Prim0 = 3,\n  Prim0Annot = 4,\n  Prim1 = 5,\n  Prim1Annot = 6,\n  Prim2 = 7,\n  Prim2Annot = 8,\n  Prim = 9,\n  Bytes = 10,\n}\nclass Writer {\n  public buffer: number[] = [];\n\n  get length(): number {\n    return this.buffer.length;\n  }\n\n  writeBytes(val: number[]) {\n    this.buffer.push(...val.map((v) => v & 0xff));\n  }\n\n  writeUint8(val: number) {\n    const v = val | 0;\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint16(val: number) {\n    const v = val | 0;\n    this.buffer.push((v >> 8) & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeUint32(val: number) {\n    const v = val | 0;\n    this.buffer.push((v >> 24) & 0xff);\n    this.buffer.push((v >> 16) & 0xff);\n    this.buffer.push((v >> 8) & 0xff);\n    this.buffer.push(v & 0xff);\n  }\n\n  writeInt8(val: number) {\n    this.writeUint8(val);\n  }\n\n  writeInt16(val: number) {\n    this.writeUint16(val);\n  }\n\n  writeInt32(val: number) {\n    this.writeUint32(val);\n  }\n}\n\nconst boundsErr = new Error('bounds out of range');\nclass Reader {\n  constructor(\n    private buffer: number[] | Uint8Array,\n    private idx: number = 0,\n    private cap: number = buffer.length\n  ) {}\n\n  /** Remaining length */\n  get length(): number {\n    return this.cap - this.idx;\n  }\n\n  readBytes(len: number): number[] | Uint8Array {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n    const ret = this.buffer.slice(this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  reader(len: number): Reader {\n    if (this.cap - this.idx < len) {\n      throw boundsErr;\n    }\n    const ret = new Reader(this.buffer, this.idx, this.idx + len);\n    this.idx += len;\n    return ret;\n  }\n\n  copy(): Reader {\n    return new Reader(this.buffer, this.idx, this.cap);\n  }\n\n  readUint8(): number {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n    return this.buffer[this.idx++] >>> 0;\n  }\n\n  readUint16(): number {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return ((x0 << 8) | x1) >>> 0;\n  }\n\n  readUint32(): number {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return ((x0 << 24) | (x1 << 16) | (x2 << 8) | x3) >>> 0;\n  }\n\n  readInt8(): number {\n    if (this.cap - this.idx < 1) {\n      throw boundsErr;\n    }\n    const x = this.buffer[this.idx++];\n    return (x << 24) >> 24;\n  }\n\n  readInt16(): number {\n    if (this.cap - this.idx < 2) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    return (((x0 << 8) | x1) << 16) >> 16;\n  }\n\n  readInt32(): number {\n    if (this.cap - this.idx < 4) {\n      throw boundsErr;\n    }\n    const x0 = this.buffer[this.idx++];\n    const x1 = this.buffer[this.idx++];\n    const x2 = this.buffer[this.idx++];\n    const x3 = this.buffer[this.idx++];\n    return (x0 << 24) | (x1 << 16) | (x2 << 8) | x3;\n  }\n}\n\nenum ContractID {\n  Implicit = 0,\n  Originated = 1,\n}\n\nenum PublicKeyHashID {\n  ED25519 = 0,\n  SECP256K1 = 1,\n  P256 = 2,\n}\n\ntype AddressType =\n  | 'ED25519PublicKeyHash'\n  | 'SECP256K1PublicKeyHash'\n  | 'P256PublicKeyHash'\n  | 'ContractHash';\n\nexport interface Address {\n  type: AddressType;\n  hash: number[] | Uint8Array;\n  entryPoint?: string;\n}\n\nfunction readPublicKeyHash(rd: Reader): Address {\n  let type: AddressType;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case PublicKeyHashID.ED25519:\n      type = 'ED25519PublicKeyHash';\n      break;\n    case PublicKeyHashID.SECP256K1:\n      type = 'SECP256K1PublicKeyHash';\n      break;\n    case PublicKeyHashID.P256:\n      type = 'P256PublicKeyHash';\n      break;\n    default:\n      throw new Error(`unknown public key hash tag: ${tag}`);\n  }\n  return { type, hash: rd.readBytes(20) };\n}\n\nfunction readAddress(rd: Reader): Address {\n  let address: Address;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case ContractID.Implicit:\n      address = readPublicKeyHash(rd);\n      break;\n\n    case ContractID.Originated:\n      address = {\n        type: 'ContractHash',\n        hash: rd.readBytes(20),\n      };\n      rd.readBytes(1);\n      break;\n\n    default:\n      throw new Error(`unknown address tag: ${tag}`);\n  }\n\n  if (rd.length !== 0) {\n    // entry point\n    const dec = new TextDecoder();\n    address.entryPoint = dec.decode(new Uint8Array(rd.readBytes(rd.length)));\n  }\n  return address;\n}\n\nfunction writePublicKeyHash(a: Address, w: Writer): void {\n  let tag: PublicKeyHashID;\n  switch (a.type) {\n    case 'ED25519PublicKeyHash':\n      tag = PublicKeyHashID.ED25519;\n      break;\n    case 'SECP256K1PublicKeyHash':\n      tag = PublicKeyHashID.SECP256K1;\n      break;\n    case 'P256PublicKeyHash':\n      tag = PublicKeyHashID.P256;\n      break;\n    default:\n      throw new Error(`unexpected address type: ${a.type}`);\n  }\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(a.hash));\n}\n\nfunction writeAddress(a: Address, w: Writer): void {\n  if (a.type === 'ContractHash') {\n    w.writeUint8(ContractID.Originated);\n    w.writeBytes(Array.from(a.hash));\n    w.writeUint8(0);\n  } else {\n    w.writeUint8(ContractID.Implicit);\n    writePublicKeyHash(a, w);\n  }\n\n  if (a.entryPoint !== undefined && a.entryPoint !== '' && a.entryPoint !== 'default') {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(a.entryPoint);\n    w.writeBytes(Array.from(bytes));\n  }\n}\n\nenum PublicKeyID {\n  ED25519 = 0,\n  SECP256K1 = 1,\n  P256 = 2,\n}\n\nexport type PublicKeyType = 'ED25519PublicKey' | 'SECP256K1PublicKey' | 'P256PublicKey';\nexport interface PublicKey {\n  type: PublicKeyType;\n  publicKey: number[] | Uint8Array;\n}\n\nfunction readPublicKey(rd: Reader): PublicKey {\n  let ln: number;\n  let type: PublicKeyType;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case PublicKeyID.ED25519:\n      type = 'ED25519PublicKey';\n      ln = 32;\n      break;\n    case PublicKeyID.SECP256K1:\n      type = 'SECP256K1PublicKey';\n      ln = 33;\n      break;\n    case PublicKeyID.P256:\n      type = 'P256PublicKey';\n      ln = 33;\n      break;\n    default:\n      throw new Error(`unknown public key tag: ${tag}`);\n  }\n  return { type, publicKey: rd.readBytes(ln) };\n}\n\nfunction writePublicKey(pk: PublicKey, w: Writer): void {\n  let tag: PublicKeyID;\n  switch (pk.type) {\n    case 'ED25519PublicKey':\n      tag = PublicKeyID.ED25519;\n      break;\n    case 'SECP256K1PublicKey':\n      tag = PublicKeyID.SECP256K1;\n      break;\n    case 'P256PublicKey':\n      tag = PublicKeyID.P256;\n      break;\n    default:\n      throw new Error(`unexpected public key type: ${pk.type}`);\n  }\n  w.writeUint8(tag);\n  w.writeBytes(Array.from(pk.publicKey));\n}\n\ntype WriteTransformFunc = (e: Expr) => [Expr, IterableIterator<WriteTransformFunc>];\n\nfunction writeExpr(expr: Expr, wr: Writer, tf: WriteTransformFunc): void {\n  const [e, args] = tf(expr);\n\n  if (Array.isArray(e)) {\n    const w = new Writer();\n    for (const v of e) {\n      const a = args.next();\n      if (a.done) {\n        throw new Error('REPORT ME: iterator is done');\n      }\n      writeExpr(v, w, a.value);\n    }\n    wr.writeUint8(Tag.Sequence);\n    wr.writeUint32(w.length);\n    wr.writeBytes(w.buffer);\n    return;\n  }\n\n  if ('string' in e) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.string);\n    wr.writeUint8(Tag.String);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n    return;\n  }\n\n  if ('int' in e) {\n    wr.writeUint8(Tag.Int);\n    let val = BigInt(e.int);\n    const sign = val < 0;\n    if (sign) {\n      val = -val;\n    }\n    let i = 0;\n    do {\n      const bits = i === 0 ? BigInt(6) : BigInt(7);\n      let byte = val & ((BigInt(1) << bits) - BigInt(1));\n      val >>= bits;\n      if (val) {\n        byte |= BigInt(0x80);\n      }\n      if (i === 0 && sign) {\n        byte |= BigInt(0x40);\n      }\n      wr.writeUint8(Number(byte));\n      i++;\n    } while (val);\n    return;\n  }\n\n  if ('bytes' in e) {\n    const bytes = parseHex(e.bytes);\n    wr.writeUint8(Tag.Bytes);\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(bytes);\n    return;\n  }\n\n  const prim = primTags[e.prim];\n  if (prim === undefined) {\n    throw new TypeError(`Can't encode primary: ${e.prim}`);\n  }\n\n  const tag =\n    (e.args?.length || 0) < 3\n      ? Tag.Prim0 +\n        (e.args?.length || 0) * 2 +\n        (e.annots === undefined || e.annots.length === 0 ? 0 : 1)\n      : Tag.Prim;\n\n  wr.writeUint8(tag);\n  wr.writeUint8(prim);\n\n  if (e.args !== undefined) {\n    if (e.args.length < 3) {\n      for (const v of e.args) {\n        const a = args.next();\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n        writeExpr(v, wr, a.value);\n      }\n    } else {\n      const w = new Writer();\n      for (const v of e.args) {\n        const a = args.next();\n        if (a.done) {\n          throw new Error('REPORT ME: iterator is done');\n        }\n        writeExpr(v, w, a.value);\n      }\n      wr.writeUint32(w.length);\n      wr.writeBytes(w.buffer);\n    }\n  }\n\n  if (e.annots !== undefined && e.annots.length !== 0) {\n    const enc = new TextEncoder();\n    const bytes = enc.encode(e.annots.join(' '));\n    wr.writeUint32(bytes.length);\n    wr.writeBytes(Array.from(bytes));\n  } else if (e.args !== undefined && e.args.length >= 3) {\n    wr.writeUint32(0);\n  }\n}\n\ntype ReadTransformFuncs = [(e: Expr) => IterableIterator<ReadTransformFuncs>, (e: Expr) => Expr];\n\nfunction readExpr(rd: Reader, tf: ReadTransformFuncs): Expr {\n  function* passThrough() {\n    while (true) {\n      yield readPassThrough;\n    }\n  }\n  const [args, tr] = tf;\n  const tag = rd.readUint8();\n  switch (tag) {\n    case Tag.Int: {\n      const buf: number[] = [];\n      let byte: number;\n      do {\n        byte = rd.readInt8();\n        buf.push(byte);\n      } while ((byte & 0x80) !== 0);\n      let val = BigInt(0);\n      let sign = false;\n      for (let i = buf.length - 1; i >= 0; i--) {\n        const bits = i === 0 ? BigInt(6) : BigInt(7);\n        const byte = BigInt(buf[i]);\n        val <<= bits;\n        val |= byte & ((BigInt(1) << bits) - BigInt(1));\n        if (i === 0) {\n          sign = !!(byte & BigInt(0x40));\n        }\n      }\n      if (sign) {\n        val = -val;\n      }\n      return tr({ int: String(val) });\n    }\n\n    case Tag.String: {\n      const length = rd.readUint32();\n      const bytes = rd.readBytes(length);\n      const dec = new TextDecoder();\n      return tr({ string: dec.decode(new Uint8Array(bytes)) });\n    }\n\n    case Tag.Bytes: {\n      const length = rd.readUint32();\n      const bytes = rd.readBytes(length);\n      const hex = hexBytes(Array.from(bytes));\n      return tr({ bytes: hex });\n    }\n\n    case Tag.Sequence: {\n      const length = rd.readUint32();\n      let res: Expr[] = [];\n      let savedrd = rd.copy();\n      // make two passes\n      let it: IterableIterator<ReadTransformFuncs> = passThrough();\n      for (let n = 0; n < 2; n++) {\n        const r = savedrd.reader(length);\n        res = [];\n        while (r.length > 0) {\n          const a = it.next();\n          if (a.done) {\n            throw new Error('REPORT ME: iterator is done');\n          }\n          res.push(readExpr(r, a.value));\n        }\n        // make a second pass with injected side effects\n        it = args(res);\n        savedrd = rd;\n      }\n      return tr(res);\n    }\n\n    default: {\n      if (tag > 9) {\n        throw new Error(`Unknown tag: ${tag}`);\n      }\n      const p = rd.readUint8();\n      if (p >= primitives.length) {\n        throw new Error(`Unknown primitive tag: ${p}`);\n      }\n      const prim = primitives[p];\n      const argn = (tag - 3) >> 1;\n      let res: Prim = { prim };\n      // make two passes\n      let it: IterableIterator<ReadTransformFuncs> = passThrough();\n      let savedrd = rd.copy();\n      for (let n = 0; n < 2; n++) {\n        res = { prim };\n        if (argn < 3) {\n          for (let i = 0; i < argn; i++) {\n            const a = it.next();\n            if (a.done) {\n              throw new Error('REPORT ME: iterator is done');\n            }\n            res.args = res.args || [];\n            res.args.push(readExpr(savedrd, a.value));\n          }\n        } else {\n          res.args = res.args || [];\n          const length = savedrd.readUint32();\n          const r = savedrd.reader(length);\n          while (r.length > 0) {\n            const a = it.next();\n            if (a.done) {\n              throw new Error('REPORT ME: iterator is done');\n            }\n            res.args.push(readExpr(r, a.value));\n          }\n        }\n        // make a second pass with injected side effects\n        it = args(res);\n        savedrd = rd;\n      }\n\n      if (((tag - 3) & 1) === 1 || argn === 3) {\n        // read annotations\n        const length = rd.readUint32();\n        if (length !== 0) {\n          const bytes = rd.readBytes(length);\n          const dec = new TextDecoder();\n          res.annots = dec.decode(new Uint8Array(bytes)).split(' ');\n        }\n      }\n      return tr(res);\n    }\n  }\n}\n\nconst isOrData = (e: Expr): e is MichelsonDataOr =>\n  'prim' in e && (e.prim === 'Left' || e.prim === 'Right');\nconst isOptionData = (e: Expr): e is MichelsonDataOption =>\n  'prim' in e && (e.prim === 'Some' || e.prim === 'None');\n\nconst getWriteTransformFunc = (t: MichelsonType): WriteTransformFunc => {\n  if (isPairType(t)) {\n    return (d: Expr) => {\n      if (!isPairData(d)) {\n        throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n      }\n      assertDataListIfAny(d);\n      // combs aren't used in pack format\n      const tc = unpackComb('pair', t);\n      const dc = unpackComb('Pair', d);\n      return [\n        dc,\n        (function* () {\n          for (const a of tc.args) {\n            yield getWriteTransformFunc(a);\n          }\n        })(),\n      ];\n    };\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return (d: Expr) => {\n        if (!isOrData(d)) {\n          throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* () {\n            yield getWriteTransformFunc(t.args[d.prim === 'Left' ? 0 : 1]);\n          })(),\n        ];\n      };\n\n    case 'option':\n      return (d: Expr) => {\n        if (!isOptionData(d)) {\n          throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* () {\n            const dd = d;\n            if (dd.prim === 'Some') {\n              yield getWriteTransformFunc(t.args[0]);\n            }\n          })(),\n        ];\n      };\n\n    case 'list':\n    case 'set':\n      return (d: Expr) => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* () {\n            for (const _v of d) {\n              yield getWriteTransformFunc(t.args[0]);\n            }\n          })(),\n        ];\n      };\n\n    case 'map':\n      return (d: Expr) => {\n        if (!Array.isArray(d)) {\n          throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n        }\n        return [\n          d,\n          (function* (): Generator<WriteTransformFunc> {\n            for (const _elt of d) {\n              yield (elt: Expr) => {\n                if (!('prim' in elt) || elt.prim !== 'Elt') {\n                  throw new MichelsonTypeError(\n                    t,\n                    elt,\n                    `map element expected: ${JSON.stringify(elt)}`\n                  );\n                }\n                return [\n                  elt,\n                  (function* () {\n                    for (const a of t.args) {\n                      yield getWriteTransformFunc(a);\n                    }\n                  })(),\n                ];\n              };\n            }\n          })(),\n        ];\n      };\n\n    case 'chain_id':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const id = checkDecodeTezosID(d.string, 'ChainID');\n          if (id === null) {\n            throw new MichelsonTypeError(t, d, `chain id base58 expected: ${d.string}`);\n          }\n          bytes = { bytes: hexBytes(id[1]) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'signature':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const sig = checkDecodeTezosID(\n            d.string,\n            'ED25519Signature',\n            'SECP256K1Signature',\n            'P256Signature',\n            'GenericSignature'\n          );\n          if (sig === null) {\n            throw new MichelsonTypeError(t, d, `signature base58 expected: ${d.string}`);\n          }\n          bytes = { bytes: hexBytes(sig[1]) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key_hash':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const pkh = checkDecodeTezosID(\n            d.string,\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash'\n          );\n          if (pkh === null) {\n            throw new MichelsonTypeError(t, d, `key hash base58 expected: ${d.string}`);\n          }\n          const w = new Writer();\n          writePublicKeyHash({ type: pkh[0], hash: pkh[1] }, w);\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'key':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const key = checkDecodeTezosID(\n            d.string,\n            'ED25519PublicKey',\n            'SECP256K1PublicKey',\n            'P256PublicKey'\n          );\n          if (key === null) {\n            throw new MichelsonTypeError(t, d, `public key base58 expected: ${d.string}`);\n          }\n          const w = new Writer();\n          writePublicKey({ type: key[0], publicKey: key[1] }, w);\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'address':\n      return (d: Expr) => {\n        if (!('bytes' in d) && !('string' in d)) {\n          throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n        }\n        let bytes: BytesLiteral;\n        if ('string' in d) {\n          const s = d.string.split('%');\n          const address = checkDecodeTezosID(\n            s[0],\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash',\n            'ContractHash'\n          );\n          if (address === null) {\n            throw new MichelsonTypeError(t, d, `address base58 expected: ${d.string}`);\n          }\n          const w = new Writer();\n          writeAddress(\n            { type: address[0], hash: address[1], entryPoint: s.length > 1 ? s[1] : undefined },\n            w\n          );\n          bytes = { bytes: hexBytes(w.buffer) };\n        } else {\n          bytes = d;\n        }\n        return [bytes, [][Symbol.iterator]()];\n      };\n\n    case 'timestamp':\n      return (d: Expr) => {\n        if (!('string' in d) && !('int' in d)) {\n          throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n        }\n        let int: IntLiteral;\n        if ('string' in d) {\n          const p = parseDate(d);\n          if (p === null) {\n            throw new MichelsonTypeError(t, d, `can't parse date: ${d.string}`);\n          }\n          int = { int: String(Math.floor(p.getTime() / 1000)) };\n        } else {\n          int = d;\n        }\n        return [int, [][Symbol.iterator]()];\n      };\n\n    default:\n      return writePassThrough;\n  }\n};\n\ntype PushInstruction = MichelsonInstruction & Prim<'PUSH'>;\nconst isPushInstruction = (e: Expr): e is PushInstruction => 'prim' in e && e.prim === 'PUSH';\n\nconst writePassThrough: WriteTransformFunc = (e: Expr) => {\n  if (isPushInstruction(e)) {\n    assertMichelsonInstruction(e);\n    // capture inlined type definition\n    return [\n      e,\n      (function* () {\n        yield writePassThrough;\n        yield getWriteTransformFunc(e.args[0]);\n      })(),\n    ];\n  }\n\n  return [\n    e,\n    (function* () {\n      while (true) {\n        yield writePassThrough;\n      }\n    })(),\n  ];\n};\n\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Without a type definition (not recommended) the data will be encoded as a binary form of a generic Michelson expression.\n * Type definition allows some types like `timestamp` and `address` and other base58 representable types to be encoded to\n * corresponding optimized binary forms borrowed from the Tezos protocol\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"address\"\n * };\n *\n * const packed = packData(data, typ);\n *\n * // 050a0000001901be41ee922ddd2cf33201e49d32da0afec571dce300666f6f\n * ```\n *\n * Without a type definition the base58 encoded address will be treated as a string\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const packed = packData(data);\n *\n * // 0501000000284b543152766b7746344637707a3167436f786b795a724731526b7278517933676d46547625666f6f\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as numeric array\n */\nexport function packData(d: MichelsonData, t?: MichelsonType): number[] {\n  const w = new Writer();\n  w.writeUint8(5);\n  writeExpr(d, w, t !== undefined ? getWriteTransformFunc(t) : writePassThrough);\n  return w.buffer;\n}\n\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Same as {@link packData} but returns a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"2019-09-26T10:59:51Z\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const packed = packDataBytes(data, typ);\n *\n * // { bytes: \"0500a7e8e4d80b\" }\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as a bytes literal\n */\nexport function packDataBytes(d: MichelsonData, t?: MichelsonType): BytesLiteral {\n  return { bytes: hexBytes(packData(d, t)) };\n}\n\nconst getReadTransformFuncs = (t: MichelsonType): ReadTransformFuncs => {\n  if (isPairType(t)) {\n    const args = Array.isArray(t) ? t : t.args;\n    return [\n      (d: Expr) => {\n        if (!isPairData(d)) {\n          throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n        }\n        return (function* () {\n          for (const a of args) {\n            yield getReadTransformFuncs(a);\n          }\n        })();\n      },\n      (d: Expr) => d,\n    ];\n  }\n\n  switch (t.prim) {\n    case 'or':\n      return [\n        (d: Expr) => {\n          if (!isOrData(d)) {\n            throw new MichelsonTypeError(t, d, `or expected: ${JSON.stringify(d)}`);\n          }\n          return (function* () {\n            yield getReadTransformFuncs(t.args[d.prim === 'Left' ? 0 : 1]);\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'option':\n      return [\n        (d: Expr) => {\n          if (!isOptionData(d)) {\n            throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n          }\n          return (function* () {\n            if (d.prim === 'Some') {\n              yield getReadTransformFuncs(t.args[0]);\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'list':\n    case 'set':\n      return [\n        (d: Expr) => {\n          if (!Array.isArray(d)) {\n            throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n          }\n          return (function* () {\n            while (true) {\n              yield getReadTransformFuncs(t.args[0]);\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'map':\n      return [\n        (d: Expr): IterableIterator<ReadTransformFuncs> => {\n          if (!Array.isArray(d)) {\n            throw new MichelsonTypeError(t, d, `map expected: ${JSON.stringify(d)}`);\n          }\n          return (function* (): Generator<ReadTransformFuncs> {\n            while (true) {\n              yield [\n                (elt: Expr) => {\n                  if (!('prim' in elt) || elt.prim !== 'Elt') {\n                    throw new MichelsonTypeError(\n                      t,\n                      elt,\n                      `map element expected: ${JSON.stringify(elt)}`\n                    );\n                  }\n                  return (function* () {\n                    for (const a of t.args) {\n                      yield getReadTransformFuncs(a);\n                    }\n                  })();\n                },\n                (elt: Expr) => elt,\n              ];\n            }\n          })();\n        },\n        (d: Expr) => d,\n      ];\n\n    case 'chain_id':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          return { string: encodeTezosID('ChainID', bytes) };\n        },\n      ];\n\n    case 'signature':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          return { string: encodeTezosID('GenericSignature', bytes) };\n        },\n      ];\n\n    case 'key_hash':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const addr = readPublicKeyHash(rd);\n          return {\n            string:\n              encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n          };\n        },\n      ];\n\n    case 'key':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const pk = readPublicKey(rd);\n          return { string: encodeTezosID(pk.type, pk.publicKey) };\n        },\n      ];\n\n    case 'address':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('bytes' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const bytes = parseBytes(d.bytes);\n          if (bytes === null) {\n            throw new MichelsonTypeError(t, d, `can't parse bytes: ${d.bytes}`);\n          }\n          const rd = new Reader(new Uint8Array(bytes));\n          const addr = readAddress(rd);\n          return {\n            string:\n              encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n          };\n        },\n      ];\n\n    case 'timestamp':\n      return [\n        () => [][Symbol.iterator](),\n        (d: Expr) => {\n          if (!('int' in d) && !('string' in d)) {\n            throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n          }\n          if ('string' in d) {\n            return d;\n          }\n          const date = new Date(parseInt(d.int, 10) * 1000);\n          return { string: date.toISOString().slice(0, 19) + 'Z' };\n        },\n      ];\n\n    default:\n      return readPassThrough;\n  }\n};\n\nconst readPassThrough: ReadTransformFuncs = [\n  (e: Expr) => {\n    if (isPushInstruction(e)) {\n      assertMichelsonInstruction(e);\n      // capture inlined type definition\n      return (function* () {\n        yield readPassThrough;\n        yield getReadTransformFuncs(e.args[0]);\n      })();\n    }\n\n    return (function* () {\n      while (true) {\n        yield readPassThrough;\n      }\n    })();\n  },\n  (e: Expr) => e,\n];\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Without a type definition (not recommended) the binary data will be treated as a binary form of a generic Michelson expression and returned as is.\n * Type definition allows some types like `timestamp` and `address` and other types usually encoded in optimized binary forms to be transformed\n * back to their string representations like base58 and ISO timestamps.\n *\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackData(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n *\n * Same binary data without a type definition\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const data = unpackData(src);\n *\n * // { int: \"1569495591\" }\n * ```\n * @param src Byte array\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackData(src: number[] | Uint8Array, t?: MichelsonType): MichelsonData {\n  const r = new Reader(src);\n  if (r.readUint8() !== 5) {\n    throw new Error('incorrect packed data magic number');\n  }\n  const ex = readExpr(r, t !== undefined ? getReadTransformFuncs(t) : readPassThrough);\n  if (assertMichelsonData(ex)) {\n    return ex;\n  }\n  throw new Error(); // never\n}\n\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Same as {@link unpackData} but takes a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const src = { bytes: \"0500a7e8e4d80b\" };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackDataBytes(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n * @param src Bytes object\n * @param t Optional type definition\n * @returns Deserialized data\n */\nexport function unpackDataBytes(src: BytesLiteral, t?: MichelsonType): MichelsonData {\n  const bytes = parseBytes(src.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${src.bytes}\"`);\n  }\n  return unpackData(bytes, t);\n}\n\n// helper functions also used by validator\n\nexport function decodeAddressBytes(b: BytesLiteral): Address {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readAddress(rd);\n}\n\nexport function decodePublicKeyHashBytes(b: BytesLiteral): Address {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKeyHash(rd);\n}\n\nexport function decodePublicKeyBytes(b: BytesLiteral): PublicKey {\n  const bytes = parseBytes(b.bytes);\n  if (bytes === null) {\n    throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n  }\n  const rd = new Reader(new Uint8Array(bytes));\n  return readPublicKey(rd);\n}\n","import { Prim, Expr } from './micheline';\nimport {\n  MichelsonType,\n  MichelsonData,\n  MichelsonCode,\n  MichelsonTypeOption,\n  MichelsonContract,\n  MichelsonContractSection,\n  MichelsonReturnType,\n  MichelsonTypePair,\n  MichelsonInstruction,\n  InstructionList,\n  MichelsonTypeID,\n  MichelsonTypeOr,\n  DefaultProtocol,\n  Protocol,\n  refContract,\n  MichelsonTypeAddress,\n  MichelsonContractView,\n  ProtoInferiorTo,\n} from './michelson-types';\nimport {\n  unpackAnnotations,\n  MichelsonError,\n  isNatural,\n  LongInteger,\n  parseBytes,\n  compareBytes,\n  isDecimal,\n  checkDecodeTezosID,\n  UnpackedAnnotations,\n  Nullable,\n  UnpackAnnotationsOptions,\n  unpackComb,\n  MichelsonTypeError,\n  isPairType,\n  isPairData,\n  parseDate,\n} from './utils';\nimport { decodeBase58Check } from './base58';\nimport { decodeAddressBytes, decodePublicKeyBytes, decodePublicKeyHashBytes } from './binary';\nimport {\n  assertMichelsonComparableType,\n  assertMichelsonPackableType,\n  assertMichelsonStorableType,\n  assertMichelsonBigMapStorableType,\n  assertMichelsonPushableType,\n  isInstruction,\n  assertDataListIfAny,\n} from './michelson-validator';\nimport { ParserOptions } from './micheline-parser';\n\nexport interface Context extends ParserOptions {\n  contract?: MichelsonContract;\n  traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class MichelsonInstructionError extends MichelsonError<MichelsonCode> {\n  /**\n   * @param val Value of a type node caused the error\n   * @param stackState Current stack state\n   * @param message An error message\n   */\n  constructor(val: MichelsonCode, public stackState: MichelsonReturnType, message?: string) {\n    super(val, message);\n    Object.setPrototypeOf(this, MichelsonInstructionError.prototype);\n  }\n}\n\n// 'sequence as a pair' edo syntax helpers\nfunction typeID(t: MichelsonType): MichelsonTypeID {\n  return Array.isArray(t) ? 'pair' : t.prim;\n}\n\ntype TypeArgs<T extends MichelsonType> = T extends Prim ? T['args'] : T;\nfunction typeArgs<T extends MichelsonType>(t: T): TypeArgs<T> {\n  return ('prim' in t ? (t as Extract<MichelsonType, Prim>).args : t) as TypeArgs<T>;\n}\n\nfunction assertScalarTypesEqual(a: MichelsonType, b: MichelsonType, field = false): void {\n  if (typeID(a) !== typeID(b)) {\n    throw new MichelsonTypeError(a, undefined, `types mismatch: ${typeID(a)} != ${typeID(b)}`);\n  }\n\n  const ann = [unpackAnnotations(a), unpackAnnotations(b)];\n  if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {\n    throw new MichelsonTypeError(\n      a,\n      undefined,\n      `${typeID(a)}: type names mismatch: ${ann[0].t[0]} != ${ann[1].t[0]}`\n    );\n  }\n  if (field && ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0]) {\n    throw new MichelsonTypeError(\n      a,\n      undefined,\n      `${typeID(a)}: field names mismatch: ${ann[0].f[0]} != ${ann[1].f}`\n    );\n  }\n\n  if (isPairType(a)) {\n    const aArgs = unpackComb('pair', a);\n    const bArgs = unpackComb('pair', b as typeof a);\n    assertScalarTypesEqual(aArgs.args[0], bArgs.args[0], true);\n    assertScalarTypesEqual(aArgs.args[1], bArgs.args[1], true);\n    return;\n  }\n\n  switch (a.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n    case 'ticket':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n      break;\n\n    case 'or':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0], true);\n      assertScalarTypesEqual(a.args[1], (b as typeof a).args[1], true);\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n      assertScalarTypesEqual(a.args[1], (b as typeof a).args[1]);\n      break;\n\n    case 'sapling_state':\n    case 'sapling_transaction':\n      if (parseInt(a.args[0].int, 10) !== parseInt((b as typeof a).args[0].int, 10)) {\n        throw new MichelsonTypeError(\n          a,\n          undefined,\n          `${typeID(a)}: type argument mismatch: ${a.args[0].int} != ${(b as typeof a).args[0].int}`\n        );\n      }\n  }\n}\n\nfunction assertStacksEqual<T1 extends MichelsonType[], T2 extends T1>(a: T1, b: T2): void {\n  if (a.length !== b.length) {\n    throw new MichelsonTypeError(a, undefined, `stack length mismatch: ${a.length} != ${b.length}`);\n  }\n  for (let i = 0; i < a.length; i++) {\n    assertScalarTypesEqual(a[i], b[i]);\n  }\n}\n\nexport function assertTypeAnnotationsValid(t: MichelsonType, field = false): void {\n  if (!Array.isArray(t)) {\n    const ann = unpackAnnotations(t);\n    if ((ann.t?.length || 0) > 1) {\n      throw new MichelsonTypeError(\n        t,\n        undefined,\n        `${t.prim}: at most one type annotation allowed: ${t.annots}`\n      );\n    }\n\n    if (field) {\n      if ((ann.f?.length || 0) > 1) {\n        throw new MichelsonTypeError(\n          t,\n          undefined,\n          `${t.prim}: at most one field annotation allowed: ${t.annots}`\n        );\n      }\n    } else {\n      if ((ann.f?.length || 0) > 0) {\n        throw new MichelsonTypeError(\n          t,\n          undefined,\n          `${t.prim}: field annotations aren't allowed: ${t.annots}`\n        );\n      }\n    }\n  }\n\n  if (isPairType(t)) {\n    const args = typeArgs(t);\n    for (const a of args) {\n      assertTypeAnnotationsValid(a, true);\n    }\n    return;\n  }\n\n  switch (t.prim) {\n    case 'option':\n    case 'list':\n    case 'contract':\n    case 'set':\n      assertTypeAnnotationsValid(t.args[0]);\n      break;\n\n    case 'or':\n      for (const a of t.args) {\n        assertTypeAnnotationsValid(a, true);\n      }\n      break;\n\n    case 'lambda':\n    case 'map':\n    case 'big_map':\n      assertTypeAnnotationsValid(t.args[0]);\n      assertTypeAnnotationsValid(t.args[1]);\n  }\n}\n\n// Data integrity check\n\nfunction _compareMichelsonData(t: MichelsonType, a: MichelsonData, b: MichelsonData): number {\n  if (isPairType(t)) {\n    if (isPairData(a) && isPairData(b)) {\n      assertDataListIfAny(a);\n      assertDataListIfAny(b);\n      const tComb = unpackComb('pair', t);\n      const aComb = unpackComb('Pair', a);\n      const bComb = unpackComb('Pair', b);\n      const x = _compareMichelsonData(tComb.args[0], aComb.args[0], bComb.args[0]);\n      if (x !== 0) {\n        return x;\n      }\n      return _compareMichelsonData(tComb.args[0], aComb.args[1], bComb.args[1]);\n    }\n  } else {\n    switch (t.prim) {\n      case 'int':\n      case 'nat':\n      case 'mutez':\n        if ('int' in a && 'int' in b) {\n          return new LongInteger(a.int).cmp(new LongInteger(b.int));\n        }\n        break;\n\n      case 'string':\n        if ('string' in a && 'string' in b) {\n          const x = a.string.localeCompare(b.string);\n          return x < 0 ? -1 : x > 0 ? 1 : 0;\n        }\n        break;\n\n      case 'bytes':\n        if ('bytes' in a && 'bytes' in b) {\n          const aa = parseBytes(a.bytes);\n          const bb = parseBytes(b.bytes);\n          if (aa !== null && bb !== null) {\n            return compareBytes(aa, bb);\n          }\n        }\n        break;\n\n      case 'bool':\n        if (\n          'prim' in a &&\n          'prim' in b &&\n          (a.prim === 'True' || a.prim === 'False') &&\n          (b.prim === 'True' || b.prim === 'False')\n        ) {\n          return a.prim === b.prim ? 0 : a.prim === 'False' ? -1 : 1;\n        }\n        break;\n\n      case 'key':\n      case 'key_hash':\n      case 'address':\n      case 'signature':\n      case 'chain_id':\n        if (('string' in a || 'bytes' in a) && ('string' in b || 'bytes' in b)) {\n          return compareBytes(\n            'string' in a ? decodeBase58Check(a.string) : parseBytes(a.bytes) || [],\n            'string' in b ? decodeBase58Check(b.string) : parseBytes(b.bytes) || []\n          );\n        }\n        break;\n\n      case 'timestamp':\n        if (('string' in a || 'int' in a) && ('string' in b || 'int' in b)) {\n          const aa = parseDate(a);\n          const bb = parseDate(b);\n          if (aa !== null && bb !== null) {\n            const x = aa.valueOf() - bb.valueOf();\n            return x < 0 ? -1 : x > 0 ? 1 : 0;\n          }\n        }\n        break;\n\n      case 'unit':\n        if ('prim' in a && 'prim' in b && a.prim === 'Unit' && b.prim === 'Unit') {\n          return 0;\n        }\n    }\n  }\n\n  // Unlikely, types are expected to be verified before the function call\n  throw new MichelsonTypeError(\n    t,\n    undefined,\n    `${typeID(t)}: not comparable values: ${JSON.stringify(a)}, ${JSON.stringify(b)}`\n  );\n}\n\n// Simplified version of assertMichelsonInstruction() for previously validated data\nfunction isFunction(d: MichelsonData): d is InstructionList {\n  if (!Array.isArray(d)) {\n    return false;\n  }\n  for (const v of d) {\n    if (!((Array.isArray(v) && isFunction(v)) || ('prim' in v && isInstruction(v)))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction assertDataValidInternal(d: MichelsonData, t: MichelsonType, ctx: Context | null): void {\n  if (isPairType(t)) {\n    if (isPairData(d)) {\n      assertDataListIfAny(d);\n      const dc = unpackComb('Pair', d);\n      const tc = unpackComb('pair', t);\n      assertDataValidInternal(dc.args[0], tc.args[0], ctx);\n      assertDataValidInternal(dc.args[1], tc.args[1], ctx);\n      return;\n    }\n    throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n  }\n\n  switch (t.prim) {\n    // Atomic literals\n    case 'int':\n      if ('int' in d && isDecimal(d.int)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `integer value expected: ${JSON.stringify(d)}`);\n\n    case 'nat':\n    case 'mutez':\n      if ('int' in d && isNatural(d.int)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `natural value expected: ${JSON.stringify(d)}`);\n\n    case 'string':\n      if ('string' in d) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `string value expected: ${JSON.stringify(d)}`);\n\n    case 'bytes':\n    case 'bls12_381_g1':\n    case 'bls12_381_g2':\n      if ('bytes' in d && parseBytes(d.bytes) !== null) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `bytes value expected: ${JSON.stringify(d)}`);\n\n    case 'bool':\n      if ('prim' in d && (d.prim === 'True' || d.prim === 'False')) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `boolean value expected: ${JSON.stringify(d)}`);\n\n    case 'key_hash':\n      if (\n        'string' in d &&\n        checkDecodeTezosID(\n          d.string,\n          'ED25519PublicKeyHash',\n          'SECP256K1PublicKeyHash',\n          'P256PublicKeyHash'\n        ) !== null\n      ) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyHashBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n\n    case 'timestamp':\n      if (('string' in d || 'int' in d) && parseDate(d) !== null) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n\n    case 'address':\n      if ('string' in d) {\n        let address = d.string;\n        const ep = d.string.indexOf('%');\n        if (ep >= 0) {\n          // trim entry point\n          address = d.string.slice(0, ep);\n        }\n        if (\n          checkDecodeTezosID(\n            address,\n            'ED25519PublicKeyHash',\n            'SECP256K1PublicKeyHash',\n            'P256PublicKeyHash',\n            'ContractHash',\n            'TxRollupL2Address',\n            'RollupAddress'\n          ) !== null\n        ) {\n          return;\n        }\n      } else if ('bytes' in d) {\n        try {\n          decodeAddressBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n\n    case 'key':\n      if (\n        'string' in d &&\n        checkDecodeTezosID(d.string, 'ED25519PublicKey', 'SECP256K1PublicKey', 'P256PublicKey') !==\n          null\n      ) {\n        return;\n      } else if ('bytes' in d) {\n        try {\n          decodePublicKeyBytes(d);\n          return;\n        } catch (err) {\n          // ignore message\n        }\n      }\n      throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n\n    case 'unit':\n      if ('prim' in d && d.prim === 'Unit') {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `unit value expected: ${JSON.stringify(d)}`);\n\n    case 'signature':\n      if (\n        'bytes' in d ||\n        ('string' in d &&\n          checkDecodeTezosID(\n            d.string,\n            'ED25519Signature',\n            'SECP256K1Signature',\n            'P256Signature',\n            'GenericSignature'\n          ) !== null)\n      ) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n\n    case 'chain_id':\n      if ('bytes' in d || 'string' in d) {\n        const x = 'string' in d ? decodeBase58Check(d.string) : parseBytes(d.bytes);\n        if (x !== null) {\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n\n    // Complex types\n    case 'option':\n      if ('prim' in d) {\n        if (d.prim === 'None') {\n          return;\n        } else if (d.prim === 'Some') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n\n    case 'list':\n    case 'set':\n      if (assertDataListIfAny(d)) {\n        //let prev: MichelsonData | undefined;\n        for (const v of d) {\n          assertDataValidInternal(v, t.args[0], ctx);\n        }\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n    case 'or':\n      if ('prim' in d) {\n        if (d.prim === 'Left') {\n          assertDataValidInternal(d.args[0], t.args[0], ctx);\n          return;\n        } else if (d.prim === 'Right') {\n          assertDataValidInternal(d.args[0], t.args[1], ctx);\n          return;\n        }\n      }\n      throw new MichelsonTypeError(t, d, `union (or) expected: ${JSON.stringify(d)}`);\n\n    case 'lambda':\n      if (isFunction(d)) {\n        const ret = functionTypeInternal(d, [t.args[0]], ctx);\n        if ('failed' in ret) {\n          throw new MichelsonTypeError(t, d, `function is failed with error type: ${ret.failed}`);\n        }\n        if (ret.length !== 1) {\n          throw new MichelsonTypeError(t, d, 'function must return a value');\n        }\n        assertScalarTypesEqual(t.args[1], ret[0]);\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `function expected: ${JSON.stringify(d)}`);\n\n    case 'map':\n    case 'big_map':\n      if (Array.isArray(d)) {\n        //let prev: MichelsonMapElt | undefined;\n        for (const v of d) {\n          if (!('prim' in v) || v.prim !== 'Elt') {\n            throw new MichelsonTypeError(t, d, `map elements expected: ${JSON.stringify(d)}`);\n          }\n          assertDataValidInternal(v.args[0], t.args[0], ctx);\n          assertDataValidInternal(v.args[1], t.args[1], ctx);\n        }\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n    case 'bls12_381_fr':\n      if (('int' in d && isDecimal(d.int)) || ('bytes' in d && parseBytes(d.bytes) !== null)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `BLS12-381 element expected: ${JSON.stringify(d)}`);\n\n    case 'sapling_state':\n      if (Array.isArray(d)) {\n        return;\n      }\n      throw new MichelsonTypeError(t, d, `sapling state expected: ${JSON.stringify(d)}`);\n\n    case 'ticket':\n      assertDataValidInternal(\n        d,\n        {\n          prim: 'pair',\n          args: [{ prim: 'address' }, t.args[0], { prim: 'nat' }],\n        },\n        ctx\n      );\n      return;\n\n    default:\n      throw new MichelsonTypeError(\n        t,\n        d,\n        `type ${typeID(t)} don't have Michelson literal representation`\n      );\n  }\n}\n\n// Code validation\n\ntype StackType<T extends (MichelsonTypeID[] | null)[]> = {\n  [N in keyof T]: T[N] extends MichelsonTypeID[] ? MichelsonType<T[N][number]> : MichelsonType;\n};\n\nexport interface InstructionTrace {\n  op: MichelsonCode;\n  in: MichelsonType[];\n  out: MichelsonReturnType;\n}\n\nfunction instructionListType(\n  inst: InstructionList,\n  stack: MichelsonType[],\n  ctx: Context | null\n): MichelsonReturnType {\n  let ret: MichelsonReturnType = stack;\n  let s = stack;\n  let i = 0;\n  for (const op of inst) {\n    const ft = functionTypeInternal(op, s, ctx);\n    ret = ft;\n    if ('failed' in ft) {\n      break;\n    }\n    s = ft;\n    i++;\n  }\n\n  if (\n    'failed' in ret &&\n    ret.level == 0 &&\n    (!('prim' in ret.failed) || ret.failed.prim !== 'never') &&\n    i !== inst.length - 1\n  ) {\n    throw new MichelsonInstructionError(inst, ret, 'FAIL must appear in a tail position');\n  }\n\n  if (ctx?.traceCallback !== undefined) {\n    const trace: InstructionTrace = {\n      op: inst,\n      in: stack,\n      out: ret,\n    };\n    ctx.traceCallback(trace);\n  }\n  return 'failed' in ret ? { failed: ret.failed, level: ret.level + 1 } : ret;\n}\n\nfunction functionTypeInternal(\n  inst: MichelsonCode,\n  stack: MichelsonType[],\n  ctx: Context | null\n): MichelsonReturnType {\n  const proto = ctx?.protocol || DefaultProtocol;\n\n  if (Array.isArray(inst)) {\n    return instructionListType(inst, stack, ctx);\n  }\n  const instruction = inst; // Make it const for type guarding\n\n  // make sure the stack has enough number of arguments of specific types\n  function args<T extends (MichelsonTypeID[] | null)[]>(n: number, ...typeIds: T): StackType<T> {\n    if (stack.length < typeIds.length + n) {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: stack must have at least ${typeIds.length} element(s)`\n      );\n    }\n\n    let i = n;\n    for (const ids of typeIds) {\n      if (ids !== null && ids.length !== 0) {\n        let ii = 0;\n        while (ii < ids.length && ids[ii] !== typeID(stack[i])) {\n          ii++;\n        }\n        if (ii === ids.length) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: stack type mismatch: [${i}] expected to be ${ids}, got ${typeID(\n              stack[i]\n            )} instead`\n          );\n        }\n      }\n      i++;\n    }\n    return stack.slice(n, typeIds.length + n) as StackType<T>;\n  }\n\n  function rethrow<T extends unknown[], U>(fn: (...args: T) => U) {\n    return (...args: T): U => {\n      try {\n        return fn(...args);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  function rethrowTypeGuard<T extends Expr, U extends MichelsonType & T>(fn: (arg: T) => arg is U) {\n    return (arg: T): arg is U => {\n      try {\n        return fn(arg);\n      } catch (err) {\n        if (err instanceof MichelsonError) {\n          throw new MichelsonInstructionError(instruction, stack, err.message);\n        } else {\n          throw err;\n        }\n      }\n    };\n  }\n\n  const argAnn = rethrow(unpackAnnotations);\n  const ensureStacksEqual = rethrow(assertStacksEqual);\n  const ensureTypesEqual = rethrow(assertScalarTypesEqual);\n  const ensureComparableType = rethrowTypeGuard(assertMichelsonComparableType);\n  const ensurePackableType = rethrowTypeGuard(assertMichelsonPackableType);\n  const ensureStorableType = rethrowTypeGuard(assertMichelsonStorableType);\n  const ensurePushableType = rethrowTypeGuard(assertMichelsonPushableType);\n  const ensureBigMapStorableType = rethrowTypeGuard(assertMichelsonBigMapStorableType);\n\n  // unpack instruction annotations and assert their maximum number\n  function instructionAnn(\n    num: { f?: number; t?: number; v?: number },\n    opt?: UnpackAnnotationsOptions\n  ) {\n    const a = argAnn(instruction, {\n      ...opt,\n      emptyFields: num.f !== undefined && num.f > 1,\n      emptyVar: num.v !== undefined && num.v > 1,\n    });\n    const assertNum = (a: string[] | undefined, n: number | undefined, type: string) => {\n      if (a && a.length > (n || 0)) {\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: at most ${n || 0} ${type} annotations allowed`\n        );\n      }\n    };\n    assertNum(a.f, num.f, 'field');\n    assertNum(a.t, num.t, 'type');\n    assertNum(a.v, num.v, 'variable');\n    return a;\n  }\n\n  // also keeps annotation class if null is provided\n  function annotate<T extends MichelsonType>(tt: T, a: Nullable<UnpackedAnnotations>): T {\n    const tx: MichelsonType = tt;\n    const t: Extract<MichelsonType, Prim> = Array.isArray(tx) ? { prim: 'pair', args: tx } : tx;\n    const src = argAnn(t);\n    const ann =\n      a.v !== undefined || a.t !== undefined || a.f !== undefined\n        ? [\n            ...((a.v === null ? src.v : a.v) || []),\n            ...((a.t === null ? src.t : a.t) || []),\n            ...((a.f === null ? src.f : a.f) || []),\n          ]\n        : undefined;\n\n    const { annots: _annots, ...rest } = t;\n    return { ...(rest as T), ...(ann && ann.length !== 0 && { annots: ann }) };\n  }\n\n  // shortcut to copy at most one variable annotation from the instruction to the type\n  function annotateVar<T extends MichelsonType>(t: T, def?: string) {\n    const ia = instructionAnn({ v: 1 });\n    return annotate(t, {\n      v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null,\n      t: null,\n    });\n  }\n\n  // annotate CAR/CDR/UNPAIR/GET\n  function annotateField(\n    arg: MichelsonTypePair<MichelsonType[]>,\n    field: MichelsonType,\n    insAnn: UnpackedAnnotations,\n    n: number,\n    defField: string\n  ): MichelsonType {\n    const fieldAnn = argAnn(field).f?.[0]; // field's field annotation\n    const insFieldAnn = insAnn.f?.[n];\n    if (\n      insFieldAnn !== undefined &&\n      insFieldAnn !== '%' &&\n      fieldAnn !== undefined &&\n      insFieldAnn !== fieldAnn\n    ) {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: field names doesn't match: ${insFieldAnn} !== ${fieldAnn}`\n      );\n    }\n    const insVarAnn = insAnn.v?.[n]; // nth instruction's variable annotation\n    const varAnn = argAnn(arg).v?.[0]; // instruction argument's variable annotation\n    return annotate(field, {\n      t: null,\n      v: insVarAnn\n        ? insVarAnn === '@%'\n          ? fieldAnn\n            ? ['@' + fieldAnn.slice(1)]\n            : undefined\n          : insVarAnn === '@%%'\n          ? varAnn\n            ? ['@' + varAnn.slice(1) + '.' + (fieldAnn ? fieldAnn.slice(1) : defField)]\n            : fieldAnn\n            ? ['@' + fieldAnn.slice(1)]\n            : undefined\n          : [insVarAnn]\n        : null,\n    });\n  }\n\n  // comb helper functions\n  function getN(\n    src: MichelsonTypePair<MichelsonType[]>,\n    n: number,\n    i: number = n\n  ): MichelsonType[] {\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return [p.args[0]];\n    } else if (i === 2) {\n      return p.args;\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return [p.args[0], ...getN(right, n, i - 1)];\n    } else {\n      throw new MichelsonInstructionError(\n        instruction,\n        stack,\n        `${instruction.prim}: at least ${n} fields are expected`\n      );\n    }\n  }\n\n  function getNth(\n    src: MichelsonTypePair<MichelsonType[]>,\n    n: number,\n    i: number = n\n  ): MichelsonType {\n    if (i === 0) {\n      return src;\n    }\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return p.args[0];\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return getNth(right, n, i - 2);\n    } else if (i === 2) {\n      return right;\n    }\n    throw new MichelsonInstructionError(\n      instruction,\n      stack,\n      `${instruction.prim}: at least ${n + 1} fields are expected`\n    );\n  }\n\n  function updateNth(\n    src: MichelsonTypePair<MichelsonType[]>,\n    x: MichelsonType,\n    n: number,\n    i: number = n\n  ): MichelsonType {\n    if (i === 0) {\n      return x;\n    }\n    const p = unpackComb('pair', src);\n    if (i === 1) {\n      return {\n        ...p,\n        args: [x, p.args[1]],\n      };\n    }\n    const right = p.args[1];\n    if (isPairType(right)) {\n      return {\n        ...p,\n        args: [p.args[0], updateNth(right, x, n, i - 2)],\n      };\n    } else if (i === 2) {\n      return {\n        ...p,\n        args: [p.args[0], x],\n      };\n    }\n    throw new MichelsonInstructionError(\n      instruction,\n      stack,\n      `${instruction.prim}: at least ${n + 1} fields are expected`\n    );\n  }\n\n  const varSuffix = (a: UnpackedAnnotations, suffix: string) => [\n    '@' + (a.v ? a.v[0].slice(1) + '.' : '') + suffix,\n  ];\n\n  function branchType(br0: MichelsonReturnType, br1: MichelsonReturnType): MichelsonReturnType {\n    if ('failed' in br0 || 'failed' in br1) {\n      return 'failed' in br0 ? br1 : br0;\n    } else {\n      ensureStacksEqual(br0, br1);\n      return br0;\n    }\n  }\n\n  const retStack = ((instruction: MichelsonInstruction): MichelsonReturnType => {\n    switch (instruction.prim) {\n      case 'DUP': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 1;\n        if (n === 0) {\n          throw new MichelsonInstructionError(instruction, stack, 'DUP 0 is forbidden');\n        }\n        const s = args(n - 1, null)[0];\n        if (typeID(s) === 'ticket') {\n          throw new MichelsonInstructionError(instruction, stack, \"ticket can't be DUPed\");\n        }\n        return [s, ...stack];\n      }\n\n      case 'SWAP': {\n        const s = args(0, null, null);\n        instructionAnn({});\n        return [s[1], s[0], ...stack.slice(2)];\n      }\n\n      case 'SOME':\n        return [\n          annotate({ prim: 'option', args: [args(0, null)[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack.slice(1),\n        ];\n\n      case 'UNIT':\n        return [annotate({ prim: 'unit' }, instructionAnn({ v: 1, t: 1 })), ...stack];\n\n      case 'PAIR': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n        if (n < 2) {\n          throw new MichelsonInstructionError(instruction, stack, `PAIR ${n} is forbidden`);\n        }\n        const s = args(0, ...new Array<null>(n).fill(null));\n        const ia = instructionAnn({ f: n, t: 1, v: 1 }, { specialFields: true });\n        const trim = (s: string) => {\n          const i = s.lastIndexOf('.');\n          return s.slice(i > 0 ? i + 1 : 1);\n        };\n        const retArgs = s.map((v, i) => {\n          const va = argAnn(v);\n          const f =\n            ia.f && ia.f.length > i && ia.f[i] !== '%'\n              ? ia.f[i] === '%@'\n                ? va.v\n                  ? ['%' + trim(va.v?.[0] || '')]\n                  : undefined\n                : [ia.f[i]]\n              : undefined;\n          return annotate(v, { v: null, t: null, f });\n        });\n        return [\n          annotate(\n            {\n              prim: 'pair',\n              args: retArgs,\n            },\n            { t: ia.t, v: ia.v }\n          ),\n          ...stack.slice(n),\n        ];\n      }\n\n      case 'UNPAIR': {\n        const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n        if (n < 2) {\n          throw new MichelsonInstructionError(instruction, stack, `UNPAIR ${n} is forbidden`);\n        }\n        const s = args(0, ['pair'])[0];\n        const ia = instructionAnn({ f: 2, v: 2 }, { specialVar: true });\n        const fields = getN(s, n);\n        return [\n          ...fields.map((field, i) => annotateField(s, field, ia, i, i === 0 ? 'car' : 'cdr')),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CAR':\n      case 'CDR': {\n        const s = unpackComb('pair', args(0, ['pair'])[0]);\n        const field = s.args[instruction.prim === 'CAR' ? 0 : 1];\n        const ia = instructionAnn({ f: 1, v: 1 }, { specialVar: true });\n        return [\n          annotateField(s, field, ia, 0, instruction.prim.toLocaleLowerCase()),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CONS': {\n        const s = args(0, null, ['list']);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar({ prim: 'list', args: [s[1].args[0]] }), ...stack.slice(2)];\n      }\n\n      case 'SIZE':\n        args(0, ['string', 'list', 'set', 'map', 'bytes']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'MEM': {\n        const s = args(0, null, ['set', 'map', 'big_map']);\n        ensureComparableType(s[0]);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(2)];\n      }\n\n      case 'GET':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, ['pair'])[0];\n          return [annotateVar(getNth(s, n)), ...stack.slice(1)];\n        } else {\n          // map operation\n          const s = args(0, null, ['map', 'big_map']);\n          ensureComparableType(s[0]);\n          ensureTypesEqual(s[0], s[1].args[0]);\n          return [annotateVar({ prim: 'option', args: [s[1].args[1]] }), ...stack.slice(2)];\n        }\n\n      case 'UPDATE':\n        if (instruction.args) {\n          // comb operation\n          const n = parseInt(instruction.args[0].int, 10);\n          const s = args(0, null, ['pair']);\n          return [annotateVar(updateNth(s[1], s[0], n)), ...stack.slice(2)];\n        } else {\n          // map operation\n          const s0 = args(0, null, ['bool', 'option']);\n          ensureComparableType(s0[0]);\n          if (s0[1].prim === 'bool') {\n            const s1 = args(2, ['set']);\n            ensureTypesEqual(s0[0], s1[0].args[0]);\n            return [\n              annotateVar({\n                prim: 'set',\n                args: [annotate(s0[0], { t: null })],\n              }),\n              ...stack.slice(3),\n            ];\n          }\n\n          const s1 = args(2, ['map', 'big_map']);\n          ensureTypesEqual(s0[0], s1[0].args[0]);\n          if (s1[0].prim === 'map') {\n            return [\n              annotateVar({\n                prim: 'map',\n                args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n              }),\n              ...stack.slice(3),\n            ];\n          }\n          ensureBigMapStorableType(s0[1].args[0]);\n          return [\n            annotateVar({\n              prim: 'big_map',\n              args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n            }),\n            ...stack.slice(3),\n          ];\n        }\n\n      case 'GET_AND_UPDATE': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, null, ['option'], ['map', 'big_map']);\n        ensureComparableType(s[0]);\n        ensureTypesEqual(s[0], s[2].args[0]);\n        ensureTypesEqual(s[1].args[0], s[2].args[1]);\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        if (s[2].prim === 'map') {\n          return [\n            annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va?.[0] }),\n            annotate(\n              {\n                prim: 'map',\n                args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n              },\n              { v: va?.[1] }\n            ),\n            ...stack.slice(3),\n          ];\n        }\n        ensureBigMapStorableType(s[1].args[0]);\n        return [\n          annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va?.[0] }),\n          annotate(\n            {\n              prim: 'big_map',\n              args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n            },\n            { v: va?.[1] }\n          ),\n          ...stack.slice(3),\n        ];\n      }\n\n      case 'EXEC': {\n        const s = args(0, null, ['lambda']);\n        ensureTypesEqual(s[0], s[1].args[0]);\n        return [annotateVar(s[1].args[1]), ...stack.slice(2)];\n      }\n\n      case 'APPLY': {\n        const s = args(0, null, ['lambda']);\n        ensureStorableType(s[0]);\n        ensurePushableType(s[0]);\n        if (!isPairType(s[1].args[0])) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function's argument must be a pair: ${typeID(s[1].args[0])}`\n          );\n        }\n        const pt = s[1].args[0];\n        ensureTypesEqual(s[0], typeArgs(pt)[0]);\n        return [\n          annotateVar({ prim: 'lambda', args: [typeArgs(pt)[1], s[1].args[1]] }),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'FAILWITH': {\n        const s = args(0, null)[0];\n        if (!ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n          ensurePackableType(s);\n        }\n        return { failed: s, level: 0 };\n      }\n\n      case 'NEVER':\n        args(0, ['never']);\n        return { failed: { prim: 'never' }, level: 0 };\n\n      case 'RENAME':\n        return [annotateVar(args(0, null)[0]), ...stack.slice(1)];\n\n      case 'CONCAT': {\n        const s0 = args(0, ['string', 'list', 'bytes']);\n        if (s0[0].prim === 'list') {\n          if (typeID(s0[0].args[0]) !== 'string' && typeID(s0[0].args[0]) !== 'bytes') {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: can't concatenate list of ${typeID(s0[0].args[0])}'s`\n            );\n          }\n          return [annotateVar(s0[0].args[0]), ...stack.slice(1)];\n        }\n        const s1 = args(1, ['string', 'bytes']);\n        if (s0[0].prim !== s1[0].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: can't concatenate ${s0[0].prim} with ${s1[0].prim}`\n          );\n        }\n        return [annotateVar(s1[0]), ...stack.slice(2)];\n      }\n\n      case 'SLICE':\n        return [\n          annotateVar(\n            { prim: 'option', args: [args(0, ['nat'], ['nat'], ['string', 'bytes'])[2]] },\n            '@slice'\n          ),\n          ...stack.slice(3),\n        ];\n\n      case 'PACK': {\n        const s = args(0, null)[0];\n        ensurePackableType(s);\n        return [annotateVar({ prim: 'bytes' }, '@packed'), ...stack.slice(1)];\n      }\n\n      case 'ADD': {\n        const s = args(\n          0,\n          ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'],\n          ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']\n        );\n        if (\n          (s[0].prim === 'nat' && s[1].prim === 'int') ||\n          (s[0].prim === 'int' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'int' && s[1].prim === 'timestamp') ||\n          (s[0].prim === 'timestamp' && s[1].prim === 'int')\n        ) {\n          return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'int' ||\n            s[0].prim === 'nat' ||\n            s[0].prim === 'mutez' ||\n            s[0].prim === 'bls12_381_g1' ||\n            s[0].prim === 'bls12_381_g2' ||\n            s[0].prim === 'bls12_381_fr') &&\n          s[0].prim === s[1].prim\n        ) {\n          return [annotateVar(s[0]), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't add ${s[0].prim} to ${s[1].prim}`\n        );\n      }\n\n      case 'SUB': {\n        const s = ProtoInferiorTo(proto, Protocol.PsiThaCa)\n          ? args(0, ['nat', 'int', 'timestamp', 'mutez'], ['nat', 'int', 'timestamp', 'mutez'])\n          : args(0, ['nat', 'int', 'timestamp'], ['nat', 'int', 'timestamp']);\n\n        if (\n          ((s[0].prim === 'nat' || s[0].prim === 'int') &&\n            (s[1].prim === 'nat' || s[1].prim === 'int')) ||\n          (s[0].prim === 'timestamp' && s[1].prim === 'timestamp')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (s[0].prim === 'timestamp' && s[1].prim === 'int') {\n          return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n          return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't subtract ${s[0].prim} from ${s[1].prim}`\n        );\n      }\n\n      case 'SUB_MUTEZ': {\n        const _s = args(0, ['mutez'], ['mutez']);\n        return [annotateVar({ prim: 'option', args: [{ prim: 'mutez' }] }), ...stack.slice(2)];\n      }\n\n      case 'MUL': {\n        const s = args(\n          0,\n          ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'],\n          ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']\n        );\n        if (\n          (s[0].prim === 'nat' && s[1].prim === 'int') ||\n          (s[0].prim === 'int' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'nat' && s[1].prim === 'mutez') ||\n          (s[0].prim === 'mutez' && s[1].prim === 'nat')\n        ) {\n          return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n        } else if (\n          ((s[0].prim === 'bls12_381_g1' ||\n            s[0].prim === 'bls12_381_g2' ||\n            s[0].prim === 'bls12_381_fr') &&\n            s[1].prim === 'bls12_381_fr') ||\n          ((s[0].prim === 'nat' || s[0].prim === 'int') && s[0].prim === s[1].prim)\n        ) {\n          return [annotateVar(s[0]), ...stack.slice(2)];\n        } else if (\n          ((s[0].prim === 'nat' || s[0].prim === 'int') && s[1].prim === 'bls12_381_fr') ||\n          ((s[1].prim === 'nat' || s[1].prim === 'int') && s[0].prim === 'bls12_381_fr')\n        ) {\n          return [annotateVar({ prim: 'bls12_381_fr' }), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't multiply ${s[0].prim} by ${s[1].prim}`\n        );\n      }\n\n      case 'EDIV': {\n        const res = (\n          a: 'nat' | 'int' | 'mutez',\n          b: 'nat' | 'int' | 'mutez'\n        ): MichelsonTypeOption<MichelsonType> => ({\n          prim: 'option',\n          args: [{ prim: 'pair', args: [{ prim: a }, { prim: b }] }],\n        });\n        const s = args(0, ['nat', 'int', 'mutez'], ['nat', 'int', 'mutez']);\n        if (s[0].prim === 'nat' && s[1].prim === 'nat') {\n          return [annotateVar(res('nat', 'nat')), ...stack.slice(2)];\n        } else if (\n          (s[0].prim === 'nat' || s[0].prim === 'int') &&\n          (s[1].prim === 'nat' || s[1].prim === 'int')\n        ) {\n          return [annotateVar(res('int', 'nat')), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'nat') {\n          return [annotateVar(res('mutez', 'mutez')), ...stack.slice(2)];\n        } else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n          return [annotateVar(res('nat', 'mutez')), ...stack.slice(2)];\n        }\n        throw new MichelsonInstructionError(\n          instruction,\n          stack,\n          `${instruction.prim}: can't euclideally divide ${s[0].prim} by ${s[1].prim}`\n        );\n      }\n\n      case 'ABS':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'ISNAT':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'option', args: [{ prim: 'nat' }] }), ...stack.slice(1)];\n\n      case 'INT':\n        args(0, ['nat', 'bls12_381_fr']);\n        return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n\n      case 'NEG': {\n        const s = args(0, ['nat', 'int', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'])[0];\n        if (s.prim === 'nat' || s.prim === 'int') {\n          return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n        }\n        return [annotateVar(s), ...stack.slice(1)];\n      }\n\n      case 'LSL':\n      case 'LSR':\n        args(0, ['nat'], ['nat']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(2)];\n\n      case 'OR':\n      case 'XOR': {\n        const s = args(0, ['nat', 'bool'], ['nat', 'bool']);\n        if (s[0].prim !== s[1].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`\n          );\n        }\n        return [annotateVar(s[1]), ...stack.slice(2)];\n      }\n\n      case 'AND': {\n        const s = args(0, ['nat', 'bool', 'int'], ['nat', 'bool']);\n        if ((s[0].prim !== 'int' || s[1].prim !== 'nat') && s[0].prim !== s[1].prim) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`\n          );\n        }\n        return [annotateVar(s[1]), ...stack.slice(2)];\n      }\n\n      case 'NOT': {\n        const s = args(0, ['nat', 'bool', 'int'])[0];\n        if (s.prim === 'bool') {\n          return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n        }\n        return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n      }\n\n      case 'COMPARE': {\n        const s = args(0, null, null);\n        ensureComparableType(s[0]);\n        ensureComparableType(s[1]);\n        return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n      }\n\n      case 'EQ':\n      case 'NEQ':\n      case 'LT':\n      case 'GT':\n      case 'LE':\n      case 'GE':\n        args(0, ['int']);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n\n      case 'SELF': {\n        if (ctx?.contract === undefined) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: contract required`\n          );\n        }\n        const ia = instructionAnn({ f: 1, v: 1 });\n        const ep = contractEntryPoint(ctx.contract, ia.f?.[0]);\n        if (ep === null) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: contract has no entrypoint ${ep}`\n          );\n        }\n        return [\n          annotate({ prim: 'contract', args: [ep] }, { v: ia.v ? ia.v : ['@self'] }),\n          ...stack,\n        ];\n      }\n\n      case 'TRANSFER_TOKENS': {\n        const s = args(0, null, ['mutez'], ['contract']);\n        ensureTypesEqual(s[0], s[2].args[0]);\n        return [annotateVar({ prim: 'operation' }), ...stack.slice(3)];\n      }\n\n      case 'SET_DELEGATE': {\n        const s = args(0, ['option'])[0];\n        if (typeID(s.args[0]) !== 'key_hash') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: key hash expected: ${typeID(s.args[0])}`\n          );\n        }\n        return [annotateVar({ prim: 'operation' }), ...stack.slice(1)];\n      }\n\n      case 'IMPLICIT_ACCOUNT':\n        args(0, ['key_hash']);\n        return [annotateVar({ prim: 'contract', args: [{ prim: 'unit' }] }), ...stack.slice(1)];\n\n      case 'NOW':\n        return [annotateVar({ prim: 'timestamp' }, '@now'), ...stack];\n\n      case 'AMOUNT':\n        return [annotateVar({ prim: 'mutez' }, '@amount'), ...stack];\n\n      case 'BALANCE':\n        return [annotateVar({ prim: 'mutez' }, '@balance'), ...stack];\n\n      case 'CHECK_SIGNATURE':\n        args(0, ['key'], ['signature'], ['bytes']);\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(3)];\n\n      case 'BLAKE2B':\n      case 'SHA256':\n      case 'SHA512':\n      case 'KECCAK':\n      case 'SHA3':\n        args(0, ['bytes']);\n        return [annotateVar({ prim: 'bytes' }), ...stack.slice(1)];\n\n      case 'HASH_KEY':\n        args(0, ['key']);\n        return [annotateVar({ prim: 'key_hash' }), ...stack.slice(1)];\n\n      case 'SOURCE':\n        return [annotateVar({ prim: 'address' }, '@source'), ...stack];\n\n      case 'SENDER':\n        return [annotateVar({ prim: 'address' }, '@sender'), ...stack];\n\n      case 'ADDRESS': {\n        const s = args(0, ['contract'])[0];\n        const ia = instructionAnn({ v: 1 });\n        return [\n          annotate(\n            { prim: 'address', [refContract]: s },\n            { v: ia.v ? ia.v : varSuffix(argAnn(s), 'address') }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'SELF_ADDRESS': {\n        const addr: MichelsonTypeAddress = { prim: 'address' };\n        if (ctx?.contract !== undefined) {\n          addr[refContract] = {\n            prim: 'contract',\n            args: [contractSection(ctx.contract, 'parameter').args[0]],\n          };\n        }\n        return [annotateVar(addr, '@address'), ...stack];\n      }\n\n      case 'CHAIN_ID':\n        return [annotateVar({ prim: 'chain_id' }), ...stack];\n\n      case 'DROP': {\n        instructionAnn({});\n        const n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;\n        args(n - 1, null);\n        return stack.slice(n);\n      }\n\n      case 'DIG': {\n        instructionAnn({});\n        const n = parseInt(instruction.args[0].int, 10);\n        return [args(n, null)[0], ...stack.slice(0, n), ...stack.slice(n + 1)];\n      }\n\n      case 'DUG': {\n        instructionAnn({});\n        const n = parseInt(instruction.args[0].int, 10);\n        return [...stack.slice(1, n + 1), args(0, null)[0], ...stack.slice(n + 1)];\n      }\n\n      case 'NONE':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotate({ prim: 'option', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'LEFT':\n      case 'RIGHT': {\n        const s = args(0, null)[0];\n        const ia = instructionAnn({ f: 2, t: 1, v: 1 }, { specialFields: true });\n        const va = argAnn(s);\n\n        const children: [MichelsonType, MichelsonType] = [\n          annotate(s, {\n            t: null,\n            v: null,\n            f:\n              ia.f && ia.f.length > 0 && ia.f[0] !== '%'\n                ? ia.f[0] === '%@'\n                  ? va.v\n                    ? ['%' + va.v[0].slice(1)]\n                    : undefined\n                  : ia.f\n                : undefined,\n          }),\n          annotate(instruction.args[0], {\n            t: null,\n            f: ia.f && ia.f.length > 1 && ia.f[1] !== '%' ? ia.f : undefined,\n          }),\n        ];\n\n        return [\n          annotate(\n            {\n              prim: 'or',\n              args: instruction.prim === 'LEFT' ? children : [children[1], children[0]],\n            },\n            { t: ia.t, v: ia.v }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'NIL':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotate({ prim: 'list', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'UNPACK':\n        args(0, ['bytes']);\n        assertTypeAnnotationsValid(instruction.args[0]);\n        return [\n          annotateVar({ prim: 'option', args: [instruction.args[0]] }, '@unpacked'),\n          ...stack.slice(1),\n        ];\n\n      case 'CONTRACT': {\n        const s = args(0, ['address'])[0];\n        assertTypeAnnotationsValid(instruction.args[0]);\n        const ia = instructionAnn({ v: 1, f: 1 });\n        const contract = s[refContract];\n        if (contract !== undefined) {\n          const ep = contractEntryPoint(contract, ia.f?.[0]);\n          if (ep === null) {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: contract has no entrypoint ${ep}`\n            );\n          }\n          ensureTypesEqual(ep, instruction.args[0]);\n        }\n        return [\n          annotate(\n            { prim: 'option', args: [{ prim: 'contract', args: [instruction.args[0]] }] },\n            { v: ia.v ? ia.v : varSuffix(argAnn(s), 'contract') }\n          ),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'CAST': {\n        instructionAnn({});\n        const s = args(0, null)[0];\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureTypesEqual(instruction.args[0], s);\n        return [instruction.args[0], ...stack.slice(1)];\n      }\n\n      case 'IF_NONE': {\n        instructionAnn({});\n        const s = args(0, ['option'])[0];\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n        const br1 = functionTypeInternal(\n          instruction.args[1],\n          [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'some') }), ...tail],\n          ctx\n        );\n        return branchType(br0, br1);\n      }\n\n      case 'IF_LEFT': {\n        instructionAnn({});\n        const s = args(0, ['or'])[0];\n        const va = argAnn(s);\n        const lefta = argAnn(s.args[0]);\n        const righta = argAnn(s.args[1]);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(\n          instruction.args[0],\n          [\n            annotate(s.args[0], {\n              t: null,\n              v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : 'left'),\n            }),\n            ...tail,\n          ],\n          ctx\n        );\n        const br1 = functionTypeInternal(\n          instruction.args[1],\n          [\n            annotate(s.args[1], {\n              t: null,\n              v: varSuffix(va, righta.f ? righta.f[0].slice(1) : 'right'),\n            }),\n            ...tail,\n          ],\n          ctx\n        );\n        return branchType(br0, br1);\n      }\n\n      case 'IF_CONS': {\n        instructionAnn({});\n        const s = args(0, ['list'])[0];\n        const va = argAnn(s);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(\n          instruction.args[0],\n          [\n            annotate(s.args[0], { t: null, v: varSuffix(va, 'hd') }),\n            annotate(s, { t: null, v: varSuffix(va, 'tl') }),\n            ...tail,\n          ],\n          ctx\n        );\n        const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n        return branchType(br0, br1);\n      }\n\n      case 'IF': {\n        instructionAnn({});\n        args(0, ['bool']);\n        const tail = stack.slice(1);\n        const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n        const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n        return branchType(br0, br1);\n      }\n\n      case 'MAP': {\n        const s = args(0, ['list', 'map', 'option'])[0];\n        const tail = stack.slice(1);\n        const elt = s.prim === 'map' ? { prim: 'pair' as const, args: s.args } : s.args[0];\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          if (!('prim' in body.failed) || body.failed.prim !== 'never') {\n            throw new MichelsonInstructionError(\n              instruction,\n              stack,\n              `${instruction.prim}: FAIL is not allowed in MAP`\n            );\n          }\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        if (body.length < 1) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function must return a value`\n          );\n        }\n        ensureStacksEqual(body.slice(1), tail);\n        return s.prim === 'list'\n          ? [annotateVar({ prim: 'list', args: [body[0]] }), ...tail]\n          : s.prim === 'map'\n          ? [annotateVar({ prim: 'map', args: [s.args[0], body[0]] }), ...tail]\n          : [annotateVar({ prim: 'option', args: [body[0]] }), ...tail];\n      }\n\n      case 'ITER': {\n        instructionAnn({});\n        const s = args(0, ['set', 'list', 'map'])[0];\n        const tail = stack.slice(1);\n        const elt = s.prim === 'map' ? { prim: 'pair' as const, args: s.args } : s.args[0];\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, tail);\n        return tail;\n      }\n\n      case 'LOOP': {\n        instructionAnn({});\n        args(0, ['bool']);\n        const tail = stack.slice(1);\n        const body = functionTypeInternal(instruction.args[0], tail, ctx);\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, [{ prim: 'bool' }, ...tail]);\n        return tail;\n      }\n\n      case 'LOOP_LEFT': {\n        instructionAnn({});\n        const s = args(0, ['or'])[0];\n        const tail = stack.slice(1);\n        const body = functionTypeInternal(\n          instruction.args[0],\n          [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'left') }), ...tail],\n          ctx\n        );\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        ensureStacksEqual(body, [s, ...tail]);\n        return [annotate(s.args[1], { t: null, v: instructionAnn({ v: 1 }).v }), ...tail];\n      }\n\n      case 'DIP': {\n        instructionAnn({});\n        const n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;\n        args(n - 1, null);\n        const head = stack.slice(0, n);\n        const tail = stack.slice(n);\n        // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`\n        const body =\n          instruction.args.length === 2\n            ? functionTypeInternal(instruction.args[1], tail, ctx)\n            : functionTypeInternal(instruction.args[0], tail, ctx);\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        return [...head, ...body];\n      }\n\n      case 'CREATE_CONTRACT': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, ['option'], ['mutez'], null);\n        if (typeID(s[0].args[0]) !== 'key_hash') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: key hash expected: ${typeID(s[0].args[0])}`\n          );\n        }\n        if (ensureStorableType(s[2])) {\n          assertContractValid(instruction.args[0]);\n          assertScalarTypesEqual(contractSection(instruction.args[0], 'storage').args[0], s[2]);\n        }\n\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        return [\n          annotate({ prim: 'operation' }, { v: va?.[0] }),\n          annotate(\n            {\n              prim: 'address',\n              [refContract]: {\n                prim: 'contract',\n                args: [contractSection(instruction.args[0], 'parameter').args[0]],\n              },\n            },\n            { v: va?.[1] }\n          ),\n          ...stack.slice(3),\n        ];\n      }\n\n      case 'PUSH':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        assertDataValidInternal(instruction.args[1], instruction.args[0], {\n          ...ctx,\n          contract: undefined,\n        });\n        return [annotateVar(instruction.args[0]), ...stack];\n\n      case 'EMPTY_SET':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        return [\n          annotate({ prim: 'set', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'EMPTY_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        return [\n          annotate({ prim: 'map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'EMPTY_BIG_MAP':\n        assertTypeAnnotationsValid(instruction.args[0]);\n        ensureComparableType(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        ensureBigMapStorableType(instruction.args[0]);\n        return [\n          annotate({ prim: 'big_map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n          ...stack,\n        ];\n\n      case 'LAMBDA': {\n        assertTypeAnnotationsValid(instruction.args[0]);\n        assertTypeAnnotationsValid(instruction.args[1]);\n        const body = functionTypeInternal(instruction.args[2], [instruction.args[0]], {\n          ...ctx,\n          contract: undefined,\n        });\n        if ('failed' in body) {\n          return { failed: body.failed, level: body.level + 1 };\n        }\n        if (body.length !== 1) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: function must return a value`\n          );\n        }\n        ensureTypesEqual(instruction.args[1], body[0]);\n        return [\n          annotateVar({ prim: 'lambda', args: [instruction.args[0], instruction.args[1]] }),\n          ...stack,\n        ];\n      }\n\n      case 'LEVEL':\n        return [annotateVar({ prim: 'nat' }, '@level'), ...stack];\n\n      case 'TOTAL_VOTING_POWER':\n        return [annotateVar({ prim: 'nat' }), ...stack];\n\n      case 'VOTING_POWER':\n        args(0, ['key_hash']);\n        return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n\n      case 'TICKET': {\n        const s = args(0, null, ['nat'])[0];\n        ensureComparableType(s);\n        return [\n          annotate({ prim: 'ticket', args: [s] }, instructionAnn({ t: 1, v: 1 })),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'JOIN_TICKETS': {\n        const s = unpackComb('pair', args(0, ['pair'])[0]);\n        if (typeID(s.args[0]) !== 'ticket') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: ticket expected: ${typeID(s.args[0])}`\n          );\n        }\n        ensureTypesEqual(s.args[0], s.args[1]);\n        return [\n          annotateVar({\n            prim: 'option',\n            args: [annotate(s.args[0], { t: null })],\n          }),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'SPLIT_TICKET': {\n        const s = args(0, ['ticket'], ['pair']);\n        const p = unpackComb('pair', s[1]);\n        if (typeID(p.args[0]) !== 'nat') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: nat expected: ${typeID(p.args[0])}`\n          );\n        }\n        ensureTypesEqual(p.args[0], p.args[1]);\n        return [\n          annotateVar({\n            prim: 'option',\n            args: [\n              {\n                prim: 'pair',\n                args: [annotate(s[0], { t: null }), annotate(s[0], { t: null })],\n              },\n            ],\n          }),\n          ...stack.slice(2),\n        ];\n      }\n\n      case 'READ_TICKET': {\n        const ia = instructionAnn({ v: 2 });\n        const s = args(0, ['ticket'])[0];\n        const va = ia.v?.map((v) => (v !== '@' ? [v] : undefined));\n        return [\n          annotate(\n            {\n              prim: 'pair',\n              args: [{ prim: 'address' }, annotate(s.args[0], { t: null }), { prim: 'nat' }],\n            },\n            { v: va?.[0] }\n          ),\n          annotate(s, { v: va?.[1], t: null }),\n          ...stack.slice(1),\n        ];\n      }\n\n      case 'PAIRING_CHECK': {\n        const p = args(0, ['list'])[0].args[0];\n        if (!isPairType(p)) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: pair expected: ${typeID(p)}`\n          );\n        }\n        const c = unpackComb('pair', p);\n        if (typeID(c.args[0]) !== 'bls12_381_g1') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: bls12_381_g1 expected: ${typeID(c.args[0])}`\n          );\n        }\n        if (typeID(c.args[1]) !== 'bls12_381_g2') {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: bls12_381_g2 expected: ${typeID(c.args[1])}`\n          );\n        }\n        return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n      }\n\n      case 'SAPLING_EMPTY_STATE':\n        return [\n          annotate(\n            { prim: 'sapling_state', args: [instruction.args[0]] },\n            instructionAnn({ v: 1, t: 1 })\n          ),\n          ...stack,\n        ];\n\n      case 'SAPLING_VERIFY_UPDATE': {\n        const s = args(0, ['sapling_transaction'], ['sapling_state']);\n        if (parseInt(s[0].args[0].int, 10) !== parseInt(s[1].args[0].int, 10)) {\n          throw new MichelsonInstructionError(\n            instruction,\n            stack,\n            `${instruction.prim}: sapling memo size mismatch: ${s[0].args[0].int} != ${s[1].args[0].int}`\n          );\n        }\n        return ProtoInferiorTo(proto, Protocol.PtJakarta)\n          ? [\n              annotateVar({\n                prim: 'option',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                  },\n                ],\n              }),\n              ...stack.slice(2),\n            ]\n          : [\n              annotateVar({\n                prim: 'option',\n                args: [\n                  {\n                    prim: 'pair',\n                    args: [\n                      { prim: 'bytes' },\n                      {\n                        prim: 'pair',\n                        args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                      },\n                    ],\n                  },\n                ],\n              }),\n              ...stack.slice(2),\n            ];\n      }\n\n      case 'OPEN_CHEST':\n        args(0, ['chest_key'], ['chest'], ['nat']);\n        return [\n          annotateVar({ prim: 'or', args: [{ prim: 'bytes' }, { prim: 'bool' }] }),\n          ...stack.slice(3),\n        ];\n\n      case 'VIEW': {\n        const s = args(0, null, ['address']);\n        ensurePushableType(s[0]);\n        return [annotateVar({ prim: 'option', args: [instruction.args[1]] }), ...stack.slice(2)];\n      }\n      case 'MIN_BLOCK_TIME':\n        return [annotateVar({ prim: 'nat' }), ...stack];\n\n      default:\n        throw new MichelsonError(\n          instruction as MichelsonCode,\n          `unexpected instruction: ${(instruction as Prim).prim}`\n        );\n    }\n  })(instruction);\n\n  if (ctx?.traceCallback !== undefined) {\n    const trace: InstructionTrace = {\n      op: instruction,\n      in: stack,\n      out: retStack,\n    };\n    ctx.traceCallback(trace);\n  }\n\n  return retStack;\n}\n\nexport function contractSection<T extends 'parameter' | 'storage' | 'code'>(\n  contract: MichelsonContract,\n  section: T\n): MichelsonContractSection<T> {\n  for (const s of contract) {\n    if (s.prim === section) {\n      return s as MichelsonContractSection<T>;\n    }\n  }\n  throw new MichelsonError(contract, `missing contract section: ${section}`);\n}\n\nexport function contractViews(contract: MichelsonContract): {\n  [name: string]: MichelsonContractView;\n} {\n  const views: { [name: string]: MichelsonContractView } = {};\n  for (const s of contract) {\n    if (s.prim === 'view') {\n      views[s.args[0].string] = s;\n    }\n  }\n  return views;\n}\n\nfunction isContract(v: Expr): v is MichelsonContract {\n  if (Array.isArray(v)) {\n    for (const s of v) {\n      if ('prim' in s && (s.prim === 'parameter' || s.prim === 'storage' || s.prim === 'code')) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function contractEntryPoint(\n  src: MichelsonContract | MichelsonType,\n  ep?: string\n): MichelsonType | null {\n  ep = ep || '%default';\n  const entryPoint = contractEntryPoints(src).find((x) => x[0] === ep);\n\n  if (entryPoint !== undefined) {\n    return entryPoint[1];\n  } else if (ep === '%default') {\n    return isContract(src) ? contractSection(src, 'parameter').args[0] : src;\n  }\n  return null;\n}\n\nfunction isOrType(t: MichelsonType): t is MichelsonTypeOr<[MichelsonType, MichelsonType]> {\n  return Array.isArray(t) || t.prim === 'or';\n}\n\nexport function contractEntryPoints(\n  src: MichelsonContract | MichelsonType\n): [string, MichelsonType][] {\n  if (isContract(src)) {\n    const param = contractSection(src, 'parameter');\n    const ch = contractEntryPoints(param.args[0]);\n    const a = unpackAnnotations(param);\n    return a.f ? [[a.f[0], param.args[0]], ...ch] : ch;\n  }\n\n  if (isOrType(src)) {\n    const args = typeArgs(src);\n    const getArg = (n: 0 | 1): [string, MichelsonType][] => {\n      const a = unpackAnnotations(args[n]);\n      if (typeID(args[n]) === 'or') {\n        const ch = contractEntryPoints(args[n]);\n        return a.f ? [[a.f[0], args[n]], ...ch] : ch;\n      }\n      return a.f ? [[a.f[0], args[n]]] : [];\n    };\n    return [...getArg(0), ...getArg(1)];\n  }\n  return [];\n}\n\n// Contract validation\n\nexport function assertContractValid(\n  contract: MichelsonContract,\n  ctx?: Context\n): MichelsonReturnType {\n  const assertSection = (\n    parameter: MichelsonType,\n    storage: MichelsonType,\n    ret: MichelsonType,\n    code: InstructionList\n  ): MichelsonReturnType => {\n    assertTypeAnnotationsValid(parameter, true);\n    assertTypeAnnotationsValid(storage);\n    const arg: MichelsonType = {\n      prim: 'pair',\n      args: [\n        { ...parameter, ...{ annots: ['@parameter'] } },\n        { ...storage, ...{ annots: ['@storage'] } },\n      ],\n    };\n    const out = functionTypeInternal(code, [arg], { ...ctx, ...{ contract } });\n    if ('failed' in out) {\n      return out;\n    }\n\n    try {\n      assertStacksEqual(out, [ret]);\n    } catch (err) {\n      if (err instanceof MichelsonError) {\n        throw new MichelsonInstructionError(code, out, err.message);\n      } else {\n        throw err;\n      }\n    }\n    return out;\n  };\n\n  const parameter = contractSection(contract, 'parameter').args[0];\n  const storage = contractSection(contract, 'storage').args[0];\n  const code = contractSection(contract, 'code').args[0];\n  const expected: MichelsonType = {\n    prim: 'pair',\n    args: [{ prim: 'list', args: [{ prim: 'operation' }] }, storage],\n  };\n  const ret = assertSection(parameter, storage, expected, code);\n\n  for (const view of Object.values(contractViews(contract))) {\n    assertSection(view.args[1], storage, view.args[2], view.args[3]);\n  }\n\n  return ret;\n}\n\n// Exported wrapper functions\n\nexport function assertDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): void {\n  assertTypeAnnotationsValid(t);\n  assertDataValidInternal(d, t, ctx || null);\n}\n\nexport function functionType(\n  inst: MichelsonCode,\n  stack: MichelsonType[],\n  ctx?: Context\n): MichelsonReturnType {\n  for (const t of stack) {\n    assertTypeAnnotationsValid(t);\n  }\n\n  if (ctx?.contract !== undefined) {\n    for (const typesec of ['parameter', 'storage'] as const) {\n      const sec = contractSection(ctx.contract, typesec).args[0];\n      assertTypeAnnotationsValid(sec);\n    }\n  }\n\n  return functionTypeInternal(inst, stack, ctx || null);\n}\n\nexport function assertTypesEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(\n  a: T1,\n  b: T2,\n  field = false\n): void {\n  if (Array.isArray(a)) {\n    // type guards don't work for parametrized generic types\n    for (const v of a as MichelsonType[]) {\n      assertTypeAnnotationsValid(v);\n    }\n    for (const v of b as MichelsonType[]) {\n      assertTypeAnnotationsValid(v);\n    }\n  } else {\n    assertTypeAnnotationsValid(a as MichelsonType);\n    assertTypeAnnotationsValid(b as MichelsonType);\n  }\n  assertScalarTypesEqual(a, b, field);\n}\n\nexport function isTypeAnnotationsValid(t: MichelsonType, field = false): boolean {\n  try {\n    assertTypeAnnotationsValid(t, field);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isContractValid(\n  contract: MichelsonContract,\n  ctx?: Context\n): MichelsonReturnType | null {\n  try {\n    return assertContractValid(contract, ctx);\n  } catch {\n    return null;\n  }\n}\n\nexport function isDataValid(d: MichelsonData, t: MichelsonType, ctx?: Context): boolean {\n  try {\n    assertDataValid(d, t, ctx);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isTypeEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(\n  a: T1,\n  b: T2,\n  field = false\n): boolean {\n  try {\n    assertTypesEqual(a, b, field);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import {\n  MichelsonContract,\n  MichelsonContractSection,\n  MichelsonType,\n  MichelsonData,\n  MichelsonCode,\n  MichelsonReturnType,\n} from './michelson-types';\nimport {\n  assertContractValid,\n  contractSection,\n  contractEntryPoint,\n  assertDataValid,\n  assertTypeAnnotationsValid,\n  InstructionTrace,\n  Context,\n  functionType,\n  isDataValid,\n  contractEntryPoints,\n} from './michelson-typecheck';\nimport { Parser, ParserOptions } from './micheline-parser';\nimport {\n  assertMichelsonContract,\n  assertMichelsonType,\n  assertMichelsonData,\n} from './michelson-validator';\nimport {\n  InvalidDataExpressionError,\n  InvalidEntrypointError,\n  InvalidContractError,\n  InvalidTypeExpressionError,\n} from './error';\n\nexport interface ContractOptions extends ParserOptions {\n  traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class Contract {\n  private ctx: Context;\n  public readonly output: MichelsonReturnType;\n\n  constructor(public readonly contract: MichelsonContract, opt?: ContractOptions) {\n    this.ctx = { contract, ...opt };\n    this.output = assertContractValid(contract, this.ctx);\n  }\n\n  static parse(src: string | object, opt?: ContractOptions): Contract {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidContractError('empty contract');\n    }\n    if (assertMichelsonContract(expr)) {\n      return new Contract(expr, opt);\n    }\n    throw undefined;\n  }\n\n  static parseTypeExpression(src: string | object, opt?: ParserOptions): MichelsonType {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidTypeExpressionError('empty type expression');\n    }\n    if (assertMichelsonType(expr) && assertTypeAnnotationsValid(expr)) {\n      return expr;\n    }\n    throw undefined;\n  }\n\n  static parseDataExpression(src: string | object, opt?: ParserOptions): MichelsonData {\n    const p = new Parser(opt);\n    const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n    if (expr === null) {\n      throw new InvalidDataExpressionError('empty data expression');\n    }\n    if (assertMichelsonData(expr)) {\n      return expr;\n    }\n    throw undefined;\n  }\n\n  section<T extends 'parameter' | 'storage' | 'code'>(section: T): MichelsonContractSection<T> {\n    return contractSection(this.contract, section);\n  }\n\n  entryPoints(): [string, MichelsonType][] {\n    return contractEntryPoints(this.contract);\n  }\n\n  entryPoint(ep?: string): MichelsonType | null {\n    return contractEntryPoint(this.contract, ep);\n  }\n\n  assertDataValid(d: MichelsonData, t: MichelsonType): void {\n    assertDataValid(d, t, this.ctx);\n  }\n\n  isDataValid(d: MichelsonData, t: MichelsonType): boolean {\n    return isDataValid(d, t, this.ctx);\n  }\n\n  assertParameterValid(ep: string | null, d: MichelsonData): void {\n    const t = this.entryPoint(ep || undefined);\n    if (t === null) {\n      throw new InvalidEntrypointError(ep?.toString());\n    }\n    this.assertDataValid(d, t);\n  }\n\n  isParameterValid(ep: string | null, d: MichelsonData): boolean {\n    try {\n      this.assertParameterValid(ep, d);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  functionType(inst: MichelsonCode, stack: MichelsonType[]): MichelsonReturnType {\n    return functionType(inst, stack, this.ctx);\n  }\n}\n\nexport const dummyContract = new Contract([\n  { prim: 'parameter', args: [{ prim: 'unit' }] },\n  { prim: 'storage', args: [{ prim: 'unit' }] },\n  {\n    prim: 'code',\n    args: [[{ prim: 'CAR' }, { prim: 'NIL', args: [{ prim: 'operation' }] }, { prim: 'PAIR' }]],\n  },\n]);\n","import { sourceReference, Expr } from './micheline';\nimport { InstructionTrace, MichelsonInstructionError } from './michelson-typecheck';\nimport { emitMicheline } from './micheline-emitter';\nimport { unpackAnnotations, MichelsonError, MichelsonTypeError } from './utils';\nimport { MichelsonReturnType } from './michelson-types';\n\nexport function formatStack(s: MichelsonReturnType): string {\n  if ('failed' in s) {\n    return `[FAILED: ${emitMicheline(s.failed)}]`;\n  }\n\n  return s\n    .map((v, i) => {\n      const ann = unpackAnnotations(v);\n      return `[${i}${ann.v ? '/' + ann.v[0] : ''}]: ${emitMicheline(v)}`;\n    })\n    .join('\\n');\n}\n\nexport function traceDumpFunc(\n  blocks: boolean,\n  cb: (s: string) => void\n): (v: InstructionTrace) => void {\n  return (v: InstructionTrace) => {\n    if (Array.isArray(v) && !blocks) {\n      return;\n    }\n    const macro = v.op[sourceReference]?.macro;\n\n    const msg = `${macro ? 'Macro' : 'Op'}: ${\n      macro ? emitMicheline(macro, undefined, true) + ' / ' : ''\n    }${emitMicheline(v.op)}\nInput:\n${formatStack(v.in)}\nOutput:\n${formatStack(v.out)}\n`;\n    cb(msg);\n  };\n}\n\nexport function formatError(err: MichelsonError): string {\n  if (err instanceof MichelsonInstructionError) {\n    const macro = err.val[sourceReference]?.macro;\n    return `${macro ? 'Macro' : 'Op'}: ${\n      macro ? emitMicheline(macro, undefined, true) + ' / ' : ''\n    }${emitMicheline(err.val)}\nStack:\n${formatStack(err.stackState)}\n`;\n  } else if (err instanceof MichelsonTypeError) {\n    const type = Array.isArray(err.val)\n      ? '[' + (err.val as Expr[]).map((v, i) => `[${i}]: ${emitMicheline(v)}`).join('; ') + ']'\n      : emitMicheline(err.val);\n\n    return `Type: ${type}\n${\n  err.data\n    ? `Data: ${emitMicheline(err.data)}\n`\n    : ''\n}\n`;\n  } else {\n    return `Value: ${emitMicheline(err.val)}`;\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n    \"version\": \"13.0.1\"\n};\n"],"names":["Protocol","assertArgs"],"mappings":"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"}