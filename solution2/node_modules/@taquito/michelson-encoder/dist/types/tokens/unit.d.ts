import { ComparableToken, SemanticEncoding, Token, TokenFactory } from './token';
import { BaseTokenSchema } from '../schema/types';
export declare class UnitToken extends ComparableToken {
    protected val: {
        prim: string;
        args: any[];
        annots: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: 'unit';
    constructor(val: {
        prim: string;
        args: any[];
        annots: any[];
    }, idx: number, fac: TokenFactory);
    Encode(args: any[]): any;
    EncodeObject(val: any, semantic?: SemanticEncoding): any;
    Execute(_val: {
        prim: string;
    }): symbol;
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema(): "unit";
    generateSchema(): BaseTokenSchema;
    compare(_val1: any, _val2: any): number;
    ToKey(_val: any): symbol;
    ToBigMapKey(_val: any): {
        key: {
            prim: string;
        };
        type: {
            prim: "unit";
        };
    };
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
