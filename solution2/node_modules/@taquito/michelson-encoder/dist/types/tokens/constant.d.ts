import { ConstantTokenSchema } from '../schema/types';
import { Semantic, SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';
export declare class GlobalConstantEncodingError extends TokenValidationError {
    value: any;
    token: GlobalConstantToken;
    name: string;
    constructor(value: any, token: GlobalConstantToken, message: string);
}
export declare class GlobalConstantDecodingError extends TokenValidationError {
    value: any;
    token: GlobalConstantToken;
    name: string;
    constructor(value: any, token: GlobalConstantToken, message: string);
}
export declare class GlobalConstantToken extends Token {
    protected val: {
        prim: string;
        args: any[];
        annots?: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: 'constant';
    constructor(val: {
        prim: string;
        args: any[];
        annots?: any[];
    }, idx: number, fac: TokenFactory);
    Execute(val: any, semantic?: Semantic): any;
    Encode(args: any[]): any;
    EncodeObject(val: any, semantic?: SemanticEncoding): any;
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema(): "constant";
    generateSchema(): ConstantTokenSchema;
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
