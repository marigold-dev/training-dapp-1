import { LambdaTokenSchema } from '../schema/types';
import { SemanticEncoding, Token, TokenFactory } from './token';
export declare class LambdaToken extends Token {
    protected val: {
        prim: string;
        args: any[];
        annots: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: 'lambda';
    constructor(val: {
        prim: string;
        args: any[];
        annots: any[];
    }, idx: number, fac: TokenFactory);
    get paramSchema(): Token;
    get returnSchema(): Token;
    Execute(val: any): any;
    Encode(args: any[]): any;
    EncodeObject(val: any, semantic?: SemanticEncoding): any;
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema(): {
        lambda: {
            parameters: any;
            returns: any;
        };
    };
    generateSchema(): LambdaTokenSchema;
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
