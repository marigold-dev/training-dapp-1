import stringify from 'fast-json-stable-stringify';
import BigNumber from 'bignumber.js';
import { b58decode, validateAddress, ValidationResult, encodePubKey, b58decodeL2Address, encodeL2Address, encodeKey, validatePublicKey, Prefix, b58cdecode, prefix, encodeKeyHash, validateKeyHash, validateSignature, validateChain } from '@taquito/utils';

var _a$1;
/**
 *  @category Error
 *  @description Error that indicates an invalid map type being passed or used
 */
class InvalidMapTypeError extends Error {
    constructor(mapType) {
        super(`The map type '${mapType}' is invalid`);
        this.mapType = mapType;
        this.name = 'InvalidMapTypeError';
    }
}
// Retrieve a unique symbol associated with the key from the environment
// Used in order to identify all object that are of type MichelsonMap even if they come from different module
const michelsonMapTypeSymbol = Symbol.for('taquito-michelson-map-type-symbol');
const isMapType = (value) => {
    return 'args' in value && Array.isArray(value.args) && value.args.length === 2;
};
/**
 *  @category Error
 *  @description Error that indicates a map type mismatch, where an attempt to set a key or value in a Map doesn't match the defined type of the Map
 */
class MapTypecheckError extends Error {
    constructor(value, type, errorType) {
        super(`${errorType} not compliant with underlying michelson type`);
        this.value = value;
        this.type = type;
        this.name = 'MapTypecheckError';
    }
}
/**
 * @description Michelson Map is an abstraction over the michelson native map. It supports complex Pair as key
 */
class MichelsonMap {
    /**
     * @param mapType If specified key and value will be type-checked before being added to the map
     *
     * @example new MichelsonMap({ prim: "map", args: [{prim: "string"}, {prim: "int"}]})
     */
    constructor(mapType) {
        this.valueMap = new Map();
        this.keyMap = new Map();
        this[_a$1] = true;
        if (mapType) {
            this.setType(mapType);
        }
    }
    // Used to check if an object is a michelson map.
    // Using instanceof was not working for project that had multiple instance of taquito dependencies
    // as the class constructor is different
    static isMichelsonMap(obj) {
        return obj && obj[michelsonMapTypeSymbol] === true;
    }
    setType(mapType) {
        if (!isMapType(mapType)) {
            throw new InvalidMapTypeError(mapType.toString());
        }
        this.keySchema = new Schema(mapType.args[0]);
        this.valueSchema = new Schema(mapType.args[1]);
    }
    removeType() {
        this.keySchema = undefined;
        this.valueSchema = undefined;
    }
    static fromLiteral(obj, mapType) {
        const map = new MichelsonMap(mapType);
        Object.keys(obj).forEach((key) => {
            map.set(key, obj[key]);
        });
        return map;
    }
    typecheckKey(key) {
        if (this.keySchema) {
            return this.keySchema.Typecheck(key);
        }
        return true;
    }
    typecheckValue(value) {
        if (this.valueSchema) {
            return this.valueSchema.Typecheck(value);
        }
        return true;
    }
    assertTypecheckValue(value) {
        if (!this.typecheckValue(value)) {
            throw new MapTypecheckError(value, this.valueSchema, 'value');
        }
    }
    assertTypecheckKey(key) {
        if (!this.typecheckKey(key)) {
            throw new MapTypecheckError(key, this.keySchema, 'key');
        }
    }
    serializeDeterministically(key) {
        return stringify(key);
    }
    *keys() {
        for (const [key] of this.entries()) {
            yield key;
        }
    }
    *values() {
        for (const [, value] of this.entries()) {
            yield value;
        }
    }
    *entries() {
        for (const key of this.valueMap.keys()) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            yield [this.keyMap.get(key), this.valueMap.get(key)];
        }
    }
    get(key) {
        this.assertTypecheckKey(key);
        const strKey = this.serializeDeterministically(key);
        return this.valueMap.get(strKey);
    }
    /**
     *
     * @description Set a key and a value in the MichelsonMap. If the key already exists, override the current value.
     *
     * @example map.set("myKey", "myValue") // Using a string as key
     *
     * @example map.set({0: "test", 1: "test1"}, "myValue") // Using a pair as key
     *
     * @warn The same key can be represented in multiple ways, depending on the type of the key. This duplicate key situation will cause a runtime error (duplicate key) when sending the map data to the Tezos RPC node.
     *
     * For example, consider a contract with a map whose key is of type boolean.  If you set the following values in MichelsonMap: map.set(false, "myValue") and map.set(null, "myValue").
     *
     * You will get two unique entries in the MichelsonMap. These values will both be evaluated as falsy by the MichelsonEncoder and ultimately rejected by the Tezos RPC.
     */
    set(key, value) {
        this.assertTypecheckKey(key);
        this.assertTypecheckValue(value);
        const strKey = this.serializeDeterministically(key);
        this.keyMap.set(strKey, key);
        this.valueMap.set(strKey, value);
    }
    delete(key) {
        this.assertTypecheckKey(key);
        this.keyMap.delete(this.serializeDeterministically(key));
        this.valueMap.delete(this.serializeDeterministically(key));
    }
    has(key) {
        this.assertTypecheckKey(key);
        const strKey = this.serializeDeterministically(key);
        return this.keyMap.has(strKey) && this.valueMap.has(strKey);
    }
    clear() {
        this.keyMap.clear();
        this.valueMap.clear();
    }
    get size() {
        return this.keyMap.size;
    }
    forEach(cb) {
        for (const [key, value] of this.entries()) {
            cb(value, key, this);
        }
    }
}
_a$1 = michelsonMapTypeSymbol;

/**
 *  @category Error
 *  @description Error that indicates a failure when encoding invalid or incorrect data (e.g. if an address is expected but a number is received)
 */
class TokenValidationError extends Error {
    constructor(value, token, baseMessage) {
        super();
        this.value = value;
        this.token = token;
        this.name = 'ValidationError';
        const annot = this.token.annot();
        const annotText = annot ? `[${annot}] ` : '';
        this.message = `${annotText}${baseMessage}`;
    }
}
class Token {
    constructor(val, idx, fac) {
        this.val = val;
        this.idx = idx;
        this.fac = fac;
        this.createToken = this.fac;
    }
    typeWithoutAnnotations() {
        const handleMichelsonExpression = (val) => {
            if (typeof val === 'object') {
                if (Array.isArray(val)) {
                    const array = val;
                    return array.map((item) => handleMichelsonExpression(item));
                }
                const extended = val;
                if (extended.args) {
                    return {
                        prim: extended.prim,
                        args: extended.args.map((x) => handleMichelsonExpression(x)),
                    };
                }
                else {
                    return {
                        prim: extended.prim,
                    };
                }
            }
            return val;
        };
        const handleMichelsonExtended = (val) => {
            if (val.args) {
                return {
                    prim: val.prim,
                    args: val.args.map((x) => handleMichelsonExpression(x)),
                };
            }
            else {
                return {
                    prim: val.prim,
                };
            }
        };
        return handleMichelsonExtended(this.val);
    }
    annot() {
        return (Array.isArray(this.val.annots) && this.val.annots.length > 0
            ? this.val.annots[0]
            : String(this.idx)).replace(/(%|:)(_Liq_entry_)?/, '');
    }
    hasAnnotations() {
        return Array.isArray(this.val.annots) && this.val.annots.length;
    }
    get tokenVal() {
        return this.val;
    }
    ExtractSignature() {
        return [[this.ExtractSchema()]];
    }
}
class ComparableToken extends Token {
    compare(o1, o2) {
        if (o1 === o2) {
            return 0;
        }
        return o1 < o2 ? -1 : 1;
    }
}

/**
 *  @category Error
 *  @description Error that indicates a failure happening when parsing encoding/executing Big Map types
 */
class BigMapValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'BigMapValidationError';
    }
}
class BigMapToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    get ValueSchema() {
        return this.createToken(this.val.args[1], 0);
    }
    get KeySchema() {
        return this.createToken(this.val.args[0], 0);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            big_map: {
                key: this.KeySchema.ExtractSchema(),
                value: this.ValueSchema.ExtractSchema(),
            },
        };
    }
    generateSchema() {
        return {
            __michelsonType: BigMapToken.prim,
            schema: {
                key: this.KeySchema.generateSchema(),
                value: this.ValueSchema.generateSchema(),
            },
        };
    }
    isValid(value) {
        if (MichelsonMap.isMichelsonMap(value)) {
            return null;
        }
        return new BigMapValidationError(value, this, 'Value must be a MichelsonMap');
    }
    objLitToMichelsonMap(val) {
        if (val instanceof MichelsonMap)
            return val;
        if (typeof val === 'object') {
            if (Object.keys(val).length === 0) {
                return new MichelsonMap();
            }
            else {
                return MichelsonMap.fromLiteral(val);
            }
        }
        return val;
    }
    Encode(args) {
        const val = this.objLitToMichelsonMap(args.pop());
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return Array.from(val.keys())
            .sort((a, b) => this.KeySchema.compare(a, b))
            .map((key) => {
            return {
                prim: 'Elt',
                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],
            };
        });
    }
    EncodeObject(args, semantic) {
        const val = this.objLitToMichelsonMap(args);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[BigMapToken.prim]) {
            return semantic[BigMapToken.prim](val, this.val);
        }
        return Array.from(val.keys())
            .sort((a, b) => this.KeySchema.compare(a, b))
            .map((key) => {
            return {
                prim: 'Elt',
                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],
            };
        });
    }
    Execute(val, semantic) {
        if (semantic && semantic[BigMapToken.prim]) {
            return semantic[BigMapToken.prim](val, this.val);
        }
        if (Array.isArray(val)) {
            // Athens is returning an empty array for big map in storage
            // Internal: In taquito v5 it is still used to decode big map diff (as if they were a regular map)
            const map = new MichelsonMap(this.val);
            val.forEach((current) => {
                map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1]));
            });
            return map;
        }
        else if ('int' in val) {
            // Babylon is returning an int with the big map id in contract storage
            return val.int;
        }
        else {
            throw new BigMapValidationError(val, this, `Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got ${JSON.stringify(val)}`);
        }
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (BigMapToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.KeySchema.findAndReturnTokens(tokenToFind, tokens);
        this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
BigMapToken.prim = 'big_map';

/**
 *  @category Error
 *  @description Error that indicates a failure when decoding OR Token methods
 */
class OrTokenDecodingError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'OrTokenDecodingError';
    }
}
class OrToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Encode(args) {
        const label = args[args.length - 1];
        const leftToken = this.createToken(this.val.args[0], this.idx);
        let keyCount = 1;
        if (leftToken instanceof OrToken) {
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
        if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {
            args.pop();
            return { prim: 'Left', args: [leftToken.Encode(args)] };
        }
        else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {
            args.pop();
            return { prim: 'Right', args: [rightToken.Encode(args)] };
        }
        else {
            if (leftToken instanceof OrToken) {
                const val = leftToken.Encode(args);
                if (val) {
                    return { prim: 'Left', args: [val] };
                }
            }
            if (rightToken instanceof OrToken) {
                const val = rightToken.Encode(args);
                if (val) {
                    return { prim: 'Right', args: [val] };
                }
            }
            return null;
        }
    }
    ExtractSignature() {
        const leftToken = this.createToken(this.val.args[0], this.idx);
        let keyCount = 1;
        if (leftToken instanceof OrToken) {
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
        const newSig = [];
        if (leftToken instanceof OrToken) {
            newSig.push(...leftToken.ExtractSignature());
        }
        else {
            for (const sig of leftToken.ExtractSignature()) {
                newSig.push([leftToken.annot(), ...sig]);
            }
        }
        if (rightToken instanceof OrToken) {
            newSig.push(...rightToken.ExtractSignature());
        }
        else {
            for (const sig of rightToken.ExtractSignature()) {
                newSig.push([rightToken.annot(), ...sig]);
            }
        }
        return newSig;
    }
    EncodeObject(args, semantic) {
        const label = Object.keys(args)[0];
        const leftToken = this.createToken(this.val.args[0], this.idx);
        let keyCount = 1;
        if (leftToken instanceof OrToken) {
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
        if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {
            return { prim: 'Left', args: [leftToken.EncodeObject(args[label], semantic)] };
        }
        else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {
            return { prim: 'Right', args: [rightToken.EncodeObject(args[label], semantic)] };
        }
        else {
            if (leftToken instanceof OrToken) {
                const val = leftToken.EncodeObject(args, semantic);
                if (val) {
                    return { prim: 'Left', args: [val] };
                }
            }
            if (rightToken instanceof OrToken) {
                const val = rightToken.EncodeObject(args, semantic);
                if (val) {
                    return { prim: 'Right', args: [val] };
                }
            }
            return null;
        }
    }
    Execute(val, semantics) {
        const leftToken = this.createToken(this.val.args[0], this.idx);
        let keyCount = 1;
        if (leftToken instanceof OrToken) {
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
        if (val.prim === 'Right') {
            if (rightToken instanceof OrToken) {
                return rightToken.Execute(val.args[0], semantics);
            }
            else {
                return {
                    [rightToken.annot()]: rightToken.Execute(val.args[0], semantics),
                };
            }
        }
        else if (val.prim === 'Left') {
            if (leftToken instanceof OrToken) {
                return leftToken.Execute(val.args[0], semantics);
            }
            return {
                [leftToken.annot()]: leftToken.Execute(val.args[0], semantics),
            };
        }
        else {
            throw new OrTokenDecodingError(`Was expecting Left or Right prim but got: ${val.prim}`);
        }
    }
    traversal(getLeftValue, getRightValue, concat) {
        const leftToken = this.createToken(this.val.args[0], this.idx);
        let keyCount = 1;
        let leftValue;
        if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {
            leftValue = getLeftValue(leftToken);
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        else {
            leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };
        }
        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
        let rightValue;
        if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {
            rightValue = getRightValue(rightToken);
        }
        else {
            rightValue = { [rightToken.annot()]: getRightValue(rightToken) };
        }
        const res = concat(leftValue, rightValue);
        return res;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return this.traversal((leftToken) => leftToken.ExtractSchema(), (rightToken) => rightToken.ExtractSchema(), (leftValue, rightValue) => (Object.assign(Object.assign({}, leftValue), rightValue)));
    }
    generateSchema() {
        return {
            __michelsonType: OrToken.prim,
            schema: this.traversal((leftToken) => {
                if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {
                    return leftToken.generateSchema().schema;
                }
                else {
                    return leftToken.generateSchema();
                }
            }, (rightToken) => {
                if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {
                    return rightToken.generateSchema().schema;
                }
                else {
                    return rightToken.generateSchema();
                }
            }, (leftValue, rightValue) => (Object.assign(Object.assign({}, leftValue), rightValue))),
        };
    }
    findToken(label) {
        const leftToken = this.createToken(this.val.args[0], this.idx);
        let keyCount = 1;
        if (leftToken instanceof OrToken) {
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);
        if (String(leftToken.annot()) === String(label) &&
            !(leftToken instanceof OrToken) &&
            leftToken instanceof ComparableToken) {
            return leftToken;
        }
        else if (String(rightToken.annot()) === String(label) &&
            !(rightToken instanceof OrToken) &&
            rightToken instanceof ComparableToken) {
            return rightToken;
        }
        else {
            if (leftToken instanceof OrToken) {
                const tok = leftToken.findToken(label);
                if (tok) {
                    return tok;
                }
            }
            if (rightToken instanceof OrToken) {
                const tok = rightToken.findToken(label);
                if (tok) {
                    return tok;
                }
            }
            return null;
        }
    }
    compare(val1, val2) {
        const labelVal1 = Object.keys(val1)[0];
        const labelVal2 = Object.keys(val2)[0];
        if (labelVal1 === labelVal2) {
            const token = this.findToken(labelVal1);
            if (token instanceof ComparableToken) {
                return token.compare(val1[labelVal1], val2[labelVal1]);
            }
        }
        else {
            const encoded1 = JSON.stringify(this.EncodeObject(val1));
            const encoded2 = JSON.stringify(this.EncodeObject(val2));
            return encoded1 < encoded2 ? -1 : 1;
        }
    }
    ToKey(val) {
        return this.Execute(val);
    }
    ToBigMapKey(val) {
        return {
            key: this.EncodeObject(val),
            type: this.typeWithoutAnnotations(),
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (OrToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.traversal((leftToken) => leftToken.findAndReturnTokens(tokenToFind, tokens), (rightToken) => rightToken.findAndReturnTokens(tokenToFind, tokens), (leftValue, rightValue) => (Object.assign(Object.assign({}, leftValue), rightValue)));
        return tokens;
    }
}
OrToken.prim = 'or';

/**
 *  @category Error
 *  @description Error that indicates in invalid token argument being passed
 */
class TokenArgumentValidationError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'TokenArgumentValidationError';
    }
}
/**
 *  @category Error
 *  @description Error that indicates a failure occurring when doing a comparison of tokens
 */
class TokenComparisonError extends Error {
    constructor(val1, val2) {
        super(`Tokens ${val1} and ${val2} are not comparable`);
        this.val1 = val1;
        this.val2 = val2;
        this.name = 'TokenComparisonError';
    }
}
// collapse comb pair
function collapse$1(val, prim = PairToken.prim) {
    if (Array.isArray(val)) {
        return collapse$1({
            prim: prim,
            args: val,
        }, prim);
    }
    if (val.args === undefined) {
        throw new TokenArgumentValidationError('Encountered an invalid PairToken with no arguments, a pair must have two or more arguments');
    }
    if (val.args.length > 2) {
        return [
            val.args[0],
            {
                prim: prim,
                args: val.args.slice(1),
            },
        ];
    }
    return [val.args[0], val.args[1]];
}
class PairToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(Array.isArray(val)
            ? {
                prim: PairToken.prim,
                args: val,
            }
            : val.prim ? val : {
                prim: PairToken.prim,
                args: val,
            }, idx, fac);
    }
    args() {
        // collapse comb pair
        return collapse$1(this.val);
    }
    tokens() {
        let cnt = 0;
        return this.args().map((a) => {
            const tok = this.createToken(a, this.idx + cnt);
            if (tok instanceof PairToken) {
                cnt += Object.keys(tok.ExtractSchema()).length;
            }
            else {
                cnt++;
            }
            return tok;
        });
    }
    Encode(args) {
        return {
            prim: 'Pair',
            args: this.tokens().map((t) => t.Encode(args)),
        };
    }
    ExtractSignature() {
        const args = this.args();
        const leftToken = this.createToken(args[0], this.idx);
        let keyCount = 1;
        if (leftToken instanceof OrToken) {
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        const rightToken = this.createToken(args[1], this.idx + keyCount);
        const newSig = [];
        for (const leftSig of leftToken.ExtractSignature()) {
            for (const rightSig of rightToken.ExtractSignature()) {
                newSig.push([...leftSig, ...rightSig]);
            }
        }
        return newSig;
    }
    ToBigMapKey(val) {
        return {
            key: this.EncodeObject(val),
            type: this.typeWithoutAnnotations(),
        };
    }
    ToKey(val) {
        return this.Execute(val);
    }
    EncodeObject(args, semantic) {
        const [leftToken, rightToken] = this.tokens();
        let leftValue;
        if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {
            leftValue = args;
        }
        else {
            leftValue = args[leftToken.annot()];
        }
        let rightValue;
        if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {
            rightValue = args;
        }
        else {
            rightValue = args[rightToken.annot()];
        }
        return {
            prim: 'Pair',
            args: [
                leftToken.EncodeObject(leftValue, semantic),
                rightToken.EncodeObject(rightValue, semantic),
            ],
        };
    }
    traversal(getLeftValue, getRightValue) {
        const args = this.args();
        const leftToken = this.createToken(args[0], this.idx);
        let keyCount = 1;
        let leftValue;
        if (leftToken instanceof PairToken) {
            keyCount = Object.keys(leftToken.ExtractSchema()).length;
        }
        if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {
            leftValue = getLeftValue(leftToken);
        }
        else {
            leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };
        }
        const rightToken = this.createToken(args[1], this.idx + keyCount);
        let rightValue;
        if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {
            rightValue = getRightValue(rightToken);
        }
        else {
            rightValue = { [rightToken.annot()]: getRightValue(rightToken) };
        }
        const res = Object.assign(Object.assign({}, leftValue), rightValue);
        return res;
    }
    Execute(val, semantics) {
        const args = collapse$1(val, 'Pair');
        return this.traversal((leftToken) => leftToken.Execute(args[0], semantics), (rightToken) => rightToken.Execute(args[1], semantics));
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return this.traversal((leftToken) => leftToken.ExtractSchema(), (rightToken) => rightToken.ExtractSchema());
    }
    generateSchema() {
        return {
            __michelsonType: PairToken.prim,
            schema: this.traversal((leftToken) => {
                if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {
                    return leftToken.generateSchema().schema;
                }
                else {
                    return leftToken.generateSchema();
                }
            }, (rightToken) => {
                if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {
                    return rightToken.generateSchema().schema;
                }
                else {
                    return rightToken.generateSchema();
                }
            }),
        };
    }
    compare(val1, val2) {
        const [leftToken, rightToken] = this.tokens();
        const getValue = (token, args) => {
            if (token instanceof PairToken && !token.hasAnnotations()) {
                return args;
            }
            else {
                return args[token.annot()];
            }
        };
        if (leftToken instanceof ComparableToken && rightToken instanceof ComparableToken) {
            const result = leftToken.compare(getValue(leftToken, val1), getValue(leftToken, val2));
            if (result === 0) {
                return rightToken.compare(getValue(rightToken, val1), getValue(rightToken, val2));
            }
            return result;
        }
        throw new TokenComparisonError(val1, val2);
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (PairToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.tokens().map((t) => t.findAndReturnTokens(tokenToFind, tokens));
        return tokens;
    }
}
PairToken.prim = 'pair';

class NatValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'NatValidationError';
    }
}
class NatToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        return new BigNumber(val[Object.keys(val)[0]]);
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { int: new BigNumber(val).toFixed() };
    }
    isValid(val) {
        const bigNumber = new BigNumber(val);
        if (bigNumber.isNaN()) {
            return new NatValidationError(val, this, `Value is not a number: ${val}`);
        }
        else if (bigNumber.isNegative()) {
            return new NatValidationError(val, this, `Value cannot be negative: ${val}`);
        }
        else {
            return null;
        }
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[NatToken.prim]) {
            return semantic[NatToken.prim](val);
        }
        return { int: new BigNumber(val).toFixed() };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return NatToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: NatToken.prim,
            schema: NatToken.prim,
        };
    }
    ToBigMapKey(val) {
        return {
            key: { int: String(val) },
            type: { prim: NatToken.prim },
        };
    }
    ToKey({ int }) {
        return new BigNumber(int);
    }
    compare(nat1, nat2) {
        const o1 = Number(nat1);
        const o2 = Number(nat2);
        if (o1 === o2) {
            return 0;
        }
        return o1 < o2 ? -1 : 1;
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (NatToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
NatToken.prim = 'nat';

class StringToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        return val[Object.keys(val)[0]];
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return StringToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: StringToken.prim,
            schema: StringToken.prim,
        };
    }
    Encode(args) {
        const val = args.pop();
        return { string: val };
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[StringToken.prim]) {
            return semantic[StringToken.prim](val);
        }
        return { string: val };
    }
    ToKey({ string }) {
        return string;
    }
    ToBigMapKey(val) {
        return {
            key: { string: val },
            type: { prim: StringToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (StringToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
StringToken.prim = 'string';

class AddressValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'AddressValidationError';
    }
}
class AddressToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    ToBigMapKey(val) {
        const decoded = b58decode(val);
        return {
            key: { bytes: decoded },
            type: { prim: 'bytes' },
        };
    }
    isValid(value) {
        if (validateAddress(value) !== ValidationResult.VALID) {
            return new AddressValidationError(value, this, `Address is not valid: ${value}`);
        }
        return null;
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[AddressToken.prim]) {
            return semantic[AddressToken.prim](val);
        }
        return { string: val };
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        if (!val.bytes) {
            throw new AddressValidationError(val, this, `cannot be missing both string and bytes: ${val}`);
        }
        return encodePubKey(val.bytes);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return AddressToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: AddressToken.prim,
            schema: AddressToken.prim,
        };
    }
    ToKey({ bytes, string }) {
        if (string) {
            return string;
        }
        if (!bytes) {
            throw new AddressValidationError({ bytes, string }, this, `cannot be missing both string and bytes ${{ string, bytes }}`);
        }
        return encodePubKey(bytes);
    }
    compare(address1, address2) {
        const isImplicit = (address) => {
            return address.startsWith('tz');
        };
        const implicit1 = isImplicit(address1);
        const implicit2 = isImplicit(address2);
        if (implicit1 && !implicit2) {
            return -1;
        }
        else if (implicit2 && !implicit1) {
            return 1;
        }
        return super.compare(address1, address2);
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (AddressToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
AddressToken.prim = 'address';

class MapValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'MapValidationError';
    }
}
class MapToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    get ValueSchema() {
        return this.createToken(this.val.args[1], 0);
    }
    get KeySchema() {
        return this.createToken(this.val.args[0], 0);
    }
    isValid(value) {
        if (MichelsonMap.isMichelsonMap(value)) {
            return null;
        }
        return new MapValidationError(value, this, 'Value must be a MichelsonMap');
    }
    Execute(val, semantics) {
        const map = new MichelsonMap(this.val);
        val.forEach((current) => {
            map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1], semantics));
        });
        return map;
    }
    objLitToMichelsonMap(val) {
        if (val instanceof MichelsonMap)
            return val;
        if (typeof val === 'object') {
            if (Object.keys(val).length === 0) {
                return new MichelsonMap();
            }
            else {
                return MichelsonMap.fromLiteral(val);
            }
        }
        return val;
    }
    Encode(args) {
        const val = this.objLitToMichelsonMap(args.pop());
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return Array.from(val.keys())
            .sort((a, b) => this.KeySchema.compare(a, b))
            .map((key) => {
            return {
                prim: 'Elt',
                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],
            };
        });
    }
    EncodeObject(args, semantic) {
        const val = this.objLitToMichelsonMap(args);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[MapToken.prim]) {
            return semantic[MapToken.prim](val);
        }
        return Array.from(val.keys())
            .sort((a, b) => this.KeySchema.compare(a, b))
            .map((key) => {
            return {
                prim: 'Elt',
                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],
            };
        });
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            map: {
                key: this.KeySchema.ExtractSchema(),
                value: this.ValueSchema.ExtractSchema(),
            },
        };
    }
    generateSchema() {
        return {
            __michelsonType: MapToken.prim,
            schema: {
                key: this.KeySchema.generateSchema(),
                value: this.ValueSchema.generateSchema(),
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (MapToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.KeySchema.findAndReturnTokens(tokenToFind, tokens);
        this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
MapToken.prim = 'map';

class BoolToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        return String(val.prim).toLowerCase() === 'true' ? true : false;
    }
    Encode(args) {
        const val = args.pop();
        return { prim: val ? 'True' : 'False' };
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[BoolToken.prim]) {
            return semantic[BoolToken.prim](val);
        }
        return { prim: val ? 'True' : 'False' };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return BoolToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: BoolToken.prim,
            schema: BoolToken.prim,
        };
    }
    ToBigMapKey(val) {
        return {
            key: this.EncodeObject(val),
            type: { prim: BoolToken.prim },
        };
    }
    ToKey(val) {
        return this.EncodeObject(val);
    }
    compare(val1, val2) {
        if ((val1 && val2) || (!val1 && !val2)) {
            return 0;
        }
        else if (val1) {
            return 1;
        }
        else {
            return -1;
        }
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (BoolToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
BoolToken.prim = 'bool';

class TxRollupL2AddressValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'TxRollupL2AddressValidationError';
    }
}
class TxRollupL2AddressToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    ToBigMapKey(val) {
        const decoded = b58decodeL2Address(val);
        return {
            key: { bytes: decoded },
            type: { prim: 'bytes' }
        };
    }
    isValid(value) {
        if (validateAddress(value) !== ValidationResult.VALID) {
            throw new TxRollupL2AddressValidationError(value, this, `tx_rollup_l2_address is not valid: ${value}`);
        }
        return null;
    }
    Encode(args) {
        const val = args.pop();
        if (!val) {
            throw new TxRollupL2AddressValidationError(val, this, `arg missing to encode: this -> "${val}"`);
        }
        // no need to test since method throws
        this.isValid(val);
        return { string: val };
    }
    EncodeObject(val, semantic) {
        // no need to test since method throws
        this.isValid(val);
        if (semantic && semantic[TxRollupL2AddressToken.prim]) {
            return semantic[TxRollupL2AddressToken.prim](val);
        }
        return { string: val };
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        if (!val.bytes) {
            throw new TxRollupL2AddressValidationError(val, this, `value cannot be missing string and byte value. must have one ${JSON.stringify(val)}`);
        }
        return encodeL2Address(val.bytes);
    }
    ExtractSchema() {
        return TxRollupL2AddressToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: TxRollupL2AddressToken.prim,
            schema: TxRollupL2AddressToken.prim
        };
    }
    ToKey({ bytes, string }) {
        if (string) {
            return string;
        }
        if (!bytes) {
            throw new TxRollupL2AddressValidationError(bytes, this, `value cannot be missing string and byte value. must have one: bytes = ${bytes}`);
        }
        return encodeL2Address(bytes);
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (TxRollupL2AddressToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
TxRollupL2AddressToken.prim = 'tx_rollup_l2_address';

class ContractValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'ContractValidationError';
    }
}
class ContractToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(value) {
        // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)
        if (validateAddress(value) !== ValidationResult.VALID) {
            return new ContractValidationError(value, this, 'Contract address is not valid');
        }
        return null;
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        if (!val.bytes) {
            throw new ContractValidationError(val, this, 'must contain bytes or string');
        }
        return encodePubKey(val.bytes);
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[ContractToken.prim]) {
            return semantic[ContractToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return ContractToken.prim;
    }
    generateSchema() {
        const valueSchema = this.createToken(this.val.args[0], 0);
        return {
            __michelsonType: ContractToken.prim,
            schema: {
                parameter: this.val.args[0] ? valueSchema.generateSchema() : {},
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (ContractToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
ContractToken.prim = 'contract';

class ListValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'ListValidationError';
    }
}
class ListToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    get valueSchema() {
        return this.createToken(this.val.args[0], this.idx);
    }
    isValid(value) {
        if (Array.isArray(value)) {
            return null;
        }
        return new ListValidationError(value, this, 'Value must be an array');
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        const schema = this.createToken(this.val.args[0], 0);
        return val.reduce((prev, current) => {
            return [...prev, schema.EncodeObject(current)];
        }, []);
    }
    Execute(val, semantics) {
        const schema = this.createToken(this.val.args[0], 0);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return val.reduce((prev, current) => {
            return [...prev, schema.Execute(current, semantics)];
        }, []);
    }
    EncodeObject(args, semantic) {
        const schema = this.createToken(this.val.args[0], 0);
        const err = this.isValid(args);
        if (err) {
            throw err;
        }
        if (semantic && semantic[ListToken.prim]) {
            return semantic[ListToken.prim](args);
        }
        return args.reduce((prev, current) => {
            return [...prev, schema.EncodeObject(current)];
        }, []);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            [ListToken.prim]: this.valueSchema.ExtractSchema(),
        };
    }
    generateSchema() {
        return {
            __michelsonType: ListToken.prim,
            schema: this.valueSchema.generateSchema(),
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (ListToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
ListToken.prim = 'list';

class MutezValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'MutezValidationError';
    }
}
class MutezToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        return new BigNumber(val[Object.keys(val)[0]]);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return MutezToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: MutezToken.prim,
            schema: MutezToken.prim,
        };
    }
    isValid(val) {
        const bigNumber = new BigNumber(val);
        if (bigNumber.isNaN()) {
            return new MutezValidationError(val, this, `Value is not a number: ${val}`);
        }
        else {
            return null;
        }
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { int: String(val).toString() };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[MutezToken.prim]) {
            return semantic[MutezToken.prim](val);
        }
        return { int: String(val).toString() };
    }
    ToBigMapKey(val) {
        return {
            key: { int: String(val) },
            type: { prim: MutezToken.prim },
        };
    }
    ToKey({ int }) {
        return int;
    }
    compare(mutez1, mutez2) {
        const o1 = Number(mutez1);
        const o2 = Number(mutez2);
        if (o1 === o2) {
            return 0;
        }
        return o1 < o2 ? -1 : 1;
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (MutezToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
MutezToken.prim = 'mutez';

class BytesValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'BytesValidationError';
    }
}
class BytesToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    ToBigMapKey(val) {
        return {
            key: { bytes: val },
            type: { prim: BytesToken.prim },
        };
    }
    isValid(val) {
        if (typeof val === 'string' && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
            return null;
        }
        else {
            return new BytesValidationError(val, this, `Invalid bytes: ${val}`);
        }
    }
    convertUint8ArrayToHexString(val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    }
    Encode(args) {
        let val = args.pop();
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { bytes: String(val).toString() };
    }
    EncodeObject(val, semantic) {
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[BytesToken.prim]) {
            return semantic[BytesToken.prim](val);
        }
        return { bytes: String(val).toString() };
    }
    Execute(val) {
        return val.bytes;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return BytesToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: BytesToken.prim,
            schema: BytesToken.prim,
        };
    }
    ToKey({ bytes, string }) {
        if (string) {
            return string;
        }
        return bytes;
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (BytesToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
BytesToken.prim = 'bytes';

class OptionToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    subToken() {
        return this.createToken(this.val.args[0], this.idx);
    }
    schema() {
        return this.createToken(this.val.args[0], 0);
    }
    annot() {
        return Array.isArray(this.val.annots)
            ? super.annot()
            : this.createToken(this.val.args[0], this.idx).annot();
    }
    Encode(args) {
        const value = args;
        if (value === undefined || value === null) {
            return { prim: 'None' };
        }
        else if (Array.isArray(value) &&
            (value[value.length - 1] === undefined || value[value.length - 1] === null)) {
            value.pop();
            return { prim: 'None' };
        }
        return { prim: 'Some', args: [this.schema().Encode(args)] };
    }
    EncodeObject(args, semantic) {
        const value = args;
        if (value === undefined || value === null) {
            return { prim: 'None' };
        }
        return { prim: 'Some', args: [this.schema().EncodeObject(value, semantic)] };
    }
    Execute(val, semantics) {
        if (val.prim === 'None') {
            return null;
        }
        return this.schema().Execute(val.args[0], semantics);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return this.schema().ExtractSchema();
    }
    generateSchema() {
        return {
            __michelsonType: OptionToken.prim,
            schema: this.schema().generateSchema(),
        };
    }
    ExtractSignature() {
        return [...this.schema().ExtractSignature(), []];
    }
    get KeySchema() {
        return this.schema();
    }
    compare(val1, val2) {
        if (!val1) {
            return -1;
        }
        else if (!val2) {
            return 1;
        }
        return this.KeySchema.compare(val1, val2);
    }
    ToKey(val) {
        return this.Execute(val);
    }
    ToBigMapKey(val) {
        return {
            key: this.EncodeObject(val),
            type: this.typeWithoutAnnotations(),
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (OptionToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.subToken().findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
OptionToken.prim = 'option';

class TimestampToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        if (val.string && /^\d+$/.test(val.string)) {
            return new Date(Number(val.string) * 1000).toISOString();
        }
        else if (val.string) {
            return new Date(val.string).toISOString();
        }
        else if (val.int) {
            return new Date(Number(val.int) * 1000).toISOString();
        }
    }
    Encode(args) {
        const val = args.pop();
        return { string: val };
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[TimestampToken.prim]) {
            return semantic[TimestampToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return TimestampToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: TimestampToken.prim,
            schema: TimestampToken.prim,
        };
    }
    ToKey({ string }) {
        return string;
    }
    ToBigMapKey(val) {
        return {
            key: { string: val },
            type: { prim: TimestampToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (TimestampToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
TimestampToken.prim = 'timestamp';

class IntValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'IntValidationError';
    }
}
class IntToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        return new BigNumber(val[Object.keys(val)[0]]);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return IntToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: IntToken.prim,
            schema: IntToken.prim,
        };
    }
    isValid(val) {
        const bigNumber = new BigNumber(val);
        if (bigNumber.isNaN()) {
            return new IntValidationError(val, this, `Value is not a number: ${val}`);
        }
        else {
            return null;
        }
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { int: new BigNumber(val).toFixed() };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[IntToken.prim]) {
            return semantic[IntToken.prim](val);
        }
        return { int: new BigNumber(val).toFixed() };
    }
    ToBigMapKey(val) {
        return {
            key: { int: String(val) },
            type: { prim: IntToken.prim },
        };
    }
    ToKey({ int }) {
        return int;
    }
    compare(int1, int2) {
        const o1 = Number(int1);
        const o2 = Number(int2);
        if (o1 === o2) {
            return 0;
        }
        return o1 < o2 ? -1 : 1;
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (IntToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
IntToken.prim = 'int';

class UnitToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Encode(args) {
        args.pop();
        return { prim: 'Unit' };
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[UnitToken.prim]) {
            return semantic[UnitToken.prim](val);
        }
        return { prim: 'Unit' };
    }
    Execute(_val) {
        return UnitValue;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return UnitToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: UnitToken.prim,
            schema: UnitToken.prim,
        };
    }
    compare(_val1, _val2) {
        return 0;
    }
    ToKey(_val) {
        return UnitValue;
    }
    ToBigMapKey(_val) {
        return {
            key: { prim: 'Unit' },
            type: { prim: UnitToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (UnitToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
UnitToken.prim = 'unit';

const publicKeyPrefixLength = 4;
class KeyValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'KeyValidationError';
    }
}
class KeyToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        return encodeKey(val.bytes);
    }
    isValid(value) {
        if (validatePublicKey(value) !== ValidationResult.VALID) {
            return new KeyValidationError(value, this, 'Key is not valid');
        }
        return null;
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[KeyToken.prim]) {
            return semantic[KeyToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return KeyToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: KeyToken.prim,
            schema: KeyToken.prim,
        };
    }
    ToKey(val) {
        return this.Execute(val);
    }
    ToBigMapKey(val) {
        return {
            key: { string: val },
            type: { prim: KeyToken.prim },
        };
    }
    compare(key1, key2) {
        const keyPrefix1 = this.getPrefix(key1);
        const keyPrefix2 = this.getPrefix(key2);
        if (keyPrefix1 === Prefix.EDPK && keyPrefix2 !== Prefix.EDPK) {
            return -1;
        }
        else if (keyPrefix1 === Prefix.SPPK && keyPrefix2 !== Prefix.SPPK) {
            return keyPrefix2 === Prefix.EDPK ? 1 : -1;
        }
        else if (keyPrefix1 === Prefix.P2PK) {
            if (keyPrefix2 !== Prefix.P2PK) {
                return 1;
            }
            const keyBytes1 = this.getP256PublicKeyComparableBytes(key1);
            const keyBytes2 = this.getP256PublicKeyComparableBytes(key2);
            return Buffer.compare(keyBytes1, keyBytes2);
        }
        return super.compare(key1, key2);
    }
    getPrefix(val) {
        return val.substring(0, publicKeyPrefixLength);
    }
    getP256PublicKeyComparableBytes(p2pk) {
        return b58cdecode(p2pk, prefix[Prefix.P2PK]).slice(1);
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (KeyToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
KeyToken.prim = 'key';

class KeyHashValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'KeyHashValidationError';
    }
}
class KeyHashToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        return encodeKeyHash(val.bytes);
    }
    isValid(value) {
        if (validateKeyHash(value) !== ValidationResult.VALID) {
            return new KeyHashValidationError(value, this, `KeyHash is not valid: ${value}`);
        }
        return null;
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[KeyHashToken.prim]) {
            return semantic[KeyHashToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return KeyHashToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: KeyHashToken.prim,
            schema: KeyHashToken.prim,
        };
    }
    ToKey({ string, bytes }) {
        if (string) {
            return string;
        }
        return encodeKeyHash(bytes);
    }
    ToBigMapKey(val) {
        return {
            key: { string: val },
            type: { prim: KeyHashToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (KeyHashToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
KeyHashToken.prim = 'key_hash';

class SignatureValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'SignatureValidationError';
    }
}
class SignatureToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        // TODO decode the signature
        return val.bytes;
    }
    isValid(value) {
        if (validateSignature(value) !== ValidationResult.VALID) {
            return new SignatureValidationError(value, this, 'Signature is not valid');
        }
        return null;
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[SignatureToken.prim]) {
            return semantic[SignatureToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return SignatureToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: SignatureToken.prim,
            schema: SignatureToken.prim,
        };
    }
    ToKey(val) {
        return this.Execute(val);
    }
    ToBigMapKey(val) {
        return {
            key: { string: val },
            type: { prim: SignatureToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (SignatureToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
SignatureToken.prim = 'signature';

class LambdaToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    get paramSchema() {
        return this.createToken(this.val.args[0], this.idx);
    }
    get returnSchema() {
        return this.createToken(this.val.args[1], this.idx + 1);
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        else {
            return val;
        }
    }
    Encode(args) {
        const val = args.pop();
        return val;
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[LambdaToken.prim]) {
            return semantic[LambdaToken.prim](val);
        }
        return val;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            [LambdaToken.prim]: {
                parameters: this.paramSchema.ExtractSchema(),
                returns: this.returnSchema.ExtractSchema(),
            },
        };
    }
    generateSchema() {
        return {
            __michelsonType: LambdaToken.prim,
            schema: {
                parameters: this.paramSchema.generateSchema(),
                returns: this.returnSchema.generateSchema(),
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (LambdaToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);
        this.createToken(this.val.args[1], this.idx).findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
LambdaToken.prim = 'lambda';

class OperationToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        return val.string;
    }
    Encode(...args) {
        const val = args.pop();
        return { string: val };
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[OperationToken.prim]) {
            return semantic[OperationToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return OperationToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: OperationToken.prim,
            schema: OperationToken.prim,
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (OperationToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
OperationToken.prim = 'operation';

class SetValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'SetValidationError';
    }
}
class SetToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    get KeySchema() {
        return this.createToken(this.val.args[0], 0);
    }
    isValid(value) {
        if (Array.isArray(value)) {
            return null;
        }
        return new SetValidationError(value, this, 'Value must be an array');
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return val
            .sort((a, b) => this.KeySchema.compare(a, b))
            .reduce((prev, current) => {
            return [...prev, this.KeySchema.EncodeObject(current)];
        }, []);
    }
    Execute(val, semantics) {
        return val.reduce((prev, current) => {
            return [...prev, this.KeySchema.Execute(current, semantics)];
        }, []);
    }
    EncodeObject(args, semantic) {
        const err = this.isValid(args);
        if (err) {
            throw err;
        }
        if (semantic && semantic[SetToken.prim]) {
            return semantic[SetToken.prim](args);
        }
        return args
            .sort((a, b) => this.KeySchema.compare(a, b))
            .reduce((prev, current) => {
            return [...prev, this.KeySchema.EncodeObject(current)];
        }, []);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return SetToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: SetToken.prim,
            schema: this.KeySchema.generateSchema(),
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (SetToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.KeySchema.findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
SetToken.prim = 'set';

class ChainIDValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'ChainIDValidationError';
    }
}
class ChainIDToken extends ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(value) {
        if (validateChain(value) !== ValidationResult.VALID) {
            return new ChainIDValidationError(value, this, 'ChainID is not valid');
        }
        return null;
    }
    Execute(val) {
        return val[Object.keys(val)[0]];
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return ChainIDToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: ChainIDToken.prim,
            schema: ChainIDToken.prim,
        };
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[ChainIDToken.prim]) {
            return semantic[ChainIDToken.prim](val);
        }
        return { string: val };
    }
    ToKey({ string }) {
        return string;
    }
    ToBigMapKey(val) {
        return {
            key: { string: val },
            type: { prim: ChainIDToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (ChainIDToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
ChainIDToken.prim = 'chain_id';

/**
 *  @category Error
 *  @description Error that indicates a failure when encoding and sending a ticket to the blockchain
 */
class EncodeTicketError extends Error {
    constructor() {
        super('Tickets cannot be sent to the blockchain; they are created on-chain');
        this.name = 'TicketEncodeError';
    }
}
const ticketerType = { prim: 'contract' };
const amountType = { prim: 'int' };
class TicketToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    get valueToken() {
        return this.createToken(this.val.args[0], this.idx);
    }
    Encode(_args) {
        throw new EncodeTicketError();
    }
    EncodeObject(args, semantic) {
        if (semantic && semantic[TicketToken.prim]) {
            return semantic[TicketToken.prim](args, this.val);
        }
        throw new EncodeTicketError();
    }
    Execute(val, semantics) {
        if (semantics && semantics[TicketToken.prim]) {
            return semantics[TicketToken.prim](val, this.val);
        }
        const ticketer = this.createToken(ticketerType, this.idx);
        const value = this.valueToken;
        const amount = this.createToken(amountType, this.idx);
        if (undefined === val.args[2] && undefined !== val.args[1].args) {
            return {
                ticketer: ticketer.Execute(val.args[0], semantics),
                value: value.Execute(val.args[1].args[0], semantics),
                amount: amount.Execute(val.args[1].args[1], semantics),
            };
        }
        return {
            ticketer: ticketer.Execute(val.args[0], semantics),
            value: value.Execute(val.args[1], semantics),
            amount: amount.Execute(val.args[2], semantics),
        };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            ticketer: ContractToken.prim,
            value: this.valueToken.ExtractSchema(),
            amount: IntToken.prim,
        };
    }
    generateSchema() {
        return {
            __michelsonType: TicketToken.prim,
            schema: {
                value: this.valueToken.generateSchema(),
                ticketer: {
                    __michelsonType: ContractToken.prim,
                    schema: ContractToken.prim,
                },
                amount: {
                    __michelsonType: IntToken.prim,
                    schema: IntToken.prim,
                },
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (TicketToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.valueToken.findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
TicketToken.prim = 'ticket';

class NeverTokenError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'NeverTokenError';
    }
}
class NeverToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Encode(args) {
        const val = args.pop();
        throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[NeverToken.prim]) {
            return semantic[NeverToken.prim](val);
        }
        throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');
    }
    Execute(val) {
        throw new NeverTokenError(val, this, 'There is no literal value for the type never.');
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return NeverToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: NeverToken.prim,
            schema: NeverToken.prim,
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (NeverToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
NeverToken.prim = 'never';

class SaplingStateValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'SaplingStateValidationError';
    }
}
class SaplingStateToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(val) {
        return typeof val === 'object' && Object.keys(val).length === 0;
    }
    Execute(val, semantic) {
        if (semantic && semantic[SaplingStateToken.prim]) {
            return semantic[SaplingStateToken.prim](val, this.val);
        }
        if ('int' in val) {
            return val.int;
        }
        else {
            throw new SaplingStateValidationError(val, this, `Sapling state is expecting an object with an int property. Got ${JSON.stringify(val)}`);
        }
    }
    Encode(args) {
        const val = args.pop();
        if (this.isValid(val)) {
            return [];
        }
        else {
            throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${val} while expecting: {}`);
        }
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[SaplingStateToken.prim]) {
            return semantic[SaplingStateToken.prim](val);
        }
        if (this.isValid(val)) {
            return [];
        }
        else {
            throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${val} while expecting: {}`);
        }
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            [SaplingStateToken.prim]: {
                'memo-size': Number(this.val.args[0]['int']),
            },
        };
    }
    generateSchema() {
        return {
            __michelsonType: SaplingStateToken.prim,
            schema: {
                memoSize: this.val.args[0]['int'],
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (SaplingStateToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
SaplingStateToken.prim = 'sapling_state';

class SaplingTransactionValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'SaplingTransactionValidationError';
    }
}
class SaplingTransactionToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(_val) {
        throw new SaplingTransactionValidationError(_val, this, 'There is no literal value for the sapling_transaction type.');
    }
    validateBytes(val) {
        const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);
        if (bytes && bytes[2].length % 2 === 0) {
            return bytes[2];
        }
        else {
            throw new SaplingTransactionValidationError(val, this, `Invalid bytes: ${val}`);
        }
    }
    convertUint8ArrayToHexString(val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    }
    Encode(args) {
        let val = args.pop();
        val = this.validateBytes(this.convertUint8ArrayToHexString(val));
        return { bytes: String(val).toString() };
    }
    EncodeObject(val, semantic) {
        val = this.validateBytes(this.convertUint8ArrayToHexString(val));
        if (semantic && semantic[SaplingTransactionToken.prim]) {
            return semantic[SaplingTransactionToken.prim](val);
        }
        return { bytes: String(val).toString() };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            [SaplingTransactionToken.prim]: {
                'memo-size': Number(this.val.args[0]['int']),
            },
        };
    }
    generateSchema() {
        return {
            __michelsonType: SaplingTransactionToken.prim,
            schema: {
                memoSize: this.val.args[0]['int'],
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (SaplingTransactionToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
SaplingTransactionToken.prim = 'sapling_transaction';

class Bls12381frValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'Bls12381frValidationError';
    }
}
class Bls12381frToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(val) {
        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
            return null;
        }
        else {
            return new Bls12381frValidationError(val, this, `Invalid bytes: ${val}`);
        }
    }
    convertUint8ArrayToHexString(val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    }
    Encode(args) {
        let val = args.pop();
        if (typeof val === 'number') {
            return { int: val.toString() };
        }
        else {
            val = this.convertUint8ArrayToHexString(val);
            const err = this.isValid(val);
            if (err) {
                throw err;
            }
            return { bytes: val };
        }
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[Bls12381frToken.prim]) {
            return semantic[Bls12381frToken.prim](val);
        }
        if (typeof val === 'number') {
            return { int: val.toString() };
        }
        else {
            val = this.convertUint8ArrayToHexString(val);
            const err = this.isValid(val);
            if (err) {
                throw err;
            }
            return { bytes: val };
        }
    }
    Execute(val) {
        return val.bytes;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return Bls12381frToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: Bls12381frToken.prim,
            schema: Bls12381frToken.prim,
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (Bls12381frToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
// An element of the BLS12-381 scalar field Fr
// see https://tezos.gitlab.io/michelson-reference/#type-bls12_381_fr
Bls12381frToken.prim = 'bls12_381_fr';

class Bls12381g1ValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'Bls12381g1ValidationError';
    }
}
class Bls12381g1Token extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(val) {
        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
            return null;
        }
        else {
            return new Bls12381g1ValidationError(val, this, `Invalid bytes: ${val}`);
        }
    }
    convertUint8ArrayToHexString(val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    }
    Encode(args) {
        let val = args.pop();
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { bytes: val };
    }
    EncodeObject(val, semantic) {
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[Bls12381g1Token.prim]) {
            return semantic[Bls12381g1Token.prim](val);
        }
        return { bytes: val };
    }
    Execute(val) {
        return val.bytes;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return Bls12381g1Token.prim;
    }
    generateSchema() {
        return {
            __michelsonType: Bls12381g1Token.prim,
            schema: Bls12381g1Token.prim,
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (Bls12381g1Token.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
// A point on the BLS12-381 curve G1
// See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g1
Bls12381g1Token.prim = 'bls12_381_g1';

class Bls12381g2ValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'Bls12381g2ValidationError';
    }
}
class Bls12381g2Token extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(val) {
        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
            return null;
        }
        else {
            return new Bls12381g2ValidationError(val, this, `Invalid bytes: ${val}`);
        }
    }
    convertUint8ArrayToHexString(val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    }
    Encode(args) {
        let val = args.pop();
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { bytes: val };
    }
    EncodeObject(val, semantic) {
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[Bls12381g2Token.prim]) {
            return semantic[Bls12381g2Token.prim](val);
        }
        return { bytes: val };
    }
    Execute(val) {
        return val.bytes;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return Bls12381g2Token.prim;
    }
    generateSchema() {
        return {
            __michelsonType: Bls12381g2Token.prim,
            schema: Bls12381g2Token.prim,
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (Bls12381g2Token.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
// A point on the BLS12-381 curve G2
// See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g2
Bls12381g2Token.prim = 'bls12_381_g2';

class ChestValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'ChestValidationError';
    }
}
class ChestToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(val) {
        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
            return null;
        }
        else {
            return new ChestValidationError(val, this, `Invalid bytes: ${val}`);
        }
    }
    convertUint8ArrayToHexString(val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    }
    Encode(args) {
        let val = args.pop();
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { bytes: val };
    }
    EncodeObject(val, semantic) {
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[ChestToken.prim]) {
            return semantic[ChestToken.prim](val);
        }
        return { bytes: val };
    }
    Execute(val) {
        return val.bytes;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return ChestToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: ChestToken.prim,
            schema: ChestToken.prim,
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (ChestToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
ChestToken.prim = 'chest';

class ChestKeyValidationError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'ChestKeyValidationError';
    }
}
class ChestKeyToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(val) {
        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
            return null;
        }
        else {
            return new ChestKeyValidationError(val, this, `Invalid bytes: ${val}`);
        }
    }
    convertUint8ArrayToHexString(val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    }
    Encode(args) {
        let val = args.pop();
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { bytes: val };
    }
    EncodeObject(val, semantic) {
        val = this.convertUint8ArrayToHexString(val);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[ChestKeyToken.prim]) {
            return semantic[ChestKeyToken.prim](val);
        }
        return { bytes: val };
    }
    Execute(val) {
        return val.bytes;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return ChestKeyToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: ChestKeyToken.prim,
            schema: ChestKeyToken.prim,
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (ChestKeyToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
ChestKeyToken.prim = 'chest_key';

class GlobalConstantEncodingError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'GlobalConstantEncodingError';
    }
}
class GlobalConstantDecodingError extends TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'GlobalConstantDecodingError';
    }
}
class GlobalConstantToken extends Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val, semantic) {
        if (semantic && semantic[GlobalConstantToken.prim]) {
            return semantic[GlobalConstantToken.prim](val, this.val);
        }
        else {
            throw new GlobalConstantDecodingError(val, this, `Unable to decode a value represented by a global constants. Please provide an expanded script to the Michelson-Encoder or semantics for the decoding. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);
        }
    }
    Encode(args) {
        throw new GlobalConstantEncodingError(args, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[GlobalConstantToken.prim]) {
            return semantic[GlobalConstantToken.prim](val);
        }
        throw new GlobalConstantEncodingError(val, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return GlobalConstantToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: GlobalConstantToken.prim,
            schema: {
                hash: this.val.args[0]['string'],
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (GlobalConstantToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
GlobalConstantToken.prim = 'constant';

const tokens = [
    PairToken,
    NatToken,
    StringToken,
    BigMapToken,
    AddressToken,
    TxRollupL2AddressToken,
    MapToken,
    BoolToken,
    OrToken,
    ContractToken,
    ListToken,
    MutezToken,
    BytesToken,
    OptionToken,
    TimestampToken,
    IntToken,
    UnitToken,
    KeyToken,
    KeyHashToken,
    SignatureToken,
    LambdaToken,
    OperationToken,
    SetToken,
    ChainIDToken,
    TicketToken,
    NeverToken,
    SaplingStateToken,
    SaplingTransactionToken,
    Bls12381frToken,
    Bls12381g1Token,
    Bls12381g2Token,
    ChestToken,
    ChestKeyToken,
    GlobalConstantToken
];

/**
 *  @category Error
 *  @description Error that indicates a script having an invalid type or it being unsupported by the Michelson Encoder. Note some protocol changes might affect this, we encourage users to open an issue so we can look into implementing support for said types.
 */
class InvalidTokenError extends Error {
    constructor(message, data) {
        super(message);
        this.message = message;
        this.data = data;
        this.name = 'Invalid token error';
    }
}
function createToken(val, idx) {
    if (Array.isArray(val)) {
        return new PairToken(val, idx, createToken);
    }
    const t = tokens.find((x) => x.prim === val.prim);
    if (!t) {
        throw new InvalidTokenError('Malformed data expected a value with a valid prim property', val);
    }
    return new t(val, idx, createToken);
}

/**
 *  @category Error
 *  @description Error that indicates a failure when encoding (transforming JS parameter into JSON Michelson)the parameter of the view
 */
class ViewEncodingError extends Error {
    constructor(smartContractViewName, originalError) {
        super(`Unable to encode the parameter of the view: ${smartContractViewName}.`);
        this.smartContractViewName = smartContractViewName;
        this.originalError = originalError;
        this.name = 'ViewEncodingError';
    }
}
/**
 *  @category Error
 *  @description Error that indicates an invalid on-chain view found on the script
 */
class InvalidScriptError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidScriptError';
    }
}
/**
 *  @category Error
 *  @description Error that indicates an invalid RPC response being passed or used
 */
class InvalidRpcResponseError extends Error {
    constructor(script) {
        super(`Invalid RPC response passed as argument(s)`);
        this.script = script;
        this.name = 'InvalidRpcResponseError';
    }
}
/**
 *  @category Error
 *  @description Error that indicates a failure that occurred during encoding
 */
class ParameterEncodingError extends Error {
    constructor(message, args, originalError) {
        super(`
      ${message}. Error encountered when trying to encode arguments: \n
      [${args}]
    `);
        this.message = message;
        this.args = args;
        this.originalError = originalError;
        this.name = 'ParameterEncodingError';
    }
}
/**
 *  @category Error
 *  @description Error that indicates an invalid big map schema being passed or used
 */
class InvalidBigMapSchema extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidBigMapSchema';
    }
}
/**
 *  @category Error
 *  @description Error that indicates an invalid big map diff being passed or used
 */
class InvalidBigMapDiff extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidBigMapDiff';
    }
}
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode big maps
 */
class BigMapEncodingError extends Error {
    constructor(obj, details) {
        super(`Unable to encode ${obj}. ${details}`);
        this.obj = obj;
        this.details = details;
        this.name = 'BigMapEncodingError';
    }
}
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode storage
 */
class StorageEncodingError extends Error {
    constructor(obj, details) {
        super(`Unable to encode ${obj}. ${details}`);
        this.obj = obj;
        this.details = details;
        this.name = 'StorageEncodingError';
    }
}
/**
 *  @category Error
 *  @description General error that indicates a function not being passed a necessary argument
 */
class MissingArgumentError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'MissingArgumentError';
    }
}

var _a;
const schemaTypeSymbol = Symbol.for('taquito-schema-type-symbol');
// collapse comb pair
function collapse(val, prim = PairToken.prim) {
    var _b, _c;
    if (Array.isArray(val)) {
        return collapse({
            prim: prim,
            args: val,
        }, prim);
    }
    const extended = val;
    if (extended.prim === prim && extended.args && extended.args.length > 2) {
        return Object.assign(Object.assign({}, extended), { args: [
                (_b = extended.args) === null || _b === void 0 ? void 0 : _b[0],
                {
                    prim: prim,
                    args: (_c = extended.args) === null || _c === void 0 ? void 0 : _c.slice(1),
                },
            ] });
    }
    return extended;
}
function deepEqual(a, b) {
    const ac = collapse(a);
    const bc = collapse(b);
    return (ac.prim === bc.prim &&
        ((ac.args === undefined && bc.args === undefined) ||
            (ac.args !== undefined &&
                bc.args !== undefined &&
                ac.args.length === bc.args.length &&
                ac.args.every((v, i) => { var _b, _c; return deepEqual(v, (_c = (_b = bc.args) === null || _b === void 0 ? void 0 : _b[i]) !== null && _c !== void 0 ? _c : {}); }))) &&
        ((ac.annots === undefined && bc.annots === undefined) ||
            (ac.annots !== undefined &&
                bc.annots !== undefined &&
                ac.annots.length === bc.annots.length &&
                ac.annots.every((v, i) => { var _b; return v === ((_b = bc.annots) === null || _b === void 0 ? void 0 : _b[i]); }))));
}
/**
 * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.
 */
class Schema {
    constructor(val) {
        this.val = val;
        this[_a] = true;
        this.root = createToken(val, 0);
        if (this.root instanceof BigMapToken) {
            this.bigMap = this.root;
        }
        else if (this.isExpressionExtended(val) && val.prim === 'pair') {
            const exp = val.args[0];
            if (this.isExpressionExtended(exp) && exp.prim === 'big_map') {
                this.bigMap = new BigMapToken(exp, 0, createToken);
            }
        }
    }
    static isSchema(obj) {
        return obj && obj[schemaTypeSymbol] === true;
    }
    static fromRPCResponse(val) {
        const storage = val &&
            val.script &&
            Array.isArray(val.script.code) &&
            val.script.code.find((x) => {
                if (!Array.isArray(x)) {
                    const checkExtended = x;
                    if (checkExtended.prim) {
                        return checkExtended.prim === 'storage';
                    }
                    else {
                        return false;
                    }
                }
                else {
                    // storage passed along as original storage value
                    this.fromRPCResponse({ script: { code: x, storage: val.script.storage } });
                }
            });
        if (!storage || !Array.isArray(storage.args)) {
            throw new InvalidRpcResponseError(val.script);
        }
        return new Schema(storage.args[0]);
    }
    isExpressionExtended(val) {
        return 'prim' in val && Array.isArray(val.args);
    }
    removeTopLevelAnnotation(obj) {
        // PairToken and OrToken can have redundant top level annotation in their storage
        if (this.root instanceof PairToken || this.root instanceof OrToken) {
            if (this.root.hasAnnotations() && typeof obj === 'object' && Object.keys(obj).length === 1) {
                return obj[Object.keys(obj)[0]];
            }
        }
        return obj;
    }
    Execute(val, semantics) {
        const storage = this.root.Execute(val, semantics);
        return this.removeTopLevelAnnotation(storage);
    }
    Typecheck(val) {
        if (this.root instanceof BigMapToken && Number.isInteger(Number(val))) {
            return true;
        }
        try {
            this.root.EncodeObject(val);
            return true;
        }
        catch (ex) {
            return false;
        }
    }
    ExecuteOnBigMapDiff(diff, semantics) {
        if (!this.bigMap) {
            throw new InvalidBigMapSchema('Big map schema is undefined');
        }
        if (!Array.isArray(diff)) {
            throw new InvalidBigMapDiff('Big map diff must be an array');
        }
        const eltFormat = diff.map(({ key, value }) => ({ args: [key, value] }));
        return this.bigMap.Execute(eltFormat, semantics);
    }
    ExecuteOnBigMapValue(key, semantics) {
        if (!this.bigMap) {
            throw new InvalidBigMapSchema('No big map schema');
        }
        return this.bigMap.ValueSchema.Execute(key, semantics);
    }
    EncodeBigMapKey(key) {
        if (!this.bigMap) {
            throw new InvalidBigMapSchema('Big map schema is undefined');
        }
        try {
            return this.bigMap.KeySchema.ToBigMapKey(key);
        }
        catch (ex) {
            throw new BigMapEncodingError('big map key', ex);
        }
    }
    Encode(value, semantics) {
        try {
            return this.root.EncodeObject(value, semantics);
        }
        catch (ex) {
            if (ex instanceof TokenValidationError) {
                throw ex;
            }
            throw new StorageEncodingError('storage object', ex);
        }
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return this.removeTopLevelAnnotation(this.root.ExtractSchema());
    }
    /**
     * @description Produce a representation of the storage schema.
     * Note: Provide guidance on how to write the storage object for the origination operation with Taquito.
     */
    generateSchema() {
        return this.removeTopLevelAnnotation(this.root.generateSchema());
    }
    /**
     * @deprecated
     */
    ComputeState(tx, state) {
        if (!this.bigMap) {
            throw new InvalidBigMapSchema('Big map schema is undefined');
        }
        const bigMap = tx.reduce((prev, current) => {
            return Object.assign(Object.assign({}, prev), this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff));
        }, {});
        return Object.assign(Object.assign({}, this.Execute(state)), { [this.bigMap.annot()]: bigMap });
    }
    /**
     * @description Look up in top-level pairs of the storage to find a value matching the specified type
     *
     * @returns The first value found that match the type or `undefined` if no value is found
     *
     * @param storage storage to parse to find the value
     * @param valueType type of value to look for
     *
     */
    FindFirstInTopLevelPair(storage, valueType) {
        return this.findValue(this.root['val'], storage, valueType);
    }
    // TODO check these type casts
    findValue(schema, storage, valueToFind) {
        if (deepEqual(valueToFind, schema)) {
            return storage;
        }
        if (Array.isArray(schema) || schema.prim === 'pair') {
            const sch = collapse(schema);
            const strg = collapse(storage, 'Pair');
            if (sch.args === undefined || strg.args === undefined) {
                throw new MissingArgumentError('Tokens have no arguments'); // unlikely
            }
            if (sch.args[0])
                return (
                // unsafe
                this.findValue(sch.args[0], strg.args[0], valueToFind) ||
                    this.findValue(sch.args[1], strg.args[1], valueToFind));
        }
    }
    /**
     * @description Look up the schema to find any occurrence of a particular token.
     *
     * @returns an array of tokens of the specified kind or an empty array if no token was found
     *
     * @param tokenToFind string representing the prim property of the token to find
     *
     * @example
     * ```
     * Useful to find all global constants in a script, an array of GlobalConstantToken is returned:
     *
     * const schema = new Schema(script);
     * const allGlobalConstantTokens = schema.findToken('constant');
     * ```
     *
     */
    findToken(tokenToFind) {
        const tokens = [];
        return this.root.findAndReturnTokens(tokenToFind, tokens);
    }
}
_a = schemaTypeSymbol;

/**
 * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.
 */
class ParameterSchema {
    constructor(val) {
        this.root = createToken(val, 0);
    }
    static fromRPCResponse(val) {
        const parameter = val &&
            val.script &&
            Array.isArray(val.script.code) &&
            val.script.code.find((x) => x.prim === 'parameter');
        if (!parameter || !Array.isArray(parameter.args)) {
            throw new InvalidRpcResponseError(val.script);
        }
        return new ParameterSchema(parameter.args[0]);
    }
    get isMultipleEntryPoint() {
        return (this.root instanceof OrToken ||
            (this.root instanceof OptionToken && this.root.subToken() instanceof OrToken));
    }
    get hasAnnotation() {
        if (this.isMultipleEntryPoint) {
            return Object.keys(this.ExtractSchema())[0] !== '0';
        }
        else {
            return true;
        }
    }
    Execute(val, semantics) {
        return this.root.Execute(val, semantics);
    }
    Encode(...args) {
        try {
            return this.root.Encode(args.reverse());
        }
        catch (ex) {
            if (ex instanceof TokenValidationError) {
                throw ex;
            }
            throw new ParameterEncodingError('Unable to encode parameter', args.toString(), ex);
        }
    }
    EncodeObject(value, semantics) {
        try {
            return this.root.EncodeObject(value, semantics);
        }
        catch (ex) {
            if (ex instanceof TokenValidationError) {
                throw ex;
            }
            throw new ParameterEncodingError('Unable to encode parameter object', value, ex);
        }
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return this.root.ExtractSchema();
    }
    /**
     * @description Produce a schema grouping together all the entry points of a contract.
     */
    generateSchema() {
        return this.root.generateSchema();
    }
    ExtractSignatures() {
        return this.root.ExtractSignature();
    }
}

class ViewSchema {
    constructor(val) {
        if (val.length !== 4 || !('string' in val[0])) {
            throw new InvalidScriptError(`Invalid on-chain view: ${JSON.stringify(val)}`);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.viewName = val[0]['string'];
        this.viewArgsType = val[1];
        this.viewReturnType = val[2];
        this.instructions = val[3];
        this.rootArgsType = createToken(this.viewArgsType, 0);
        this.rootReturnType = createToken(this.viewReturnType, 0);
    }
    /**
     *
     * @description Create an instance of ViewSchema for each view in a script
     *
     * @param val contract script obtained from the RPC
     * @returns array of ViewSchema or empty array if there is no view in the contract
     */
    static fromRPCResponse(val) {
        const allViewSchema = [];
        const views = val &&
            val.script &&
            Array.isArray(val.script.code) &&
            val.script.code.filter((x) => x.prim === 'view');
        if (views) {
            views.forEach((view) => {
                if (!view.args || view.args.length !== 4) {
                    throw new InvalidScriptError(`Invalid on-chain view found in the script: ${JSON.stringify(view)}`);
                }
                allViewSchema.push(new ViewSchema(view.args));
            });
        }
        return allViewSchema;
    }
    /**
     *
     * @description Transform the view parameter into Michelson
     *
     * @param args parameter of the view in js format
     * @returns parameter of the view in Michelson
     */
    encodeViewArgs(args) {
        try {
            return this.rootArgsType.EncodeObject(args);
        }
        catch (ex) {
            throw new ViewEncodingError(this.viewName, ex);
        }
    }
    /**
     *
     * @description Transform the view result from Michelson to readable data
     *
     * @param val result of the view in JSON Michelson
     * @param semantics optional semantics to override the default decoding behavior
     * @returns result of the view in a readable format
     */
    decodeViewResult(val, semantics) {
        return this.rootReturnType.Execute(val, semantics);
    }
    /**
     *
     * @description Return the signature of the view parameter
     */
    extractArgsSchema() {
        return this.rootArgsType.ExtractSchema();
    }
    /**
     *
     * @description Return the format of the view result
     */
    extractResultSchema() {
        return this.rootReturnType.ExtractSchema();
    }
}

// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!
const VERSION = {
    "commitHash": "6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff",
    "version": "13.0.1"
};

/**
 * @packageDocumentation
 * @module @taquito/michelson-encoder
 */
const UnitValue = Symbol();
const SaplingStateValue = {};

export { AddressValidationError, BigMapEncodingError, BigMapValidationError, BytesValidationError, ChainIDValidationError, ContractValidationError, EncodeTicketError, IntValidationError, InvalidBigMapDiff, InvalidBigMapSchema, InvalidMapTypeError, InvalidRpcResponseError, InvalidScriptError, KeyHashValidationError, KeyValidationError, ListValidationError, MapTypecheckError, MapValidationError, MichelsonMap, MissingArgumentError, MutezValidationError, NatValidationError, OrTokenDecodingError, ParameterEncodingError, ParameterSchema, SaplingStateValue, Schema, SetValidationError, SignatureValidationError, StorageEncodingError, Token, TokenArgumentValidationError, TokenComparisonError, UnitValue, VERSION, ViewEncodingError, ViewSchema };
//# sourceMappingURL=taquito-michelson-encoder.es6.js.map
