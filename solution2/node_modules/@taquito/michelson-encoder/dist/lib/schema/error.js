"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MissingArgumentError = exports.StorageEncodingError = exports.BigMapEncodingError = exports.InvalidBigMapDiff = exports.InvalidBigMapSchema = exports.ParameterEncodingError = exports.InvalidRpcResponseError = exports.InvalidScriptError = exports.ViewEncodingError = void 0;
/**
 *  @category Error
 *  @description Error that indicates a failure when encoding (transforming JS parameter into JSON Michelson)the parameter of the view
 */
class ViewEncodingError extends Error {
    constructor(smartContractViewName, originalError) {
        super(`Unable to encode the parameter of the view: ${smartContractViewName}.`);
        this.smartContractViewName = smartContractViewName;
        this.originalError = originalError;
        this.name = 'ViewEncodingError';
    }
}
exports.ViewEncodingError = ViewEncodingError;
/**
 *  @category Error
 *  @description Error that indicates an invalid on-chain view found on the script
 */
class InvalidScriptError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidScriptError';
    }
}
exports.InvalidScriptError = InvalidScriptError;
/**
 *  @category Error
 *  @description Error that indicates an invalid RPC response being passed or used
 */
class InvalidRpcResponseError extends Error {
    constructor(script) {
        super(`Invalid RPC response passed as argument(s)`);
        this.script = script;
        this.name = 'InvalidRpcResponseError';
    }
}
exports.InvalidRpcResponseError = InvalidRpcResponseError;
/**
 *  @category Error
 *  @description Error that indicates a failure that occurred during encoding
 */
class ParameterEncodingError extends Error {
    constructor(message, args, originalError) {
        super(`
      ${message}. Error encountered when trying to encode arguments: \n
      [${args}]
    `);
        this.message = message;
        this.args = args;
        this.originalError = originalError;
        this.name = 'ParameterEncodingError';
    }
}
exports.ParameterEncodingError = ParameterEncodingError;
/**
 *  @category Error
 *  @description Error that indicates an invalid big map schema being passed or used
 */
class InvalidBigMapSchema extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidBigMapSchema';
    }
}
exports.InvalidBigMapSchema = InvalidBigMapSchema;
/**
 *  @category Error
 *  @description Error that indicates an invalid big map diff being passed or used
 */
class InvalidBigMapDiff extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidBigMapDiff';
    }
}
exports.InvalidBigMapDiff = InvalidBigMapDiff;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode big maps
 */
class BigMapEncodingError extends Error {
    constructor(obj, details) {
        super(`Unable to encode ${obj}. ${details}`);
        this.obj = obj;
        this.details = details;
        this.name = 'BigMapEncodingError';
    }
}
exports.BigMapEncodingError = BigMapEncodingError;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode storage
 */
class StorageEncodingError extends Error {
    constructor(obj, details) {
        super(`Unable to encode ${obj}. ${details}`);
        this.obj = obj;
        this.details = details;
        this.name = 'StorageEncodingError';
    }
}
exports.StorageEncodingError = StorageEncodingError;
/**
 *  @category Error
 *  @description General error that indicates a function not being passed a necessary argument
 */
class MissingArgumentError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'MissingArgumentError';
    }
}
exports.MissingArgumentError = MissingArgumentError;
//# sourceMappingURL=error.js.map