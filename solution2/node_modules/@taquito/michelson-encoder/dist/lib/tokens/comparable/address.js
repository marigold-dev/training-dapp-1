"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressToken = exports.AddressValidationError = void 0;
const token_1 = require("../token");
const utils_1 = require("@taquito/utils");
class AddressValidationError extends token_1.TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'AddressValidationError';
    }
}
exports.AddressValidationError = AddressValidationError;
class AddressToken extends token_1.ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    ToBigMapKey(val) {
        const decoded = utils_1.b58decode(val);
        return {
            key: { bytes: decoded },
            type: { prim: 'bytes' },
        };
    }
    isValid(value) {
        if (utils_1.validateAddress(value) !== utils_1.ValidationResult.VALID) {
            return new AddressValidationError(value, this, `Address is not valid: ${value}`);
        }
        return null;
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[AddressToken.prim]) {
            return semantic[AddressToken.prim](val);
        }
        return { string: val };
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        if (!val.bytes) {
            throw new AddressValidationError(val, this, `cannot be missing both string and bytes: ${val}`);
        }
        return utils_1.encodePubKey(val.bytes);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return AddressToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: AddressToken.prim,
            schema: AddressToken.prim,
        };
    }
    ToKey({ bytes, string }) {
        if (string) {
            return string;
        }
        if (!bytes) {
            throw new AddressValidationError({ bytes, string }, this, `cannot be missing both string and bytes ${{ string, bytes }}`);
        }
        return utils_1.encodePubKey(bytes);
    }
    compare(address1, address2) {
        const isImplicit = (address) => {
            return address.startsWith('tz');
        };
        const implicit1 = isImplicit(address1);
        const implicit2 = isImplicit(address2);
        if (implicit1 && !implicit2) {
            return -1;
        }
        else if (implicit2 && !implicit1) {
            return 1;
        }
        return super.compare(address1, address2);
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (AddressToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
exports.AddressToken = AddressToken;
AddressToken.prim = 'address';
//# sourceMappingURL=address.js.map