"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringToken = void 0;
const token_1 = require("../token");
class StringToken extends token_1.ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Execute(val) {
        return val[Object.keys(val)[0]];
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return StringToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: StringToken.prim,
            schema: StringToken.prim,
        };
    }
    Encode(args) {
        const val = args.pop();
        return { string: val };
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[StringToken.prim]) {
            return semantic[StringToken.prim](val);
        }
        return { string: val };
    }
    ToKey({ string }) {
        return string;
    }
    ToBigMapKey(val) {
        return {
            key: { string: val },
            type: { prim: StringToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (StringToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
exports.StringToken = StringToken;
StringToken.prim = 'string';
//# sourceMappingURL=string.js.map