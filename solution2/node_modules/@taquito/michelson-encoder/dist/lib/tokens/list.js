"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListToken = exports.ListValidationError = void 0;
const token_1 = require("./token");
class ListValidationError extends token_1.TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'ListValidationError';
    }
}
exports.ListValidationError = ListValidationError;
class ListToken extends token_1.Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    get valueSchema() {
        return this.createToken(this.val.args[0], this.idx);
    }
    isValid(value) {
        if (Array.isArray(value)) {
            return null;
        }
        return new ListValidationError(value, this, 'Value must be an array');
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        const schema = this.createToken(this.val.args[0], 0);
        return val.reduce((prev, current) => {
            return [...prev, schema.EncodeObject(current)];
        }, []);
    }
    Execute(val, semantics) {
        const schema = this.createToken(this.val.args[0], 0);
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return val.reduce((prev, current) => {
            return [...prev, schema.Execute(current, semantics)];
        }, []);
    }
    EncodeObject(args, semantic) {
        const schema = this.createToken(this.val.args[0], 0);
        const err = this.isValid(args);
        if (err) {
            throw err;
        }
        if (semantic && semantic[ListToken.prim]) {
            return semantic[ListToken.prim](args);
        }
        return args.reduce((prev, current) => {
            return [...prev, schema.EncodeObject(current)];
        }, []);
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return {
            [ListToken.prim]: this.valueSchema.ExtractSchema(),
        };
    }
    generateSchema() {
        return {
            __michelsonType: ListToken.prim,
            schema: this.valueSchema.generateSchema(),
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (ListToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    }
}
exports.ListToken = ListToken;
ListToken.prim = 'list';
//# sourceMappingURL=list.js.map