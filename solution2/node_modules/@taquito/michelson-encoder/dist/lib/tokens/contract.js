"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractToken = exports.ContractValidationError = void 0;
const utils_1 = require("@taquito/utils");
const token_1 = require("./token");
class ContractValidationError extends token_1.TokenValidationError {
    constructor(value, token, message) {
        super(value, token, message);
        this.value = value;
        this.token = token;
        this.name = 'ContractValidationError';
    }
}
exports.ContractValidationError = ContractValidationError;
class ContractToken extends token_1.Token {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    isValid(value) {
        // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)
        if (utils_1.validateAddress(value) !== utils_1.ValidationResult.VALID) {
            return new ContractValidationError(value, this, 'Contract address is not valid');
        }
        return null;
    }
    Execute(val) {
        if (val.string) {
            return val.string;
        }
        if (!val.bytes) {
            throw new ContractValidationError(val, this, 'must contain bytes or string');
        }
        return utils_1.encodePubKey(val.bytes);
    }
    Encode(args) {
        const val = args.pop();
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { string: val };
    }
    EncodeObject(val, semantic) {
        const err = this.isValid(val);
        if (err) {
            throw err;
        }
        if (semantic && semantic[ContractToken.prim]) {
            return semantic[ContractToken.prim](val);
        }
        return { string: val };
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return ContractToken.prim;
    }
    generateSchema() {
        const valueSchema = this.createToken(this.val.args[0], 0);
        return {
            __michelsonType: ContractToken.prim,
            schema: {
                parameter: this.val.args[0] ? valueSchema.generateSchema() : {},
            },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (ContractToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
exports.ContractToken = ContractToken;
ContractToken.prim = 'contract';
//# sourceMappingURL=contract.js.map