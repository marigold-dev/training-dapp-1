"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnitToken = void 0;
const token_1 = require("./token");
const taquito_michelson_encoder_1 = require("../taquito-michelson-encoder");
class UnitToken extends token_1.ComparableToken {
    constructor(val, idx, fac) {
        super(val, idx, fac);
        this.val = val;
        this.idx = idx;
        this.fac = fac;
    }
    Encode(args) {
        args.pop();
        return { prim: 'Unit' };
    }
    EncodeObject(val, semantic) {
        if (semantic && semantic[UnitToken.prim]) {
            return semantic[UnitToken.prim](val);
        }
        return { prim: 'Unit' };
    }
    Execute(_val) {
        return taquito_michelson_encoder_1.UnitValue;
    }
    /**
     * @deprecated ExtractSchema has been deprecated in favor of generateSchema
     *
     */
    ExtractSchema() {
        return UnitToken.prim;
    }
    generateSchema() {
        return {
            __michelsonType: UnitToken.prim,
            schema: UnitToken.prim,
        };
    }
    compare(_val1, _val2) {
        return 0;
    }
    ToKey(_val) {
        return taquito_michelson_encoder_1.UnitValue;
    }
    ToBigMapKey(_val) {
        return {
            key: { prim: 'Unit' },
            type: { prim: UnitToken.prim },
        };
    }
    findAndReturnTokens(tokenToFind, tokens) {
        if (UnitToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    }
}
exports.UnitToken = UnitToken;
UnitToken.prim = 'unit';
//# sourceMappingURL=unit.js.map