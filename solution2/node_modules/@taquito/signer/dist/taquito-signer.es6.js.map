{"version":3,"file":"taquito-signer.es6.js","sources":["../src/ed-key.ts","../src/ec-key.ts","../src/mnemonicToSeedSync.ts","../src/import-key.ts","../src/version.ts","../src/taquito-signer.ts"],"sourcesContent":["import { hash } from '@stablelib/blake2b';\nimport { generateKeyPairFromSeed, sign } from '@stablelib/ed25519';\nimport {\n  b58cencode,\n  b58cdecode,\n  prefix,\n  buf2hex,\n  isValidPrefix,\n  InvalidKeyError,\n} from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\n\n/**\n * @description Provide signing logic for ed25519 curve based key (tz1)\n */\nexport class Tz1 {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n  private isInit: Promise<boolean>;\n\n  /**\n   *\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(private key: string, encrypted: boolean, decrypt: (k: any) => any) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new InvalidKeyError(key, 'Key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    this._publicKey = this._key.slice(32);\n\n    if (!this._key) {\n      throw new InvalidKeyError(key, 'Unable to decode');\n    }\n\n    this.isInit = this.init();\n  }\n\n  private async init() {\n    if (this._key.length !== 64) {\n      const { publicKey, secretKey } = generateKeyPairFromSeed(new Uint8Array(this._key));\n      this._publicKey = publicKey;\n      this._key = secretKey;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    await this.isInit;\n    const signature = sign(new Uint8Array(this._key), new Uint8Array(bytesHash));\n    const signatureBuffer = toBuffer(signature);\n    const sbytes = bytes + buf2hex(signatureBuffer);\n\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, prefix.edsig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    await this.isInit;\n    return b58cencode(this._publicKey, prefix['edpk']);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    await this.isInit;\n    return b58cencode(hash(new Uint8Array(this._publicKey), 20), prefix.tz1);\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    await this.isInit;\n    let key = this._key;\n    const { secretKey } = generateKeyPairFromSeed(new Uint8Array(key).slice(0, 32));\n    key = toBuffer(secretKey);\n\n    return b58cencode(key, prefix[`edsk`]);\n  }\n}\n","import { hash } from '@stablelib/blake2b';\nimport { b58cencode, b58cdecode, prefix, isValidPrefix, InvalidKeyError } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport elliptic from 'elliptic';\n\nconst pref = {\n  p256: {\n    pk: prefix['p2pk'],\n    sk: prefix['p2sk'],\n    pkh: prefix.tz3,\n    sig: prefix.p2sig,\n  },\n  secp256k1: {\n    pk: prefix['sppk'],\n    sk: prefix['spsk'],\n    pkh: prefix.tz2,\n    sig: prefix.spsig,\n  },\n};\n\n/**\n * @description Provide signing logic for elliptic curve based key (tz2, tz3)\n */\nexport class ECKey {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n\n  /**\n   *\n   * @param curve Curve to use with the key\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(\n    private curve: 'p256' | 'secp256k1',\n    private key: string,\n    encrypted: boolean,\n    decrypt: (k: any) => any\n  ) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new InvalidKeyError(key, 'Key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    const keyPair = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const keyPairY = keyPair.getPublic().getY().toArray();\n    const parityByte = keyPairY.length < 32 ? keyPairY[keyPairY.length - 1] : keyPairY[31];\n    const pref = parityByte % 2 ? 3 : 2;\n    const pad = new Array(32).fill(0);\n    this._publicKey = toBuffer(\n      new Uint8Array([pref].concat(pad.concat(keyPair.getPublic().getX().toArray()).slice(-32)))\n    );\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    const key = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const sig = key.sign(bytesHash, { canonical: true });\n    const signature = sig.r.toString('hex', 64) + sig.s.toString('hex', 64);\n\n    const sbytes = bytes + signature;\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, pref[this.curve].sig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return b58cencode(this._publicKey, pref[this.curve].pk);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    return b58cencode(hash(new Uint8Array(this._publicKey), 20), pref[this.curve].pkh);\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    const key = this._key;\n\n    return b58cencode(key, pref[this.curve].sk);\n  }\n}\n\n/**\n * @description Tz3 key class using the p256 curve\n */\nexport const Tz3 = ECKey.bind(null, 'p256');\n\n/**\n * @description Tz3 key class using the secp256k1 curve\n */\nexport const Tz2 = ECKey.bind(null, 'secp256k1');\n","/* Copyright (c) 2014, Wei Lu <luwei.here@gmail.com> and Daniel Cousens <email@dcousens.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies. */\n\nimport pbkdf2 from 'pbkdf2';\n\nexport function mnemonicToSeedSync(mnemonic: string, password: string) {\n  const mnemonicBuffer = Buffer.from(normalize(mnemonic), 'utf8');\n  const saltBuffer = Buffer.from(salt(normalize(password)), 'utf8');\n  return pbkdf2.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\n\nfunction normalize(str: string) {\n  return (str || '').normalize('NFKD');\n}\nfunction salt(password: string) {\n  return 'mnemonic' + (password || '');\n}\n","import { InMemorySigner } from './taquito-signer';\nimport { TezosToolkit } from '@taquito/taquito';\n\n/**\n *\n * @description Import a key to sign operation with the side-effect of setting the Tezos instance to use the InMemorySigner provider\n *\n * @param toolkit The toolkit instance to attach a signer\n * @param privateKeyOrEmail Key to load in memory\n * @param passphrase If the key is encrypted passphrase to decrypt it\n * @param mnemonic Faucet mnemonic\n * @param secret Faucet secret\n */\nexport async function importKey(\n  toolkit: TezosToolkit,\n  privateKeyOrEmail: string,\n  passphrase?: string,\n  mnemonic?: string,\n  secret?: string\n) {\n  if (privateKeyOrEmail && passphrase && mnemonic && secret) {\n    const signer = InMemorySigner.fromFundraiser(privateKeyOrEmail, passphrase, mnemonic);\n    toolkit.setProvider({ signer });\n    const pkh = await signer.publicKeyHash();\n    let op;\n    try {\n      op = await toolkit.tz.activate(pkh, secret);\n    } catch (ex: any) {\n      const isInvalidActivationError = ex && ex.body && /Invalid activation/.test(ex.body);\n      if (!isInvalidActivationError) {\n        throw ex;\n      }\n    }\n    if (op) {\n      await op.confirmation();\n    }\n  } else {\n    // Fallback to regular import\n    const signer = await InMemorySigner.fromSecretKey(privateKeyOrEmail, passphrase);\n    toolkit.setProvider({ signer });\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n    \"version\": \"13.0.1\"\n};\n","/**\n * @packageDocumentation\n * @module @taquito/signer\n */\nimport { openSecretBox } from '@stablelib/nacl';\nimport { hash } from '@stablelib/blake2b';\nimport { hex2buf, mergebuf, b58cencode, prefix, InvalidKeyError } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport { Tz1 } from './ed-key';\nimport { Tz2, ECKey, Tz3 } from './ec-key';\nimport pbkdf2 from 'pbkdf2';\nimport { mnemonicToSeedSync } from './mnemonicToSeedSync';\n\nexport * from './import-key';\nexport { VERSION } from './version';\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid passphrase being passed or used\n */\nexport class InvalidPassphraseError extends Error {\n  public name = 'InvalidPassphraseError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n * @description A local implementation of the signer. Will represent a Tezos account and be able to produce signature in its behalf\n *\n * @warn If running in production and dealing with tokens that have real value, it is strongly recommended to use a HSM backed signer so that private key material is not stored in memory or on disk\n *\n */\nexport class InMemorySigner {\n  private _key!: Tz1 | ECKey;\n\n  static fromFundraiser(email: string, password: string, mnemonic: string) {\n    const seed = mnemonicToSeedSync(mnemonic, `${email}${password}`);\n    const key = b58cencode(seed.slice(0, 32), prefix.edsk2);\n    return new InMemorySigner(key);\n  }\n\n  static async fromSecretKey(key: string, passphrase?: string) {\n    return new InMemorySigner(key, passphrase);\n  }\n\n  /**\n   *\n   * @param key Encoded private key\n   * @param passphrase Passphrase to decrypt the private key if it is encrypted\n   *\n   */\n  constructor(key: string, passphrase?: string) {\n    const encrypted = key.substring(2, 3) === 'e';\n\n    let decrypt = (k: any) => k;\n\n    if (encrypted) {\n      if (!passphrase) {\n        throw new InvalidPassphraseError('Encrypted key provided without a passphrase.');\n      }\n\n      decrypt = (constructedKey: Uint8Array) => {\n        const salt = toBuffer(constructedKey.slice(0, 8));\n        const encryptedSk = constructedKey.slice(8);\n        const encryptionKey = pbkdf2.pbkdf2Sync(passphrase, salt, 32768, 32, 'sha512');\n\n        return openSecretBox(\n          new Uint8Array(encryptionKey),\n          new Uint8Array(24),\n          new Uint8Array(encryptedSk)\n        );\n      };\n    }\n\n    switch (key.substr(0, 4)) {\n      case 'edes':\n      case 'edsk':\n        this._key = new Tz1(key, encrypted, decrypt);\n        break;\n      case 'spsk':\n      case 'spes':\n        this._key = new Tz2(key, encrypted, decrypt);\n        break;\n      case 'p2sk':\n      case 'p2es':\n        this._key = new Tz3(key, encrypted, decrypt);\n        break;\n      default:\n        throw new InvalidKeyError(key, 'Unsupported key type');\n    }\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param watermark Watermark to append to the bytes\n   */\n  async sign(bytes: string, watermark?: Uint8Array) {\n    let bb = hex2buf(bytes);\n    if (typeof watermark !== 'undefined') {\n      bb = mergebuf(watermark, bb);\n    }\n\n    const bytesHash = hash(bb, 32);\n\n    return this._key.sign(bytes, bytesHash);\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return this._key.publicKey();\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    return this._key.publicKeyHash();\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    return this._key.secretKey();\n  }\n}\n"],"names":[],"mappings":"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"}