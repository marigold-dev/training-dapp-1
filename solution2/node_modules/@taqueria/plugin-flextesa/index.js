var $b4qzn$taquerianodesdk = require("@taqueria/node-sdk");
var $b4qzn$taquerianodesdktypes = require("@taqueria/node-sdk/types");
var $b4qzn$asyncretry = require("async-retry");
var $b4qzn$portfinder = require("portfinder");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}





const { Url: $e0ed972c1eb86e06$var$Url  } = (0, $b4qzn$taquerianodesdktypes.Protocol);
const $e0ed972c1eb86e06$var$getDockerImage = (opts)=>`ghcr.io/ecadlabs/taqueria-flextesa:${opts.setVersion}-${opts.setBuild}`;
const $e0ed972c1eb86e06$var$getUniqueSandboxname = async (sandboxName, projectDir)=>{
    const hash = await (0, $b4qzn$taquerianodesdk.stringToSHA256)(projectDir);
    return `${sandboxName}-${hash}`;
};
const $e0ed972c1eb86e06$var$getContainerName = async (sandboxName, parsedArgs)=>{
    const uniqueSandboxName = await $e0ed972c1eb86e06$var$getUniqueSandboxname(sandboxName, parsedArgs.projectDir);
    return `taqueria-${parsedArgs.env}-${uniqueSandboxName}`;
};
const $e0ed972c1eb86e06$var$getNewPortIfPortInUse = async (port)=>{
    const newPort = await (0, $b4qzn$portfinder.getPortPromise)({
        port: parseInt(port)
    });
    return newPort.toString();
};
const $e0ed972c1eb86e06$var$replaceRpcUrlInConfig = async (newPort, oldUrl, sandboxName, opts)=>{
    const newUrl = oldUrl.replace(/:\d+/, ":" + newPort);
    const config = await (0, $b4qzn$taquerianodesdk.readJsonFile)(opts.config.configFile);
    const sandbox = config.sandbox;
    const sandboxConfig = sandbox ? sandbox[sandboxName] : undefined;
    if (sandboxConfig === undefined) return;
    const updatedConfig = {
        ...config,
        sandbox: {
            ...sandbox,
            [sandboxName]: {
                ...sandboxConfig,
                rpcUrl: newUrl
            }
        }
    };
    await (0, $b4qzn$taquerianodesdk.writeJsonFile)(opts.config.configFile)(updatedConfig);
};
const $e0ed972c1eb86e06$var$getStartCommand = async (sandboxName, sandbox, opts)=>{
    const port = $e0ed972c1eb86e06$var$Url.toComponents(sandbox.rpcUrl).port;
    const newPort = await $e0ed972c1eb86e06$var$getNewPortIfPortInUse(port);
    if (newPort !== port) {
        console.log(`${port} is already in use, ${newPort} will be used for ${sandboxName} instead and .taq/config.json will be updated to reflect this.`);
        await $e0ed972c1eb86e06$var$replaceRpcUrlInConfig(newPort, sandbox.rpcUrl.toString(), sandboxName, opts);
    }
    const ports = `-p ${newPort}:20000`;
    const containerName = await $e0ed972c1eb86e06$var$getContainerName(sandboxName, opts);
    const arch = await (0, $b4qzn$taquerianodesdk.getArch)();
    const image = $e0ed972c1eb86e06$var$getDockerImage(opts);
    const projectDir = process.env.PROJECT_DIR ?? opts.config.projectDir;
    return `docker run --name ${containerName} --rm --detach --platform ${arch} ${ports} -v ${projectDir}:/project -w /app ${image} node index.js --sandbox ${sandboxName}`;
};
const $e0ed972c1eb86e06$var$getConfigureCommand = async (sandboxName, opts)=>{
    const containerName = await $e0ed972c1eb86e06$var$getContainerName(sandboxName, opts);
    return `docker exec ${containerName} node index.js --sandbox ${sandboxName} --configure`;
};
const $e0ed972c1eb86e06$var$getImportAccountsCommand = async (sandboxName, opts)=>{
    const containerName = await $e0ed972c1eb86e06$var$getContainerName(sandboxName, opts);
    return `docker exec ${containerName} node index.js --sandbox ${sandboxName} --importAccounts`;
};
const $e0ed972c1eb86e06$var$doesUseFlextesa = (sandbox)=>!sandbox.plugin || sandbox.plugin === "flextesa";
const $e0ed972c1eb86e06$var$doesNotUseFlextesa = (sandbox)=>!$e0ed972c1eb86e06$var$doesUseFlextesa(sandbox);
const $e0ed972c1eb86e06$var$startInstance = (sandboxName, sandbox, opts)=>{
    if ($e0ed972c1eb86e06$var$doesNotUseFlextesa(sandbox)) return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`Cannot start ${sandbox.label} as its configured to use the ${sandbox.plugin} plugin.`);
    return $e0ed972c1eb86e06$var$isSandboxRunning(sandboxName, opts).then((running)=>running ? (0, $b4qzn$taquerianodesdk.sendAsyncRes)("Already running.") : $e0ed972c1eb86e06$var$getStartCommand(sandboxName, sandbox, opts).then((cmd)=>{
            console.log("Booting sandbox...");
            return (0, $b4qzn$taquerianodesdk.execCmd)(cmd);
        }).then(()=>{
            console.log("Configuring sandbox...");
            return $e0ed972c1eb86e06$var$configureTezosClient(sandboxName, opts);
        }).then(({ stderr: stderr  })=>{
            if (stderr.length) (0, $b4qzn$taquerianodesdk.sendErr)(stderr);
            console.log("Adding accounts...");
            return $e0ed972c1eb86e06$var$importAccounts(sandboxName, opts);
        }).then(({ stderr: stderr  })=>{
            if (stderr.length) (0, $b4qzn$taquerianodesdk.sendErr)(stderr);
            (0, $b4qzn$taquerianodesdk.sendAsyncRes)(`Started ${sandboxName}.`);
        }));
};
const $e0ed972c1eb86e06$var$configureTezosClient = (sandboxName, opts)=>(0, ($parcel$interopDefault($b4qzn$asyncretry)))(()=>$e0ed972c1eb86e06$var$getConfigureCommand(sandboxName, opts).then((0, $b4qzn$taquerianodesdk.execCmd)).then(({ stderr: stderr , stdout: stdout  })=>{
            if (stderr.length) return Promise.reject(stderr);
            return {
                stderr: stderr,
                stdout: stdout
            };
        }));
const $e0ed972c1eb86e06$var$importAccounts = (sandboxName, opts)=>(0, ($parcel$interopDefault($b4qzn$asyncretry)))(()=>$e0ed972c1eb86e06$var$getImportAccountsCommand(sandboxName, opts).then((0, $b4qzn$taquerianodesdk.execCmd)).then(({ stderr: stderr , stdout: stdout  })=>{
            if (stderr.length) return Promise.reject(stderr);
            return {
                stderr: stderr,
                stdout: stdout
            };
        }).catch((stderr)=>{
            return Promise.reject(`There was a problem trying to import accounts into tezos-client for the sandbox: ${stderr}`);
        }));
const $e0ed972c1eb86e06$var$startAll = (opts)=>{
    if (opts.config.sandbox === undefined) return (0, $b4qzn$taquerianodesdk.sendAsyncErr)("No sandboxes configured to start");
    const processes = Object.entries(opts.config.sandbox).reduce((retval, [sandboxName, sandboxDetails])=>{
        if (sandboxName === "default") return retval;
        return [
            ...retval,
            $e0ed972c1eb86e06$var$startInstance(sandboxName, sandboxDetails, opts)
        ];
    }, []);
    return Promise.all(processes).then((_)=>(0, $b4qzn$taquerianodesdk.sendAsyncRes)("Done."));
};
const $e0ed972c1eb86e06$var$getSandbox = ({ sandboxName: sandboxName , config: config  })=>{
    if (sandboxName && config.sandbox && config.sandbox[sandboxName]) {
        const sandboxConfig = config.sandbox[sandboxName];
        return sandboxConfig;
    }
    return undefined;
};
const $e0ed972c1eb86e06$var$startSandboxTask = (parsedArgs)=>{
    if (parsedArgs.sandboxName) {
        const sandbox = $e0ed972c1eb86e06$var$getSandbox(parsedArgs);
        return sandbox ? $e0ed972c1eb86e06$var$startInstance(parsedArgs.sandboxName, sandbox, parsedArgs) : (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`There is no sandbox configuration with the name ${parsedArgs.sandboxName}.`);
    }
    return $e0ed972c1eb86e06$var$startAll(parsedArgs);
};
const $e0ed972c1eb86e06$var$isSandboxRunning = (sandboxName, opts)=>{
    return $e0ed972c1eb86e06$var$getContainerName(sandboxName, opts).then((containerName)=>(0, $b4qzn$taquerianodesdk.execCmd)(`docker ps --filter name=${containerName} | grep -w ${containerName}`)).then((_)=>true).catch((_)=>false);
};
const $e0ed972c1eb86e06$var$getAccountBalances = (sandboxName, sandbox, opts)=>{
    const processes = Object.entries(sandbox.accounts ?? {}).reduce((retval, [accountName, accountDetails])=>{
        if (accountName === "default") return retval;
        const getBalanceProcess = (0, $b4qzn$taquerianodesdk.getArch)().then((_)=>$e0ed972c1eb86e06$var$getContainerName(sandboxName, opts)).then((containerName)=>`docker exec ${containerName} tezos-client get balance for ${accountName.trim()}`).then((0, $b4qzn$taquerianodesdk.execCmd)).then(({ stdout: stdout , stderr: stderr  })=>{
            if (stderr.length > 0) (0, $b4qzn$taquerianodesdk.sendErr)(stderr);
            return {
                account: accountName,
                balance: stdout.trim(),
                address: accountDetails.publicKeyHash
            };
        }).catch((err)=>{
            (0, $b4qzn$taquerianodesdk.sendErr)(err.message);
            return {
                account: accountName,
                balance: "Error",
                address: accountDetails.publicKeyHash
            };
        });
        return [
            ...retval,
            getBalanceProcess
        ];
    }, []);
    return Promise.all(processes);
};
const $e0ed972c1eb86e06$var$listAccountsTask = async (parsedArgs)=>{
    if (parsedArgs.sandboxName) {
        const sandbox = $e0ed972c1eb86e06$var$getSandbox(parsedArgs);
        if (sandbox) {
            if ($e0ed972c1eb86e06$var$doesUseFlextesa(sandbox)) return await $e0ed972c1eb86e06$var$isSandboxRunning(parsedArgs.sandboxName, parsedArgs) ? $e0ed972c1eb86e06$var$getAccountBalances(parsedArgs.sandboxName, sandbox, parsedArgs).then((0, $b4qzn$taquerianodesdk.sendJsonRes)) : (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`The ${parsedArgs.sandboxName} sandbox is not running.`);
            return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`Cannot start ${sandbox.label} as its configured to use the ${sandbox.plugin} plugin.`);
        }
        return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`There is no sandbox configuration with the name ${parsedArgs.sandboxName}.`);
    }
    return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`Please specify a sandbox. E.g. taq list accounts local`);
};
const $e0ed972c1eb86e06$var$stopSandboxTask = async (parsedArgs)=>{
    if (parsedArgs.sandboxName) {
        const sandbox = $e0ed972c1eb86e06$var$getSandbox(parsedArgs);
        if (sandbox) {
            if ($e0ed972c1eb86e06$var$doesUseFlextesa(sandbox)) return await $e0ed972c1eb86e06$var$isSandboxRunning(parsedArgs.sandboxName, parsedArgs) ? (0, $b4qzn$taquerianodesdk.execCmd)(`docker kill ${await $e0ed972c1eb86e06$var$getContainerName(parsedArgs.sandboxName, parsedArgs)}`).then((_)=>(0, $b4qzn$taquerianodesdk.sendAsyncRes)(`Stopped ${parsedArgs.sandboxName}.`)) : (0, $b4qzn$taquerianodesdk.sendAsyncRes)(`The ${parsedArgs.sandboxName} sandbox was not running.`);
            return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`Cannot start ${sandbox.label} as its configured to use the ${sandbox.plugin} plugin.`);
        }
        return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`There is no sandbox configuration with the name ${parsedArgs.sandboxName}.`);
    }
    return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`No sandbox specified`);
};
const $e0ed972c1eb86e06$export$923f96dd5afa9ce6 = (parsedArgs)=>{
    switch(parsedArgs.task){
        case "list accounts":
            return $e0ed972c1eb86e06$var$listAccountsTask(parsedArgs);
        case "start sandbox":
            return $e0ed972c1eb86e06$var$startSandboxTask(parsedArgs);
        case "stop sandbox":
            return $e0ed972c1eb86e06$var$stopSandboxTask(parsedArgs);
        default:
            return (0, $b4qzn$taquerianodesdk.sendAsyncErr)(`${parsedArgs.task} is not an understood task by the Flextesa plugin`);
    }
};
var $e0ed972c1eb86e06$export$2e2bcd8739ae039 = $e0ed972c1eb86e06$export$923f96dd5afa9ce6;


(0, $b4qzn$taquerianodesdk.Plugin).create((_i18n)=>({
        alias: "flextesa",
        schema: "1.0",
        version: "0.1",
        tasks: [
            (0, $b4qzn$taquerianodesdk.Task).create({
                task: "start sandbox",
                command: "start sandbox [sandboxName]",
                aliases: [
                    "start flextesa"
                ],
                description: "Starts a flextesa sandbox",
                options: [],
                handler: "proxy",
                positionals: [
                    (0, $b4qzn$taquerianodesdk.PositionalArg).create({
                        placeholder: "sandboxName",
                        description: "The name of the sandbox to start"
                    }), 
                ]
            }),
            (0, $b4qzn$taquerianodesdk.Task).create({
                task: "stop sandbox",
                command: "stop sandbox [sandboxName]",
                aliases: [
                    "stop flextesa"
                ],
                description: "Stops a flextesa sandbox",
                options: [],
                handler: "proxy",
                positionals: [
                    (0, $b4qzn$taquerianodesdk.PositionalArg).create({
                        placeholder: "sandboxName",
                        description: "The name of the sandbox to stop"
                    }), 
                ]
            }),
            (0, $b4qzn$taquerianodesdk.Task).create({
                task: "list accounts",
                command: "list accounts <sandboxName>",
                aliases: [],
                description: "List the balances of all sandbox accounts",
                options: [],
                handler: "proxy",
                positionals: [
                    (0, $b4qzn$taquerianodesdk.PositionalArg).create({
                        placeholder: "sandboxName",
                        description: "The name of the sandbox to use"
                    }), 
                ],
                encoding: "json"
            }), 
        ],
        proxy: (0, $e0ed972c1eb86e06$export$2e2bcd8739ae039)
    }), process.argv);


//# sourceMappingURL=index.js.map
