{"mappings":"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","sources":["taqueria-plugin-flextesa/index.ts","taqueria-plugin-flextesa/proxy.ts"],"sourcesContent":["import { Plugin, PositionalArg, Task } from '@taqueria/node-sdk';\nimport proxy from './proxy';\n\nPlugin.create(_i18n => ({\n\talias: 'flextesa',\n\tschema: '1.0',\n\tversion: '0.1',\n\ttasks: [\n\t\tTask.create({\n\t\t\ttask: 'start sandbox',\n\t\t\tcommand: 'start sandbox [sandboxName]',\n\t\t\taliases: ['start flextesa'],\n\t\t\tdescription: 'Starts a flextesa sandbox',\n\t\t\toptions: [],\n\t\t\thandler: 'proxy',\n\t\t\tpositionals: [\n\t\t\t\tPositionalArg.create({\n\t\t\t\t\tplaceholder: 'sandboxName',\n\t\t\t\t\tdescription: 'The name of the sandbox to start',\n\t\t\t\t}),\n\t\t\t],\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'stop sandbox',\n\t\t\tcommand: 'stop sandbox [sandboxName]',\n\t\t\taliases: ['stop flextesa'],\n\t\t\tdescription: 'Stops a flextesa sandbox',\n\t\t\toptions: [],\n\t\t\thandler: 'proxy',\n\t\t\tpositionals: [\n\t\t\t\tPositionalArg.create({\n\t\t\t\t\tplaceholder: 'sandboxName',\n\t\t\t\t\tdescription: 'The name of the sandbox to stop',\n\t\t\t\t}),\n\t\t\t],\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'list accounts',\n\t\t\tcommand: 'list accounts <sandboxName>',\n\t\t\taliases: [],\n\t\t\tdescription: 'List the balances of all sandbox accounts',\n\t\t\toptions: [],\n\t\t\thandler: 'proxy',\n\t\t\tpositionals: [\n\t\t\t\tPositionalArg.create({\n\t\t\t\t\tplaceholder: 'sandboxName',\n\t\t\t\t\tdescription: 'The name of the sandbox to use',\n\t\t\t\t}),\n\t\t\t],\n\t\t\tencoding: 'json',\n\t\t}),\n\t],\n\tproxy: proxy,\n}), process.argv);\n","import {\n\texecCmd,\n\tgetArch,\n\treadJsonFile,\n\tsendAsyncErr,\n\tsendAsyncRes,\n\tsendErr,\n\tsendJsonRes,\n\tsendRes,\n\tstringToSHA256,\n\twriteJsonFile,\n} from '@taqueria/node-sdk';\nimport {\n\tLikeAPromise,\n\tProtocol,\n\tRequestArgs,\n\tSandboxAccountConfig,\n\tSandboxConfig,\n\tStdIO,\n} from '@taqueria/node-sdk/types';\nimport { Config, SanitizedArgs, TaqError } from '@taqueria/protocol/taqueria-protocol-types';\nimport retry from 'async-retry';\nimport type { ExecException } from 'child_process';\nimport { getPortPromise } from 'portfinder';\n\nconst { Url } = Protocol;\n\ninterface Opts extends RequestArgs.ProxyRequestArgs {\n\tsandboxName?: string;\n}\n\nconst getDockerImage = (opts: Opts) => `ghcr.io/ecadlabs/taqueria-flextesa:${opts.setVersion}-${opts.setBuild}`;\n\nconst getUniqueSandboxname = async (sandboxName: string, projectDir: string) => {\n\tconst hash = await stringToSHA256(projectDir);\n\treturn `${sandboxName}-${hash}`;\n};\n\nconst getContainerName = async (sandboxName: string, parsedArgs: Opts) => {\n\tconst uniqueSandboxName = await getUniqueSandboxname(sandboxName, parsedArgs.projectDir);\n\treturn `taqueria-${parsedArgs.env}-${uniqueSandboxName}`;\n};\n\nconst getNewPortIfPortInUse = async (port: string): Promise<string> => {\n\tconst newPort = await getPortPromise({ port: parseInt(port) });\n\treturn newPort.toString();\n};\n\nconst replaceRpcUrlInConfig = async (newPort: string, oldUrl: string, sandboxName: string, opts: Opts) => {\n\tconst newUrl = oldUrl.replace(/:\\d+/, ':' + newPort);\n\tconst config = await readJsonFile<Config.t>(opts.config.configFile);\n\tconst sandbox = config.sandbox;\n\tconst sandboxConfig = sandbox ? sandbox[sandboxName] : undefined;\n\tif (sandboxConfig === undefined) return;\n\tconst updatedConfig = {\n\t\t...config,\n\t\tsandbox: {\n\t\t\t...sandbox,\n\t\t\t[sandboxName]: {\n\t\t\t\t...(sandboxConfig as object),\n\t\t\t\trpcUrl: newUrl,\n\t\t\t},\n\t\t},\n\t};\n\tawait writeJsonFile(opts.config.configFile)(updatedConfig);\n};\n\nconst getStartCommand = async (sandboxName: string, sandbox: SandboxConfig.t, opts: Opts) => {\n\tconst port = Url.toComponents(sandbox.rpcUrl).port;\n\tconst newPort = await getNewPortIfPortInUse(port);\n\tif (newPort !== port) {\n\t\tconsole.log(\n\t\t\t`${port} is already in use, ${newPort} will be used for ${sandboxName} instead and .taq/config.json will be updated to reflect this.`,\n\t\t);\n\t\tawait replaceRpcUrlInConfig(newPort, sandbox.rpcUrl.toString(), sandboxName, opts);\n\t}\n\tconst ports = `-p ${newPort}:20000`;\n\n\tconst containerName = await getContainerName(sandboxName, opts);\n\tconst arch = await getArch();\n\tconst image = getDockerImage(opts);\n\tconst projectDir = process.env.PROJECT_DIR ?? opts.config.projectDir;\n\n\treturn `docker run --name ${containerName} --rm --detach --platform ${arch} ${ports} -v ${projectDir}:/project -w /app ${image} node index.js --sandbox ${sandboxName}`;\n};\n\nconst getConfigureCommand = async (sandboxName: string, opts: Opts): Promise<string> => {\n\tconst containerName = await getContainerName(sandboxName, opts);\n\treturn `docker exec ${containerName} node index.js --sandbox ${sandboxName} --configure`;\n};\n\nconst getImportAccountsCommand = async (sandboxName: string, opts: Opts): Promise<string> => {\n\tconst containerName = await getContainerName(sandboxName, opts);\n\treturn `docker exec ${containerName} node index.js --sandbox ${sandboxName} --importAccounts`;\n};\n\nconst doesUseFlextesa = (sandbox: SandboxConfig.t) => !sandbox.plugin || sandbox.plugin === 'flextesa';\n\nconst doesNotUseFlextesa = (sandbox: SandboxConfig.t) => !doesUseFlextesa(sandbox);\n\nconst startInstance = (sandboxName: string, sandbox: SandboxConfig.t, opts: Opts): Promise<void> => {\n\tif (doesNotUseFlextesa(sandbox)) {\n\t\treturn sendAsyncErr(`Cannot start ${sandbox.label} as its configured to use the ${sandbox.plugin} plugin.`);\n\t}\n\n\treturn isSandboxRunning(sandboxName, opts)\n\t\t.then(\n\t\t\trunning =>\n\t\t\t\trunning\n\t\t\t\t\t? sendAsyncRes('Already running.')\n\t\t\t\t\t: getStartCommand(sandboxName, sandbox, opts)\n\t\t\t\t\t\t.then(cmd => {\n\t\t\t\t\t\t\tconsole.log('Booting sandbox...');\n\t\t\t\t\t\t\treturn execCmd(cmd);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tconsole.log('Configuring sandbox...');\n\t\t\t\t\t\t\treturn configureTezosClient(sandboxName, opts);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(({ stderr }) => {\n\t\t\t\t\t\t\tif (stderr.length) sendErr(stderr);\n\t\t\t\t\t\t\tconsole.log('Adding accounts...');\n\t\t\t\t\t\t\treturn importAccounts(sandboxName, opts);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(({ stderr }) => {\n\t\t\t\t\t\t\tif (stderr.length) sendErr(stderr);\n\t\t\t\t\t\t\tsendAsyncRes(`Started ${sandboxName}.`);\n\t\t\t\t\t\t}),\n\t\t);\n};\n\nconst configureTezosClient = (sandboxName: string, opts: Opts): Promise<StdIO> =>\n\tretry(\n\t\t() =>\n\t\t\tgetConfigureCommand(sandboxName, opts)\n\t\t\t\t.then(execCmd)\n\t\t\t\t.then(({ stderr, stdout }) => {\n\t\t\t\t\tif (stderr.length) return Promise.reject(stderr);\n\t\t\t\t\treturn ({ stderr, stdout });\n\t\t\t\t}),\n\t);\n\nconst importAccounts = (sandboxName: string, opts: Opts): Promise<StdIO> =>\n\tretry(\n\t\t() =>\n\t\t\tgetImportAccountsCommand(sandboxName, opts)\n\t\t\t\t.then(execCmd)\n\t\t\t\t.then(({ stderr, stdout }) => {\n\t\t\t\t\tif (stderr.length) {\n\t\t\t\t\t\treturn Promise.reject(stderr);\n\t\t\t\t\t}\n\t\t\t\t\treturn ({ stderr, stdout });\n\t\t\t\t})\n\t\t\t\t.catch(stderr => {\n\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t`There was a problem trying to import accounts into tezos-client for the sandbox: ${stderr}`,\n\t\t\t\t\t);\n\t\t\t\t}),\n\t);\n\nconst startAll = (opts: Opts): Promise<void> => {\n\tif (opts.config.sandbox === undefined) return sendAsyncErr('No sandboxes configured to start');\n\n\tconst processes = Object.entries(opts.config.sandbox).reduce(\n\t\t(retval, [sandboxName, sandboxDetails]) => {\n\t\t\tif (sandboxName === 'default') return retval;\n\t\t\treturn [...retval, startInstance(sandboxName, sandboxDetails as SandboxConfig.t, opts)];\n\t\t},\n\t\t[] as Promise<void>[],\n\t);\n\n\treturn Promise.all(processes).then(_ => sendAsyncRes('Done.'));\n};\n\nconst getSandbox = ({ sandboxName, config }: Opts) => {\n\tif (sandboxName && config.sandbox && config.sandbox[sandboxName]) {\n\t\tconst sandboxConfig = config.sandbox![sandboxName] as SandboxConfig.t;\n\t\treturn sandboxConfig;\n\t}\n\treturn undefined;\n};\n\nconst startSandboxTask = (parsedArgs: Opts): LikeAPromise<void, TaqError.t> => {\n\tif (parsedArgs.sandboxName) {\n\t\tconst sandbox = getSandbox(parsedArgs);\n\t\treturn sandbox\n\t\t\t? startInstance(parsedArgs.sandboxName, sandbox, parsedArgs)\n\t\t\t: sendAsyncErr(`There is no sandbox configuration with the name ${parsedArgs.sandboxName}.`);\n\t}\n\treturn startAll(parsedArgs);\n};\n\nconst isSandboxRunning = (sandboxName: string, opts: Opts) => {\n\treturn getContainerName(sandboxName, opts)\n\t\t.then(containerName => execCmd(`docker ps --filter name=${containerName} | grep -w ${containerName}`))\n\t\t.then(_ => true)\n\t\t.catch(_ => false);\n};\n\ntype AccountBalance = { account: string; balance: string; address: string | undefined };\nconst getAccountBalances = (sandboxName: string, sandbox: SandboxConfig.t, opts: Opts): Promise<AccountBalance[]> => {\n\tconst processes = Object.entries(sandbox.accounts ?? {}).reduce(\n\t\t(retval: Promise<AccountBalance>[], [accountName, accountDetails]) => {\n\t\t\tif (accountName === 'default') return retval;\n\n\t\t\tconst getBalanceProcess = getArch()\n\t\t\t\t.then(_ => getContainerName(sandboxName, opts))\n\t\t\t\t.then(containerName => `docker exec ${containerName} tezos-client get balance for ${accountName.trim()}`)\n\t\t\t\t.then(execCmd)\n\t\t\t\t.then(({ stdout, stderr }) => {\n\t\t\t\t\tif (stderr.length > 0) sendErr(stderr);\n\t\t\t\t\treturn {\n\t\t\t\t\t\taccount: accountName,\n\t\t\t\t\t\tbalance: stdout.trim(),\n\t\t\t\t\t\taddress: (accountDetails as SandboxAccountConfig.t).publicKeyHash,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.catch((err: ExecException) => {\n\t\t\t\t\tsendErr(err.message);\n\t\t\t\t\treturn {\n\t\t\t\t\t\taccount: accountName,\n\t\t\t\t\t\tbalance: 'Error',\n\t\t\t\t\t\taddress: (accountDetails as SandboxAccountConfig.t).publicKeyHash,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\treturn [...retval, getBalanceProcess];\n\t\t},\n\t\t[],\n\t);\n\n\treturn Promise.all(processes);\n};\n\nconst listAccountsTask = async <T>(parsedArgs: Opts): Promise<void> => {\n\tif (parsedArgs.sandboxName) {\n\t\tconst sandbox = getSandbox(parsedArgs);\n\t\tif (sandbox) {\n\t\t\tif (doesUseFlextesa(sandbox)) {\n\t\t\t\treturn await isSandboxRunning(parsedArgs.sandboxName, parsedArgs)\n\t\t\t\t\t? getAccountBalances(parsedArgs.sandboxName, sandbox, parsedArgs)\n\t\t\t\t\t\t.then(sendJsonRes)\n\t\t\t\t\t: sendAsyncErr(`The ${parsedArgs.sandboxName} sandbox is not running.`);\n\t\t\t}\n\t\t\treturn sendAsyncErr(\n\t\t\t\t`Cannot start ${sandbox.label} as its configured to use the ${sandbox.plugin} plugin.`,\n\t\t\t);\n\t\t}\n\t\treturn sendAsyncErr(`There is no sandbox configuration with the name ${parsedArgs.sandboxName}.`);\n\t}\n\treturn sendAsyncErr(`Please specify a sandbox. E.g. taq list accounts local`);\n};\n\nconst stopSandboxTask = async (parsedArgs: Opts): Promise<void> => {\n\tif (parsedArgs.sandboxName) {\n\t\tconst sandbox = getSandbox(parsedArgs);\n\t\tif (sandbox) {\n\t\t\tif (doesUseFlextesa(sandbox)) {\n\t\t\t\treturn await isSandboxRunning(parsedArgs.sandboxName, parsedArgs)\n\t\t\t\t\t? execCmd(`docker kill ${await getContainerName(parsedArgs.sandboxName, parsedArgs)}`)\n\t\t\t\t\t\t.then(_ => sendAsyncRes(`Stopped ${parsedArgs.sandboxName}.`))\n\t\t\t\t\t: sendAsyncRes(`The ${parsedArgs.sandboxName} sandbox was not running.`);\n\t\t\t}\n\t\t\treturn sendAsyncErr(`Cannot start ${sandbox.label} as its configured to use the ${sandbox.plugin} plugin.`);\n\t\t}\n\t\treturn sendAsyncErr(`There is no sandbox configuration with the name ${parsedArgs.sandboxName}.`);\n\t}\n\treturn sendAsyncErr(`No sandbox specified`);\n};\n\nexport const proxy = <T>(parsedArgs: Opts): LikeAPromise<void, TaqError.t> => {\n\tswitch (parsedArgs.task) {\n\t\tcase 'list accounts':\n\t\t\treturn listAccountsTask(parsedArgs);\n\t\tcase 'start sandbox':\n\t\t\treturn startSandboxTask(parsedArgs);\n\t\tcase 'stop sandbox':\n\t\t\treturn stopSandboxTask(parsedArgs);\n\t\tdefault:\n\t\t\treturn sendAsyncErr(`${parsedArgs.task} is not an understood task by the Flextesa plugin`);\n\t}\n};\n\nexport default proxy;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}