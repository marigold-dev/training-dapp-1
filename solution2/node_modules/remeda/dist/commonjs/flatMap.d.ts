/**
 * Map each element of an array using a defined callback function and flatten the mapped result.
 * @param array The array to map.
 * @param fn The function mapper.
 * @signature
 *    R.flatMap(array, fn)
 * @example
 *    R.flatMap([1, 2, 3], x => [x, x * 10]) // => [1, 10, 2, 20, 3, 30]
 * @data_first
 * @pipeable
 * @category Array
 */
export declare function flatMap<T, K>(array: readonly T[], fn: (input: T) => K | K[]): K[];
/**
 * Map each element of an array using a defined callback function and flatten the mapped result.
 * @param array The array to map.
 * @param fn The function mapper.
 * @signature
 *    R.flatMap(fn)(array)
 * @example
 *    R.pipe([1, 2, 3], R.flatMap(x => [x, x * 10])) // => [1, 10, 2, 20, 3, 30]
 * @data_last
 * @pipeable
 * @category Array
 */
export declare function flatMap<T, K>(fn: (input: T) => K | K[]): (array: readonly T[]) => K[];
export declare namespace flatMap {
    function lazy<T, K>(fn: (input: T) => K | K[]): (value: T) => {
        done: boolean;
        hasNext: boolean;
        hasMany: boolean;
        next: K[];
    } | {
        done: boolean;
        hasNext: boolean;
        next: K;
        hasMany?: undefined;
    };
}
//# sourceMappingURL=flatMap.d.ts.map