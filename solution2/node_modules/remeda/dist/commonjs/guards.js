"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNot = exports.isTruthy = exports.isDate = exports.isError = exports.isNil = exports.isFunction = exports.isObject = exports.isArray = exports.isPromise = exports.isBoolean = exports.isDefined = exports.isNumber = exports.isString = void 0;
/**
 * A function that checks if the passed parameter is a string and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isString(data)
 * @returns true if the passed input is a string, false otherwise
 * @example
 *    R.isString('string') //=> true
 *    R.iString(1) //=> false
 * @category Guard
 */
function isString(data) {
    return typeof data === 'string';
}
exports.isString = isString;
/**
 * A function that checks if the passed parameter is a number and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isNumber(data)
 * @returns true if the passed input is a number, false otherwise
 * @example
 *    R.isNumber(1) //=> true
 *    R.isNumber('notANumber') //=> false
 * @category Guard
 */
function isNumber(data) {
    return typeof data === 'number' && !isNaN(data);
}
exports.isNumber = isNumber;
/**
 * A function that checks if the passed parameter is defined and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isDefined(data)
 * @returns true if the passed input is defined, false otherwise
 * @example
 *    R.isDefined('string') //=> true
 *    R.isDefined(null) //=> false
 *    R.isDefined(undefined) //=> false
 * @category Guard
 */
function isDefined(data) {
    return typeof data !== 'undefined' && data !== null;
}
exports.isDefined = isDefined;
/**
 * A function that checks if the passed parameter is a boolean and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isBoolean(data)
 * @returns true if the passed input is a boolean, false otherwise
 * @example
 *    R.isBoolean(true) //=> true
 *    R.isBoolean(false) //=> true
 *    R.isBoolean('somethingElse') //=> false
 * @category Guard
 */
function isBoolean(data) {
    return typeof data === 'boolean';
}
exports.isBoolean = isBoolean;
/**
 * A function that checks if the passed parameter is a Promise and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isPromise(data)
 * @returns true if the passed input is a Promise, false otherwise
 * @example
 *    R.isPromise(Promise.resolve(5)) //=> true
 *    R.isPromise(Promise.reject(5)) //=> true
 *    R.isPromise('somethingElse') //=> false
 * @category Guard
 */
// @ts-expect-error
function isPromise(data) {
    return data instanceof Promise;
}
exports.isPromise = isPromise;
/**
 * A function that checks if the passed parameter is an Array and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isArray(data)
 * @returns true if the passed input is an Array, false otherwise
 * @example
 *    R.isArray([5]) //=> true
 *    R.isArray([]) //=> true
 *    R.isArray('somethingElse') //=> false
 * @category Guard
 */
function isArray(data) {
    return Array.isArray(data);
}
exports.isArray = isArray;
/**
 * A function that checks if the passed parameter is of type Object and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isObject(data)
 * @returns true if the passed input is an Object, Promise, Date or Error, false otherwise
 * @example
 *    R.isObject({}) //=> true
 *    R.isObject(Promise.resolve("something")) //=> true
 *    R.isObject(new Date()) //=> true
 *    R.isObject(new Error("error")) //=> true
 *    R.isObject('somethingElse') //=> false
 * @category Guard
 */
function isObject(data) {
    return !!data && !Array.isArray(data) && typeof data === 'object';
}
exports.isObject = isObject;
/**
 * A function that checks if the passed parameter is a Function and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isFunction(data)
 * @returns true if the passed input is a Function, false otherwise
 * @example
 *    R.isFunction(() => {}) //=> true
 *    R.isFunction('somethingElse') //=> false
 * @category Guard
 */
function isFunction(data) {
    return typeof data === 'function';
}
exports.isFunction = isFunction;
/**
 * A function that checks if the passed parameter is Nil (null or undefined) and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isNil(data)
 * @returns true if the passed input is Nil (null or undefined), false otherwise
 * @example
 *    R.isNil(undefined) //=> true
 *    R.isNil(null) //=> true
 *    R.isNil('somethingElse') //=> false
 * @category Guard
 */
function isNil(data) {
    return data == null;
}
exports.isNil = isNil;
/**
 * A function that checks if the passed parameter is an Error and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isError(data)
 * @returns true if the passed input is an Error, false otherwise
 * @example
 *    R.isError(new Error('message')) //=> true
 *    R.isError('somethingElse') //=> false
 * @category Guard
 */
function isError(data) {
    return data instanceof Error;
}
exports.isError = isError;
/**
 * A function that checks if the passed parameter is a Date and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isDate(data)
 * @returns true if the passed input is a Date, false otherwise
 * @example
 *    R.isDate(new Date()) //=> true
 *    R.isDate('somethingElse') //=> false
 * @category Guard
 */
function isDate(data) {
    return data instanceof Date;
}
exports.isDate = isDate;
/**
 * A function that checks if the passed parameter is truthy and narrows it's type accordingly
 * @param data the variable to check
 * @signature
 *    R.isTruthy(data)
 * @returns true if the passed input is truthy, false otherwise
 * @example
 *    R.isTruthy('somethingElse') //=> true
 *    R.isTruthy(null) //=> false
 *    R.isTruthy(undefined) //=> false
 *    R.isTruthy(false) //=> false
 *    R.isTruthy(0) //=> false
 *    R.isTruthy('') //=> false
 * @category Guard
 */
function isTruthy(data) {
    return !!data;
}
exports.isTruthy = isTruthy;
function isNot(predicate) {
    return function (data) {
        return !predicate(data);
    };
}
exports.isNot = isNot;
