"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var forEach_1 = require("./forEach");
var pipe_1 = require("./pipe");
var take_1 = require("./take");
var array = [1, 2, 3];
describe('data_first', function () {
    it('forEach', function () {
        var cb = jest.fn();
        var result = forEach_1.forEach(array, cb);
        expect(cb.mock.calls).toEqual([[1], [2], [3]]);
        expect(result).toEqual(array);
    });
    it('forEach.indexed', function () {
        var cb = jest.fn();
        var result = forEach_1.forEach.indexed(array, cb);
        expect(cb.mock.calls).toEqual([
            [1, 0, array],
            [2, 1, array],
            [3, 2, array],
        ]);
        expect(result).toEqual(array);
    });
});
describe('data_last', function () {
    it('forEach', function () {
        var cb = jest.fn();
        var result = pipe_1.pipe(array, forEach_1.forEach(cb));
        expect(cb.mock.calls).toEqual([[1], [2], [3]]);
        expect(result).toEqual(array);
    });
    it('forEach.indexed', function () {
        var cb = jest.fn();
        var result = pipe_1.pipe(array, forEach_1.forEach.indexed(cb));
        expect(cb.mock.calls).toEqual([
            [1, 0, array],
            [2, 1, array],
            [3, 2, array],
        ]);
        expect(result).toEqual(array);
    });
});
describe('pipe', function () {
    it('with take', function () {
        var count = jest.fn();
        var result = pipe_1.pipe([1, 2, 3], forEach_1.forEach(function (x) {
            count();
        }), take_1.take(2));
        expect(count).toHaveBeenCalledTimes(2);
        expect(result).toEqual([1, 2]);
    });
    it('indexed', function () {
        var count = jest.fn();
        var result = pipe_1.pipe([1, 2, 3], forEach_1.forEach.indexed(function () {
            count();
        }), take_1.take(2));
        expect(count).toHaveBeenCalledTimes(2);
        expect(result).toEqual([1, 2]);
    });
});
