/**
 * Returns elements from the array until predicate returns false.
 * @param array the array
 * @param fn the predicate
 * @signature
 *    R.takeWhile(array, fn)
 * @example
 *    R.takeWhile([1, 2, 3, 4, 3, 2, 1], x => x !== 4) // => [1, 2, 3]
 * @data_first
 * @category Array
 */
export declare function takeWhile<T>(array: readonly T[], fn: (item: T) => boolean): T[];
/**
 * Returns elements from the array until predicate returns false.
 * @param fn the predicate
 * @signature
 *    R.takeWhile(fn)(array)
 * @example
 *    R.pipe([1, 2, 3, 4, 3, 2, 1], R.takeWhile(x => x !== 4))  // => [1, 2, 3]
 * @data_last
 * @category Array
 */
export declare function takeWhile<T>(fn: (item: T) => boolean): (array: readonly T[]) => T[];
//# sourceMappingURL=takeWhile.d.ts.map