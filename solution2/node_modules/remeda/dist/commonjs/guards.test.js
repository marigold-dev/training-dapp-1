"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var guards_1 = require("./guards");
var dataProvider = function (t) {
    switch (t) {
        case 'number':
            return 5;
        case 'array':
            return [1, 2, 3];
        case 'boolean':
            return false;
        case 'date':
            return new Date();
        case 'function':
            return function () { };
        case 'null':
            return null;
        case 'promise':
            return Promise.resolve(5);
        case 'string':
            return 'text';
        case 'object':
            return { a: 'asd' };
        case 'error':
            return new Error('asd');
    }
    return 'text';
};
describe('isString', function () {
    test('isString: should work as type guard', function () {
        var data = dataProvider('string');
        if (guards_1.isString(data)) {
            expect(typeof data).toEqual('string');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isString: should work even if data type is unknown', function () {
        var data = dataProvider('string');
        if (guards_1.isString(data)) {
            expect(typeof data).toEqual('string');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isString: should work with literal types', function () {
        var data = function () {
            return 'a';
        };
        var x = data();
        if (guards_1.isString(x)) {
            expect(typeof x).toEqual('string');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isString: should work as type guard in array', function () {
        var data = [
            dataProvider('error'),
            dataProvider('string'),
            dataProvider('function'),
            dataProvider('null'),
            dataProvider('array'),
            dataProvider('boolean'),
        ].filter(guards_1.isString);
        expect(data.every(function (c) { return typeof c === 'string'; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isBoolean', function () {
    test('isBoolean: should work as type guard', function () {
        var data = dataProvider('boolean');
        if (guards_1.isBoolean(data)) {
            expect(typeof data).toEqual('boolean');
            var result = true;
            expect(result).toEqual(true);
        }
        var data1 = dataProvider('boolean');
        if (guards_1.isBoolean(data1)) {
            expect(typeof data1).toEqual('boolean');
            var result = true;
            expect(result).toEqual(true);
        }
        var data2 = dataProvider('boolean');
        if (guards_1.isBoolean(data2)) {
            expect(typeof data2).toEqual('boolean');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isBoolean: should work as type guard in filter', function () {
        var data = [
            dataProvider('error'),
            dataProvider('array'),
            dataProvider('function'),
            dataProvider('null'),
            dataProvider('array'),
            dataProvider('boolean'),
        ].filter(guards_1.isBoolean);
        expect(data.every(function (c) { return typeof c === 'boolean'; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isArray', function () {
    test('isArray: should work as type guard', function () {
        var data = dataProvider('array');
        if (guards_1.isArray(data)) {
            expect(Array.isArray(data)).toEqual(true);
            var result = true;
            expect(result).toEqual(true);
        }
        var data1 = dataProvider('array');
        if (guards_1.isArray(data1)) {
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isArray: should work as type guard in filter', function () {
        var data = [
            dataProvider('error'),
            dataProvider('array'),
            dataProvider('function'),
            dataProvider('null'),
            dataProvider('array'),
            dataProvider('date'),
        ].filter(guards_1.isArray);
        expect(data.every(function (c) { return Array.isArray(c); })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isDate', function () {
    test('isDate: should work as type guard', function () {
        var data = dataProvider('date');
        if (guards_1.isDate(data)) {
            expect(data instanceof Date).toEqual(true);
            var result = true;
            expect(result).toEqual(true);
        }
        var data1 = dataProvider('date');
        if (guards_1.isDate(data1)) {
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isDate: should work as type guard in filter', function () {
        var data = [
            dataProvider('error'),
            dataProvider('array'),
            dataProvider('function'),
            dataProvider('null'),
            dataProvider('number'),
            dataProvider('date'),
        ].filter(guards_1.isDate);
        expect(data.every(function (c) { return c instanceof Date; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isDefined', function () {
    test('isDefined": should work as type guard', function () {
        var data = dataProvider('date');
        if (guards_1.isDefined(data)) {
            expect(data instanceof Date).toEqual(true);
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isDefined: should work as type guard in filter', function () {
        var data = [
            dataProvider('error'),
            dataProvider('array'),
            dataProvider('function'),
            dataProvider('null'),
            dataProvider('number'),
        ].filter(guards_1.isDefined);
        expect(data.length === 4).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isNil', function () {
    test('isNil: should work as type guard', function () {
        var data = dataProvider('null');
        if (guards_1.isNil(data)) {
            expect(data).toEqual(null);
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isNil: should work as type guard in filter', function () {
        var data = [
            dataProvider('error'),
            dataProvider('array'),
            dataProvider('function'),
            dataProvider('function'),
            dataProvider('null'),
            dataProvider('number'),
        ].filter(guards_1.isNil);
        expect(data.every(function (c) { return c == null; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isFunction', function () {
    test('isFunction: should work as type guard', function () {
        var data = dataProvider('null');
        if (guards_1.isFunction(data)) {
            expect(data).toEqual(null);
            var result = true;
            expect(result).toEqual(true);
        }
        var maybeFunction;
        if (guards_1.isFunction(maybeFunction)) {
            maybeFunction(1);
            var result1 = true;
            expect(result1).toEqual(true);
        }
    });
    test('isFunction: should work as type guard in filter', function () {
        var data = [
            dataProvider('error'),
            dataProvider('array'),
            dataProvider('function'),
            dataProvider('function'),
            dataProvider('object'),
            dataProvider('number'),
        ].filter(guards_1.isFunction);
        expect(data.every(function (c) { return typeof c === 'function'; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isError', function () {
    test('isError: should work as type guard', function () {
        var data = dataProvider('error');
        if (guards_1.isError(data)) {
            expect(data instanceof Error).toEqual(true);
            var result = true;
            expect(result).toEqual(true);
        }
        var MyError = /** @class */ (function (_super) {
            __extends(MyError, _super);
            function MyError() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MyError;
        }(Error));
        var maybeError;
        if (guards_1.isError(maybeError)) {
            var result1 = true;
            expect(result1).toEqual(true);
        }
    });
    test('isError: should work as type guard in filter', function () {
        var data = [
            dataProvider('error'),
            dataProvider('array'),
            dataProvider('boolean'),
            dataProvider('function'),
            dataProvider('object'),
            dataProvider('number'),
        ].filter(guards_1.isError);
        expect(data.every(function (c) { return c instanceof Error; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isNumber', function () {
    test('isNumber: should work as type guard', function () {
        var data = dataProvider('number');
        if (guards_1.isNumber(data)) {
            expect(typeof data).toEqual('number');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isNumber: should work as type guard in filter', function () {
        var data = [
            dataProvider('promise'),
            dataProvider('array'),
            dataProvider('boolean'),
            dataProvider('function'),
            dataProvider('object'),
            dataProvider('number'),
        ].filter(guards_1.isNumber);
        expect(data.every(function (c) { return typeof c === 'number'; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
    test('should work even if data type is unknown', function () {
        var data = dataProvider('number');
        if (guards_1.isNumber(data)) {
            expect(typeof data).toEqual('number');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('should work with literal types', function () {
        var data = function () {
            return 1;
        };
        var x = data();
        if (guards_1.isNumber(x)) {
            expect(typeof x).toEqual('number');
            var result = true;
            expect(result).toEqual(true);
        }
    });
});
describe('isObject', function () {
    test('isObject: should work as type guard', function () {
        var data = dataProvider('object');
        if (guards_1.isObject(data)) {
            expect(typeof data).toEqual('object');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isObject: should work as type guard', function () {
        var data = { data: 5 };
        if (guards_1.isObject(data)) {
            expect(typeof data).toEqual('object');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isObject: should work as type guard for more narrow types', function () {
        var data = { data: 5 };
        if (guards_1.isObject(data)) {
            expect(typeof data).toEqual('object');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('should work even if data type is unknown', function () {
        var data = dataProvider('object');
        if (guards_1.isObject(data)) {
            expect(typeof data).toEqual('object');
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isObject: should work as type guard in filter', function () {
        var data = [
            dataProvider('promise'),
            dataProvider('array'),
            dataProvider('boolean'),
            dataProvider('function'),
            dataProvider('object'),
        ].filter(guards_1.isObject);
        expect(data.every(function (c) { return typeof c === 'object' && !Array.isArray(c); })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isPromise', function () {
    test('isPromise: should work as type guard', function () {
        var data = dataProvider('promise');
        if (guards_1.isPromise(data)) {
            expect(data instanceof Promise).toEqual(true);
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isPromise: should work as type guard in filter', function () {
        var data = [
            dataProvider('promise'),
            dataProvider('array'),
            dataProvider('boolean'),
            dataProvider('function'),
        ].filter(guards_1.isPromise);
        expect(data.every(function (c) { return c instanceof Promise; })).toEqual(true);
        var result = true;
        expect(result).toEqual(true);
    });
});
describe('isTruthy', function () {
    test('isTruthy', function () {
        var data = { a: 'asd' };
        if (guards_1.isTruthy(data)) {
            expect(data).toEqual({ a: 'asd' });
            var result = true;
            expect(result).toEqual(true);
        }
    });
});
describe('isNot', function () {
    test('isNot: should work as type guard', function () {
        var data = dataProvider('promise');
        if (guards_1.isNot(guards_1.isString)(data)) {
            expect(data instanceof Promise).toEqual(true);
            var result = true;
            expect(result).toEqual(true);
        }
    });
    test('isNot: should work as type guard in filter', function () {
        var data = [
            dataProvider('promise'),
            dataProvider('array'),
            dataProvider('boolean'),
            dataProvider('function'),
        ];
        var result = data.filter(guards_1.isNot(guards_1.isPromise));
        expect(result.some(function (c) { return c instanceof Promise; })).toEqual(false);
        var resultType = true;
        expect(resultType).toEqual(true);
    });
});
