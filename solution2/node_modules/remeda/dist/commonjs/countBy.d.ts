import { Pred, PredIndexed } from './_types';
/**
 * Counts how many values of the collection pass the specified predicate.
 * @param items The input data.
 * @param fn The predicate.
 * @signature
 *    R.countBy(array, fn)
 * @example
 *    R.countBy([1, 2, 3, 4, 5], x => x % 2 === 0) // => 2
 * @data_first
 * @indexed
 * @category Array
 */
export declare function countBy<T>(items: readonly T[], fn: Pred<T, boolean>): number;
export declare function countBy<T>(fn: Pred<T, boolean>): (array: readonly T[]) => number;
export declare namespace countBy {
    function indexed<T, K>(array: readonly T[], fn: PredIndexed<T, boolean>): number;
    function indexed<T, K>(fn: PredIndexed<T, boolean>): (array: readonly T[]) => number;
}
//# sourceMappingURL=countBy.d.ts.map