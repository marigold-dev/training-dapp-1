import { LazyResult } from './_reduceLazy';
/**
 * Returns the first `n` elements of `array`.
 * @param array the array
 * @param n the number of elements to take
 * @signature
 *    R.take(array, n)
 * @example
 *    R.take([1, 2, 3, 4, 3, 2, 1], 3) // => [1, 2, 3]
 * @data_first
 * @pipeable
 * @category Array
 */
export declare function take<T>(array: readonly T[], n: number): T[];
/**
 * Returns the first `n` elements of `array`.
 * @param n the number of elements to take
 * @signature
 *    R.take(n)(array)
 * @example
 *    R.pipe([1, 2, 3, 4, 3, 2, 1], R.take(n)) // => [1, 2, 3]
 * @data_last
 * @pipeable
 * @category Array
 */
export declare function take<T>(n: number): (array: readonly T[]) => T[];
export declare namespace take {
    function lazy<T>(n: number): (value: T) => LazyResult<T>;
}
//# sourceMappingURL=take.d.ts.map