import { LazyResult } from './_reduceLazy';
import { Pred, PredIndexedOptional, PredIndexed } from './_types';
/**
 * Reject the elements of an array that meet the condition specified in a callback function.
 * @param items The array to reject.
 * @param fn the callback function.
 * @signature
 *    R.reject(array, fn)
 *    R.reject.indexed(array, fn)
 * @example
 *    R.reject([1, 2, 3], x => x % 2 === 0) // => [1, 3]
 *    R.reject.indexed([1, 2, 3], (x, i, array) => x % 2 === 0) // => [1, 3]
 * @data_first
 * @indexed
 * @pipeable
 * @category Array
 */
export declare function reject<T>(items: readonly T[], fn: Pred<T, boolean>): T[];
/**
 * Reject the elements of an array that meet the condition specified in a callback function.
 * @param items The array to reject.
 * @param fn the callback function.
 * @signature
 *    R.reject(array, fn)
 *    R.reject.indexed(array, fn)
 * @example
 *    R.reject([1, 2, 3], x => x % 2 === 0) // => [1, 3]
 *    R.reject.indexed([1, 2, 3], (x, i, array) => x % 2 === 0) // => [1, 3]
 * @data_first
 * @indexed
 * @pipeable
 * @category Array
 */
export declare function reject<T>(fn: Pred<T, boolean>): (items: readonly T[]) => T[];
export declare namespace reject {
    function indexed<T, K>(array: readonly T[], fn: PredIndexed<T, boolean>): K[];
    function indexed<T, K>(fn: PredIndexed<T, boolean>): (array: readonly T[]) => K[];
    const lazy: <T>(fn: PredIndexedOptional<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<T>;
    const lazyIndexed: (<T>(fn: PredIndexedOptional<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<T>) & {
        indexed: true;
    };
}
//# sourceMappingURL=reject.d.ts.map