import { LazyResult } from './_reduceLazy';
/**
 * Removes first `n` elements from the `array`.
 * @param array the target array
 * @param n the number of elements to skip
 * @signature
 *    R.drop(array, n)
 * @example
 *    R.drop([1, 2, 3, 4, 5], 2) // => [3, 4, 5]
 * @data_first
 * @pipeable
 * @category Array
 */
export declare function drop<T>(array: readonly T[], n: number): T[];
/**
 * Removes first `n` elements from the `array`.
 * @param array the target array
 * @param n the number of elements to skip
 * @signature
 *    R.drop(n)(array)
 * @example
 *    R.drop(2)([1, 2, 3, 4, 5]) // => [3, 4, 5]
 * @data_last
 * @pipeable
 * @category Array
 */
export declare function drop<T>(n: number): (array: readonly T[]) => T[];
export declare namespace drop {
    function lazy<T>(n: number): (value: T) => LazyResult<T>;
}
//# sourceMappingURL=drop.d.ts.map