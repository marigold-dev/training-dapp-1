import { zipWith } from './zipWith';
var pred = function (a, b) { return a + b; };
var first = ['1', '2', '3'];
var second = ['a', 'b', 'c'];
var shorterFirst = ['1', '2'];
var shorterSecond = ['a', 'b'];
describe('data first', function () {
    test('should zip with predicate', function () {
        expect(zipWith(first, second, pred)).toEqual(['1a', '2b', '3c']);
    });
    test('should truncate to shorter second', function () {
        expect(zipWith(first, shorterSecond, pred)).toEqual(['1a', '2b']);
    });
    test('should truncate to shorter first', function () {
        expect(zipWith(shorterFirst, second, pred)).toEqual(['1a', '2b']);
    });
});
describe('data first typings', function () {
    test('infers typing from predicate', function () {
        var actual = zipWith(first, second, pred);
        var result = true;
        expect(result).toBe(true);
    });
});
describe('data second', function () {
    test('should zip with predicate', function () {
        expect(zipWith(pred)(first, second)).toEqual(['1a', '2b', '3c']);
    });
    test('should truncate to shorter second', function () {
        expect(zipWith(pred)(first, shorterSecond)).toEqual(['1a', '2b']);
    });
    test('should truncate to shorter first', function () {
        expect(zipWith(pred)(shorterFirst, second)).toEqual(['1a', '2b']);
    });
});
describe('data second typings', function () {
    test('infers typing from predicate', function () {
        var actual = zipWith(pred)(first, second);
        var result = true;
        expect(result).toBe(true);
    });
});
describe('data second with initial arg', function () {
    test('should zip with predicate', function () {
        expect(zipWith(pred, second)(first)).toEqual(['1a', '2b', '3c']);
    });
    test('should truncate to shorter second', function () {
        expect(zipWith(pred, shorterSecond)(first)).toEqual(['1a', '2b']);
    });
    test('should truncate to shorter first', function () {
        expect(zipWith(pred, second)(shorterFirst)).toEqual(['1a', '2b']);
    });
});
describe('data second with initial arg typings', function () {
    test('infers typing from predicate', function () {
        var actual = zipWith(pred, second)(first);
        var result = true;
        expect(result).toBe(true);
    });
});
