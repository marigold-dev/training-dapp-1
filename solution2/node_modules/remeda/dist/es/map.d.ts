import { LazyResult } from './_reduceLazy';
import { Pred, PredIndexedOptional, PredIndexed } from './_types';
/**
 * Map each element of an array using a defined callback function.
 * @param array The array to map.
 * @param fn The function mapper.
 * @returns The new mapped array.
 * @signature
 *    R.map(array, fn)
 *    R.map.indexed(array, fn)
 * @example
 *    R.map([1, 2, 3], x => x * 2) // => [2, 4, 6]
 *    R.map.indexed([0, 0, 0], (x, i) => i) // => [0, 1, 2]
 * @data_first
 * @indexed
 * @pipeable
 * @category Array
 */
export declare function map<T, K>(array: readonly T[], fn: Pred<T, K>): K[];
/**
 * Map each value of an object using a defined callback function.
 * @param fn the function mapper
 * @signature
 *    R.map(fn)(array)
 *    R.map.indexed(fn)(array)
 * @example
 *    R.pipe([0, 1, 2], R.map(x => x * 2)) // => [2, 4, 6]
 *    R.pipe([0, 0, 0], R.map.indexed((x, i) => i)) // => [0, 1, 2]
 * @data_last
 * @indexed
 * @pipeable
 * @category Array
 */
export declare function map<T, K>(fn: Pred<T, K>): (array: readonly T[]) => K[];
export declare namespace map {
    function indexed<T, K>(array: readonly T[], fn: PredIndexed<T, K>): K[];
    function indexed<T, K>(fn: PredIndexed<T, K>): (array: readonly T[]) => K[];
    const lazy: <T, K>(fn: PredIndexedOptional<T, K>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<K>;
    const lazyIndexed: (<T, K>(fn: PredIndexedOptional<T, K>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<K>) & {
        indexed: true;
    };
}
//# sourceMappingURL=map.d.ts.map