import { LazyResult } from './_reduceLazy';
/**
 * Excludes the values from `other` array.
 * @param array the source array
 * @param other the values to exclude
 * @signature
 *    R.difference(array, other)
 * @example
 *    R.difference([1, 2, 3, 4], [2, 5, 3]) // => [1, 4]
 * @data_first
 * @category Array
 * @pipeable
 */
export declare function difference<T>(array: readonly T[], other: readonly T[]): T[];
/**
 * Excludes the values from `other` array.
 * @param other the values to exclude
 * @signature
 *    R.difference(other)(array)
 * @example
 *    R.difference([2, 5, 3])([1, 2, 3, 4]) // => [1, 4]
 *    R.pipe(
 *      [1, 2, 3, 4, 5, 6], // only 4 iterations
 *      R.difference([2, 3]),
 *      R.take(2)
 *    ) // => [1, 4]
 * @data_last
 * @category Array
 * @pipeable
 */
export declare function difference<T, K>(other: readonly T[]): (array: readonly K[]) => T[];
export declare namespace difference {
    function lazy<T>(other: T[]): (value: T) => LazyResult<T>;
}
//# sourceMappingURL=difference.d.ts.map