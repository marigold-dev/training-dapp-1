var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { purry } from './purry';
export function sortBy(arrayOrSort) {
    var sorts = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sorts[_i - 1] = arguments[_i];
    }
    if (!isSortRule(arrayOrSort)) {
        return purry(_sortBy, [arrayOrSort, sorts]);
    }
    return purry(_sortBy, [__spreadArrays([arrayOrSort], sorts)]);
}
function isSortRule(x) {
    if (typeof (x) == 'function')
        return true; // must be a SortProjection
    if (x.length != 2)
        return false; // cannot be a SortRule
    return (typeof x[0] == 'function' && (x[1] === 'asc' || x[1] === 'desc'));
}
function _sortBy(array, sorts) {
    var sort = function (a, b, sortRule, sortRules) {
        var _a;
        var fn;
        var direction;
        if (Array.isArray(sortRule)) {
            _a = sortRule, fn = _a[0], direction = _a[1];
        }
        else {
            direction = 'asc';
            fn = sortRule;
        }
        var dir = direction !== 'desc' ? function (x, y) { return x > y; } : function (x, y) { return x < y; };
        if (!fn) {
            return 0;
        }
        if (dir(fn(a), fn(b))) {
            return 1;
        }
        if (dir(fn(b), fn(a))) {
            return -1;
        }
        return sort(a, b, sortRules[0], sortRules.slice(1));
    };
    var copied = __spreadArrays(array);
    return copied.sort(function (a, b) {
        return sort(a, b, sorts[0], sorts.slice(1));
    });
}
