import { pathOr } from './pathOr';
import { pipe } from './pipe';
var obj = {
    a: {
        b: {
            c: 1,
        },
    },
    y: 10,
};
describe('data first', function () {
    test('should return default value (input undefined)', function () {
        expect(pathOr(undefined, ['x'], 2)).toEqual(2);
    });
    test('should return value', function () {
        expect(pathOr(obj, ['y'], 2)).toEqual(10);
    });
    test('should return default value', function () {
        expect(pathOr(obj, ['x'], 2)).toEqual(2);
    });
    test('should return value (2 level deep)', function () {
        expect(pathOr(obj, ['a', 'b'], { c: 0 })).toEqual({ c: 1 });
    });
    test('should return default value (2 level deep)', function () {
        expect(pathOr(obj, ['a', 'z'], 3)).toEqual(3);
    });
    test('should return value (3 level deep)', function () {
        // TODO: fix typing
        // @ts-ignore
        expect(pathOr(obj, ['a', 'b', 'c'], 0)).toEqual(1);
    });
});
describe('data last', function () {
    test('1 level', function () {
        expect(pipe(obj, pathOr(['x'], 1))).toEqual(1);
    });
    test('2 level', function () {
        expect(pipe(obj, pathOr(['a', 'z'], 1))).toEqual(1);
    });
    test('3 level', function () {
        // @ts-ignore
        expect(pipe(obj, pathOr(['a', 'b', 'd'], 1))).toEqual(1);
    });
});
