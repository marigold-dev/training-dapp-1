import { zip } from './zip';
var first = [1, 2, 3];
var second = ['a', 'b', 'c'];
var shorterFirst = [1, 2];
var shorterSecond = ['a', 'b'];
describe('data first', function () {
    test('should zip', function () {
        expect(zip(first, second)).toEqual([
            [1, 'a'],
            [2, 'b'],
            [3, 'c'],
        ]);
    });
    test('should truncate to shorter second', function () {
        expect(zip(first, shorterSecond)).toEqual([
            [1, 'a'],
            [2, 'b'],
        ]);
    });
    test('should truncate to shorter first', function () {
        expect(zip(shorterFirst, second)).toEqual([
            [1, 'a'],
            [2, 'b'],
        ]);
    });
});
describe('data first typings', function () {
    test('arrays', function () {
        var actual = zip(first, second);
        var result = true;
        expect(result).toBe(true);
    });
    test('tuples', function () {
        var actual = zip(first, second);
        var result = true;
        expect(result).toBe(true);
    });
    test('variadic tuples', function () {
        var firstVariadic = [1, 'b', 'c'];
        var secondVariadic = ['a', 2, 3];
        var actual = zip(firstVariadic, secondVariadic);
        var result = true;
        expect(result).toBe(true);
    });
});
describe('data second', function () {
    test('should zip', function () {
        expect(zip(second)(first)).toEqual([
            [1, 'a'],
            [2, 'b'],
            [3, 'c'],
        ]);
    });
    test('should truncate to shorter second', function () {
        expect(zip(shorterSecond)(first)).toEqual([
            [1, 'a'],
            [2, 'b'],
        ]);
    });
    test('should truncate to shorter first', function () {
        expect(zip(second)(shorterFirst)).toEqual([
            [1, 'a'],
            [2, 'b'],
        ]);
    });
});
describe('data second typings', function () {
    test('arrays', function () {
        var actual = zip(second)(first);
        var result = true;
        expect(result).toBe(true);
    });
    test('tuples', function () {
        var actual = zip(second)(first);
        var result = true;
        expect(result).toBe(true);
    });
    test('variadic tuples', function () {
        var firstVariadic = [1, 'b', 'c'];
        var secondVariadic = ['a', 2, 3];
        var actual = zip(secondVariadic)(firstVariadic);
        var result = true;
        expect(result).toBe(true);
    });
});
