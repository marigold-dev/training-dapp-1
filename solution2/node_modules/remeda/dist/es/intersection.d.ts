import { LazyResult } from './_reduceLazy';
/**
 * Returns a list of elements that exist in both array.
 * @param array the source array
 * @param other the second array
 * @signature
 *    R.intersection(array, other)
 * @example
 *    R.intersection([1, 2, 3], [2, 3, 5]) // => [2, 3]
 * @data_first
 * @category Array
 * @pipeable
 */
export declare function intersection<T>(source: readonly T[], other: readonly T[]): T[];
/**
 * Returns a list of elements that exist in both array.
 * @param array the source array
 * @param other the second array
 * @signature
 *    R.intersection(other)(array)
 * @example
 *    R.intersection([2, 3, 5])([1, 2, 3]) // => [2, 3]
 * @data_last
 * @category Array
 * @pipeable
 */
export declare function intersection<T, K>(other: readonly T[]): (source: readonly K[]) => T[];
export declare namespace intersection {
    function lazy<T>(other: T[]): (value: T) => LazyResult<T>;
}
//# sourceMappingURL=intersection.d.ts.map