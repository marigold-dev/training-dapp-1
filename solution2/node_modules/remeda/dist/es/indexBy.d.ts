import { PredIndexed } from './_types';
/**
 * Converts a list of objects into an object indexing the objects by the given key.
 * @param array the array
 * @param fn the indexing function
 * @signature
 *    R.indexBy(array, fn)
 * @example
 *    R.indexBy(['one', 'two', 'three'], x => x.length) // => {3: 'two', 5: 'three'}
 * @data_first
 * @indexed
 * @category Array
 */
export declare function indexBy<T>(array: readonly T[], fn: (item: T) => any): Record<string, T>;
/**
 * Converts a list of objects into an object indexing the objects by the given key.
 * @param array the array
 * @param fn the indexing function
 * @signature
 *    R.indexBy(fn)(array)
 * @example
 *    R.pipe(
 *      ['one', 'two', 'three'],
 *      R.indexBy(x => x.length)
 *    ) // => {3: 'two', 5: 'three'}
 * @data_last
 * @indexed
 * @category Array
 */
export declare function indexBy<T>(fn: (item: T) => any): (array: readonly T[]) => Record<string, T>;
export declare namespace indexBy {
    function indexed<T, K>(array: readonly T[], fn: PredIndexed<T, any>): Record<string, T>;
    function indexed<T, K>(fn: PredIndexed<T, any>): (array: readonly T[]) => Record<string, T>;
}
//# sourceMappingURL=indexBy.d.ts.map